<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[【转】程序员为什么会忧虑自己的未来?]]></title>
      <url>%2F%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F-2017-06-02-%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%BF%A7%E8%99%91%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%AA%E6%9D%A5.html</url>
      <content type="text"><![CDATA[所谓的稳定，是最大的谎言。在高速发展的行业，根本没有一个稳定的职业。解决焦虑的最终办法是重新定位自己的职业生涯，尽量不以所谓的熟练度和经验作为自己的竞争力，将自己的职业生涯押注在某项低门槛的技术上，而是根据自身的情况，持续不断提高综合竞争力，加强自己的不可替代性。 文章作者:陈驰远，青橙科技CTO，互联网行业的一名老兵，以下是部分摘录。更多讨论，请戳原文。原文链接:https://juejin.im/post/5930acd6a0bb9f0058af41e5 从去年开始，我参加了一些分享交流，也对外发过一些自己对工作所遇问题的思考。不少程序员加我好友咨询问题，几乎每个人问的问题都跟职业规划有关。这提醒了我，其实我自己也一直在思考同样的问题并尝试规划未来。于是想和大家分享一下自己在这方面的感悟。 本文仅从我自己的角度来剖析对程序员职业规划的看法，并不全面。而下文中提到的程序员群体也泛指在一线具体执行编码任务的程序员，不包含一些高精尖技术岗位的专业技术人才或是已经有自己明确职业规划，已经进阶成功的工程师。 什么引发了焦虑？互联网是一个新兴但高速发展的行业。新兴意味着没有那么多的职场楷模给新人指明方向，也没有一套公认的稳定可复制的职业发展路线。高速发展意味着变革与竞争，大量新人因为行业红利涌入，你无时无刻要跟一群优秀的热血青年同场竞技。 互联网行业工作强度很大，而中国的互联网从业者更忙。程序员更是战场中的排头兵，身体健康的透支导致很难长期抗战。当你意识到自己跟不上节奏的时候，不管是出于对身体状况的担忧，还是对未来潜在威胁的恐惧，又怎会不感到焦虑呢？而程序员的职业特性加剧了这种焦虑，主要表现在以下几方面： 程序员职业复利性较低。什么叫复利性？就如同利息的计算方法一样，在本金相同的情况下，复利获得的利息回报要高于单利，而年期越长，复利效应越高。职业一样有复利效应，一个复利高的职业在职业生涯中后期会展现出越来越高的价值。医生、律师都是复利性很高的职业。而程序员职业复利性较低，主要有两个原因： 专业性强，通用性差。不同技术种类有着自己的技术栈，共用的只有设计思想、编程范式，基础技术等通用知识。 在没有明确规划的情况下，大多数程序员日常工作积累的不是通用知识与综合能力，而仅仅是某项技术的熟练度与经验。这是根本原因。 这造成了一个问题——当职业生涯遇到瓶颈时，程序员很难完成一次完美的进阶。让我们分析下最常见的三类方案： 技术职位之间的转岗。这是最普遍的一种情况，Android转IOS，后端转前端等都在此列。虽然设计原则、编程范式等技术知识是通用的，但作为一线的执行者，技术的熟练度才是影响你工作效率的最大因素，你必须对技术栈非常熟悉才能体现工作的专业度。 转岗往往是无奈之举。 技术转产品/运营岗。很多工程师抱怨产品经理设计的产品有问题，逻辑不严密，用起来很别扭。但让工程师做产品，问题一般会更多。为什么呢？最大的原因在于程序员的思维模式或多或少会受到编程的影响，偏向理性与具象化，缺少了感性的察言观色以及换位思考的能力。设计好一个产品，逻辑严密只是条件之一，但并不是最重要的条件。产品经理需要从用户的行为中挖掘出用户真正的需求，提炼归纳并设计成一个可用的产品。这是大多数程序员很难做好的事情。 技术转管理岗。BAT都有自己的M岗位，高工都可以选择是继续走技术路线还是尝试走管理路线。很多程序员安慰自己，哪天真写不动代码了，那我就做技术经理吧。但我认为管理岗的转变比前面两类都难。管理是一门很深的学问，执行和管理是两回事，需要从根本上改变思维模式。评判一个工程师的好坏可以看工程师的产出，而评判一个管理者的好坏在于整个团队的产出和效率。很多优秀的程序员自己技术能力很强，却很难带领整个团体一起向前进。 程序员职业的壁垒没想象中高，鲁棒性低。鲁棒性也指抗变换性，一个好的职业需要有高的鲁棒性。大部分程序员把自己的职业与某项技能绑定。做过编程的都知道，一个高耦合低抽象的编码鲁棒性一定低。互联网行业变化太快，回头看下诺基亚的发展，Windows桌面应用开发，整个行业如同大浪淘沙。随着云平台的崛起，公有化平台的发展，API服务的开放，可以预见从业者的工作效率会大幅提高，同时很多职业可能会再次洗牌：基础运维工程师，DBA，基础算法工程师，安全工程师，图像算法工程师，数据工程师等等都在此列。 从另外一个角度来说，假设你运气很好，选择了一项长期热门的技术比如Web前端开发。但是因为行业红利太高，无数聪明、努力、上进的热血青年涌入其中。随着社区的发展，在线教育的普及，达到同样熟练度的时间越来越短，而热门互联网技术的发展是以月计，你需要花费大量的时间去学习积累新技术。新人与你的差距会越来越小，你会随时面临被超车的局面。这意味着，很多时候即使你认为自己经验更丰富，能力更强，但你却得不到理想的职位及薪资待遇。 程序员职业能撬动的价值有限。这个概念受启发于《格鲁夫给经理人的第一课》一书。格鲁夫试图定量的分析经理人的产出，于是提出了一个公式：经理人的产出 = 他直接管辖部门的产出 + 他间接影响所及部门的产出。为了定量的分析职业的价值，我也引入了一个公式：产出的价值 = 他自身的产出 + 他直接影响部门的产出 + 他间接影响所及部门的产出 职业能影响的人越多，创造的价值越高，职业的上限价值也越高。 互联网行业的供求关系以及价值体系，造成了一个现象：程序员供不应求使其入行薪资高，但是工作五年以上薪资趋向于稳定。对于绝大部分公司的绝大部分职位，当熟练度和经验达到某一个阈值的时候，选择成本是趋同的，自身效率提高所能带动的价值提高已经很有限。正因为如此，从业者在享受了薪资高速增长之后，很难接受薪资增幅趋缓，职业生涯遇到瓶颈引发焦虑。 我的规划是什么？分析了这么多，我最想表达的意思是：所谓的稳定，是最大的谎言。在高速发展的行业，根本没有一个稳定的职业。解决焦虑的最终办法是重新定位自己的职业生涯，尽量不以所谓的熟练度和经验作为自己的竞争力，将自己的职业生涯押注在某项低门槛的技术上，而是根据自身的情况，持续不断提高综合竞争力，加强自己的不可替代性。 首先我会分析自己的特点，这是建立与他人的差异性和自己独特标签的关键所在，也是最值得加强的地方。我最大的特点是什么？有野心。我不想选择一种得过且过的生活，而会选择一个产出价值更高的事情来做，影响更多的人，创造更高的价值。会沟通。我沟通能力不错，既可以对外谈合作，又可以对内做管理。这会是我相对一般技术型程序员一个很大的不同。专业强。在专业技能层面我有较深的认识与理解，虽然谈不上顶尖，但我知道怎么运用自己的知识能力找到最适合现状的方法解决几乎所有日常问题。技术积累永远是我最核心的竞争力。 知道自己特点之后，我会以此为基础来增强自己的不可替代性。不可替代性不仅仅只是基于个人的能力，还有这几点是需要日常注意积累的：健康的身体。在经历过一次生病后，我更加意识到拥有一个健康的身体才是最重要的。积极健身可是我们青橙员工的必备素质。思想与格局的高度。思想的高度并不是一朝一夕就能拔高的，而是在经历了来自工作与生活的各种挑战之后，静下心来反思总结，从而慢慢积累并提升。人脉与影响力。乐于记录和分享自己的工作感悟。抓住向其他人学习的机会，比如参加一些会议或交流，不管是同行业还是其他行业的，都是很有必要的。人脉和影响力的积累与格局的高度也是相辅相成的，与某些方面比自己优秀的人交流往往会收获满满。当我有了明确的方向并且每天都能看到自己进步的时候，就会对未来充满憧憬。我给自己未来的定位是做一名解决者。何谓解决者？面对未知或已知的问题，知道如何分析本质原因，制定并实施解决方案。附加打油诗一首： 文能设计定需求，武可写码做架构。进做招商引融资，退做大V占风口。产品体验包上线，还要招人带节奏。 本文链接：http://www.sguotao.com/生活感悟-2017-06-02-程序员为什么会忧虑自己的未来.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【学习笔记】ReactNative Flex整理]]></title>
      <url>%2FReactNative-2017-05-17-rn-flex.html</url>
      <content type="text"><![CDATA[Flex容器属性 flex-direction 属性决定主轴的方向（即项目的排列方向）。 row（默认值）：主轴为水平方向，起点在左端。 row-reverse：主轴为水平方向，起点在右端。 column：主轴为垂直方向，起点在上沿。 column-reverse：主轴为垂直方向，起点在下沿。 flex-wrap 默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。 nowrap（默认）：不换行。 wrap：换行，第一行在上方。 wrap-reverse：换行，第一行在下方。 flex-flow 属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。 justify-content 属性定义了项目在主轴上的对齐方式。 flex-start（默认值）：左对齐 flex-end：右对齐 center： 居中 space-between：两端对齐，项目之间的间隔都相等。 space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。 align-items 属性定义项目在交叉轴上如何对齐。 flex-start：交叉轴的起点对齐。 flex-end：交叉轴的终点对齐。 center：交叉轴的中点对齐。 baseline: 项目的第一行文字的基线对齐。 stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。 align-content 属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。 flex-start：与交叉轴的起点对齐。 flex-end：与交叉轴的终点对齐。 center：与交叉轴的中点对齐。 space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。 space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。 stretch（默认值）：轴线占满整个交叉轴。 Flex项目属性 order 属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。 flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。 flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。 flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。 flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。 align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。 本文链接：http://www.sguotao.com/ReactNative-2017-05-17-rn-flex.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】明朝那些事儿]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2017-05-11-%E6%98%8E%E6%9C%9D%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.html</url>
      <content type="text"><![CDATA[内容简介《明朝那些事儿(典藏全集)(套装共9本)》共九部，包括《朱元璋，从和尚到皇帝》、《朱棣：逆子还明明君》、《太监弄乱的王朝》、《妖孽横行的宫廷》等。《明朝那些事儿(典藏全集)(套装共9本)》这篇文主要讲述的是从1344年到1644年这三百年间关于明朝的一些事情，以史料为基础，以年代和具体人物为主线，并加入了小说的笔法，对明朝十七帝和其他王公权贵和小人物的命运进行全景展示，尤其对官场政治、战争、帝王心术着墨最多，并加入对当时政治经济制度、人伦道德的演义。 本文链接：http://www.sguotao.com/读书笔记-2017-05-11-明朝那些事儿.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android动画分析三 Property Animation]]></title>
      <url>%2FAndroid%E8%BF%9B%E9%98%B6-2016-05-20-android-property-animation.html</url>
      <content type="text"><![CDATA[Android的动画可以大体分为两类，分别是传统动画和Android3.0之后出现的属性动画(Property Animation)，关于传统动画的介绍在此前的两篇笔记中，进行了整理。Android动画分析一 View AnimationAndroid动画分析二 Drawable Animation在这一篇中，将对Android3.0之后出现的属性动画(Property Animation)进行整理。既然已经有了View Animation和Drawable Animation了，为什么还要引入Property Animation呢？ 1.使用动画场景的需求超出了移动、缩放、旋转和淡入淡出这四种对View的操作，那么View动画就不能再帮我们忙了，也就是说View动画在功能和可扩展方面都有相当大的局限性。 2.Property Animation是改变对象的属性，不仅仅是对view本身做操作。传统的View动画只是改变view的显示效果，并不改变view的属性。郭霖介绍一个比较形象的例子🌰，比如说，现在屏幕的左上角有一个按钮，然后我们通过View动画将它移动到了屏幕的右下角，点击一下这个按钮，点击事件是绝对不会触发的，因为实际上这个按钮还是停留在屏幕的左上角，只不过View动画将这个按钮绘制到了屏幕的右下角而已。属性动画的实现机制是通过对目标对象进行赋值并修改其属性来实现的，那么之前所说的按钮显示的问题也就不复存在了，如果我们通过属性动画来移动一个按钮，那么这个按钮就是真正的移动了，而不再是仅仅在另外一个位置绘制了而已。 Property AnimationProperty Animation是Android3.0(API11)之后引入的动画，属性动画的引入，极大的地丰富了Android的动画体系，与传统的View动画和Drawable动画还是存在一些差别，在使用的过程中需要留意：1.传统动画的xml文件存放在res/anim/目录下，而属性动画的xml文件存放在res/animator/目录下，虽然animator有这anim的前缀，但这是两个完全不同的目录。由于存放目录的不同，因此在代码中引用的方式也会有所差别，传统动画可以通过R.anim.filename获得动画的引用，属性通过则通过R.animator.filename获得动画的引用。2.属性动画常用的Java类与传统动画Java类很相似，比如属性动画集AnimatorSet和传统动画集AnimationSet，在使用时注意区别，可以简化记忆“后缀是mator的是属性动画，后缀是mation的是传统动画”。属性动画中，常用的类，可以简单的用下面的类图进行概括。 AnimatiorValueAnimator 和 ObjectAnimatorAnimatorSet属性动画实现点赞效果参考文献Property AnimationAndroid属性动画完全解析(上)，初识属性动画的基本用法Android属性动画完全解析(中)，ValueAnimator和ObjectAnimator的高级用法Android属性动画完全解析(下)，Interpolator和ViewPropertyAnimator的用法 本文链接：http://www.sguotao.com/Android进阶-2016-05-20-android-property-animation.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】人民的名义]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2017-05-04-%E4%BA%BA%E6%B0%91%E7%9A%84%E5%90%8D%E4%B9%89.html</url>
      <content type="text"><![CDATA[利用五一假期的时间，读完了小说《人民的名义》，看完小说，看了电视剧，可能是出于剧情的考虑，电视剧对书中的内容作了部分的扩展，但是整体的主线被完整的保存了下来。看一本小说，有时候很难理清小说中出现的各个人物的关系，这种感觉，在读国外小说时，感觉尤其明显。先上一张剧中的任务关系图(来源网络) 本文链接：http://www.sguotao.com/读书笔记-2017-05-04-人民的名义.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android内存泄露]]></title>
      <url>%2FAndroid%E8%BF%9B%E9%98%B6-2017-03-24-android-memory-leak.html</url>
      <content type="text"><![CDATA[内存泄露与内存溢出内存泄露内存泄露(Memory Leak)是指无用对象（不再使用的对象）持续占有内存，或者无用对象的内存得不到及时释放，从而造成内存空间得不到有效的利用。在Java中，内存泄露的原因，通常是长生命周期的对象，持有短生命周期对象的引用。在《深入理解Java虚拟机》中的解释是，当无用对象一直被有用对象引用，导致无用对象可达，JVM无法对无用对象完成回收。从而造成内存泄露。 内存溢出内存溢出(Out of Memory)是指程序在运行过程中，无法申请到足够的的内存导致的一种错误。内存泄露是会导致内存溢出，但不是导致内存溢出的唯一原因。 Java中的内存泄露Java 内存分配Java中的内存分配主要分三块，静态存储区，栈区和堆区。 静态存储区，编译时分配，存在于程序的整个运行期间，主要用于存放静态数据和常量。 栈区，在方法执行时，用于存放方法内部的局部变量，方法结束后，内存释放。 堆区，通常用来存放new出来的对象，由JVM进行回收处理。 四种引用类型从JDK1.2开始，Java将对象的引用分为了强引用、软引用、弱引用和虚引用。 强引用(Strong Reference),平时使用最多的一种引用，如果一个对象的引用方式是强引用，垃圾回收器不会对该对象进行回收，即使出现了内存空间不足的情况，JVM会抛出Out of Memory,也不会对强引用的对象进行回收。 软引用(Soft Reference),在对象的引用强度上若于强引用，对于弱引用的对象，当内存不足时，JVM会回收软引用对象，释放内存空间。通常情况下，缓存的创建，适合使用软引用的方式。 弱引用(Weak Reference),在对象的引用强度上，弱于软引用，相对于强引用对象的不可回收，弱引用的对象，不存在这种情况，在垃圾回收器工作时，不论内存空间是否充足，都会对弱引用的对象进行回收。弱引用的作用，主要在于解决强引用对象之前的耦合关系，如在集合类中，任何Java对象都可以作为键来使用，当一个键值对被放入到集合中，集合对象本身就对这些键和值产生引用，如果是强引用，只要集合对象本身存在，其中包含的键和值就不会被回收，当集合包含的键和值越来越多时，最后会消耗掉JVM中的全部内存。 虚引用(Phantom Reference)，使用的情况并不多见，主要用来实现比较清晰的内存控制，这对于内存有限的移动设备是很有意义的。虚引用用来跟踪对象被垃圾回收器回收的活动，虚引用和软引用，弱引用的一个明显的区别是，虚引用必须和引用队列联合使用，通过检查引用队列中的内容，可以判断一个对象是否即将被回收。 一个对象的引用类型有多个，怎么判断？判定规则如下： 单条引用链上的可达性，以最弱的一个引用类型来决定； 多条引用链上的可达性，以最强的一个引用类型来决定； 我们假设上图中，1和3为强引用，5为软引用，7为弱引用。对于对象5的引用类型，在路径1–5中，5为软引用类型，依据规则1，对象5为软引用类型。在路径3–7中，7为弱引用类型，所以对象5为弱引用类型。依据规则2，多条引用链上的可达性，以最强的一个引用类型决定，因此，对象5的引用类型为软引用类型。 内存泄露检测工具MonitorsMemory Monitors是AndroidStudio自带的一个性能检测工具，主要包含以下几个功能： 实时查看app的内存使用情况； 能够比较直观的了解到app的运行卡顿是否跟GC的频繁操作有关； 能够了解到app的crash是否跟内存溢出有关； 能够发现内存抖动(在短时间内分配大量内存，频繁的引起GC操作) DDMS Dump什么是Java Heap Dump？首先需要搞明白什么是Java Heap，Java Heap是分配给实例类和数组对象运行数据区，所有Java线程在运行期间共享heap中的数据，Java Heap Dump相当于在应用运行时，某个时间点进行一次快照，在AndroidStudio中，快照会被保存为.hprof类型的文件，保存在captures目录中。 分析.hprof文件，我们可以将.hprof视图分成A、B、C三个部分，在A部分中，可以看到app的整个堆内存信息，显示了在堆内存中的所有的java类。 名称 含义 Total Count 内存中，当前Java类的实例数量 Heap Count 堆内存中，当前Java类的实例数量 Size of 当前Java类每个实例对象需要占用内存的物理大小 Shallow Size 当前Java实例对象占有的内存大小 Retained Size 释放当前Java实例对象后，节省的内存大小 当选中A区域中的某个Java类，可以在B区域中看到选中Java类的所有实例对象。 名称 含义 Depth 当前对象的深度 Shallow Size 当前对象占有的内存大小 Dominating Size 当前对象可支配的内存大小 在B中看到选中Java类的所有实例对象的同时，在C区域能够看到哪些对象引用了该对象。 什么是Allocation Tracker？Allocation Tracker主要用来追踪内存分配信息，Start Allocation Tracking 相当于在程序运行时，某个时间节点，对内存分配信息进行一次快照，生成的快照文件被保存为.alloc类型，保存在captures目录中。Allocation Tracker 也可以在Devices Monitor中启动，在Devices Monitor中使用时，需要设备有Root权限。 MATMAT(Eclipse Memory Analyzer)是一个堆转储文件分析工具，在Monitor的快照文件(.hprof)，需要转换成MAT可以打开的标准.hprof文件，使用Mat工具打开转换后的.hprof文件，会生成一个内存消耗整体状况的报告，从饼状图中，可以比较直观地看到哪些对象占用了多少的内存空间。这里介绍一下，MAT给我们提供的几个分析的维度。 Histogram，在该视图中可以清晰的看出内存中对象的数量，及所占用内存空间的大小。 Dominator Tree:在该视图中，可以在线程的角度观察到哪些对象占用内存空间。 Top Consumers:从包，对象等角度，显示内存的占用情况，能够比较直观的找出占用内存比较多的对象。 Leak Suspects:分析内存泄露的情况，生成一份报表，给出一些problem的建议。 下面介绍一些常用的操作，视图中支持正则表达式筛选，可以过滤出我们比较关心的对象，可以以列表或者树形的结构显示出来，其中： with incoming references:过滤出那些类引用了当前选中的类； with outcoming references:过滤出当前选中类引用了哪些类； 垃圾回收器会对虚拟机的内存空间，即堆空间中已经存在的对象进行识别，如果对象正在被引用，那么称其为存活对象，如果对象不在被引用，则为垃圾回收器回收的对象，这部分对象占用的内存空间可以被回收。 在垃圾回收机制中有一组元素被称为根元素集合，它们是一组被虚拟机直接引用的对象。堆空间中的每个对象都是由一个根元素为起点被层层调用的。所以，一个对象如果被一个存活的根元素所引用，就会被认为是存活对象，不能被回收。这时，可以通过分析一个对象到根元素的引用路径来分析该对象为什么不能够被顺利回收。 当选中某个对象，通过Merge Shortest Paths to GC Root的操作，可以显示对象之间的排除了软引用，弱引用和虚引用的引用关系，这样我们看到的就是被选中对象是否还存在强引用，通过分析 ，能够直接找到内存没有释放的原因。 开发中常见内存泄露的场景1.Context对象使用不当；在Android中经常使用的单例模式，如果使用不当，会出现内存泄露，泄露的主要原因是因为，单例模式中的静态成员变量的生命周期与应用的生命周期一样长。比较常见的场景是，经常在一些工具类中使用单例模式，如xxManager,xxHelper，xxUtils,这些工具类中需要使用Context,由于Activity是间接继承Context，当Activity退出时，单例对象中持有了它的引用，导致Activity回收失败，从而出现内存泄露。处理方式是使用Application,由于Application的生命周期贯穿整个应用，所以当这些工具类需要使用到Context时，使用getApplication()或者getApplicationContext()。 12345678910111213141516 public class Util &#123; private Context mContext; private static Util sInstance; private Util(Context context) &#123; this.mContext = context; &#125; public static Util getInstance(Context context) &#123; if (sInstance == null) &#123;// sInstance = new Util(context); sInstance = new Util(context.getApplicationContext()); &#125; return sInstance; &#125; &#125; 2.内部类使用不当当使用非静态的内部类时，如果出现内部类持有外部类的引用，就会出现内存泄露，优化方法，可以使用静态的内部类，这样内部类就不在持有外部类的引用，不会影响GC对于外部类的回收。 123456789101112131415161718192021public class MyActivity extends AppCompatActivity &#123; /** * 静态成员变量 */ public static InnerClass innerClass = null; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_my); innerClass = new InnerClass(); &#125; class InnerClass &#123; public void doSomeThing() &#123; &#125; &#125;&#125; 3.Handler的异步消息通信在使用Handler时出现内存泄露的主要原因是Handler的生命周期与Activity的生命周期不一致，当应用启动时，创建UI主线程Looper对象，Looper实现了简单的消息队列，主线程Looper对象存在整个应用的生命周期中。 123456789101112131415161718public class HandlerActivity extends Activity &#123; private final Handler mHandler = new Handler() &#123; @Override public void handleMessage(Message msg) &#123; // ... &#125; &#125;; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mHandler.sendMessageDelayed(Message.obtain(), 10*000); finish(); &#125;&#125; 当在Actiivity中使用Handler时，就可能会产生内存泄露，究其根本原因，是我们使用的非静态内部类(或者匿名内部类)默认隐性持有外部类的引用，静态内部类不会持有外部类的引用。在Activity结束时，由于Message是延迟消息，会在主线程的消息队列中，该消息持有Activity中的Handler的引用，Handler默认持有Activity的引用，直至该消息被处理完。此时导致Activity对象无法被回收，就会出现内存泄露。优化方法，可以使用静态内部类继承Handler对象，或者在Activity的onDestory()方法中，调用mHandler.removeCallbacksAndMessages(null); 4.Bitmap使用不当使用Bitmap如果回收不及时，也会出现内存泄露。原因在于Bitmap类没有对外创建对象的构造方法，获得Bitmap对象只能通过BitmapFactory中的各种静态方法，生成Bitmap对象是通过JNI调用底层c来实现的。所以，当我们获取一个Bitmap对象时，其对应的内存中包含两部分内容，一部分是Java，一部分是c,Java部分的内存可以通过GC进行回收，但是c部分的内存GC是不会进行自动回收的，所以，我们在使用Bitmap对象时，需要调用recycle()来主动释放c部分的内存。 123456// 判断是否已经回收if(bitmap != null &amp;&amp; !bitmap.isRecycled())&#123; // 回收并且置为null bitmap.recycle(); bitmap = null; &#125; 5.资源性对象没有及时关闭当我们使用一些资源性对象时，如果没有做关闭操作，也会出现内存泄露，常见的资源性对象包括(Cursor、ContentProvider、File、Stream)等。还有一类如EventBus、BroadCastReceiver在注册后，为了避免重复注册，需要在退出时及时的销毁。 6.集合列表相关集合类如果仅仅有添加元素的方法，而没有相应的删除机制，导致内存被占用。如果这个集合类是全局性的变量 (比如类中的静态属性，全局性的 map 等即有静态引用或 final 一直指向它)，那么没有相应的删除机制，很可能导致集合所占用的内存只增不减。 7.Native中存在内存泄露由于Native层的代码多用c或c++来实现，GC无法对这部分内存进行会后处理，这时可能会出现内存泄露，这时候就需要c工程师帮助分析，如Malloc的内存是否做了free处理，指针使用完成后，是否进行了置空处理等等。 参考文章 科普：内存泄漏与内存溢出 Java的内存泄漏 Android 内存泄露总结 Java四种引用类型 MAT使用教程 本文链接：http://www.sguotao.com/Android进阶-2017-03-24-android-memory-leak.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【学习笔记】ReactNative样式整理]]></title>
      <url>%2FReactNative-2017-04-25-rn-css.html</url>
      <content type="text"><![CDATA[ReactNative的样式是CSS样式的一个子集，并且属性名称与CSS中规定的也不完全相同。 引入样式的几种方法常见的引用样式的几种方法，包括内嵌方式，外联方式和混合方式，还可以把样式定义在单独的文件中，通过import引用。 1. 内嵌方式1234567891011121314151617export default class appProject extends Component &#123; render() &#123; return ( &lt;View style=&#123; &#123; marginTop:200, marginLeft:5, marginRight:5, height:84, flexDirection:&apos;row&apos;, backgroundColor:&apos;#FF0067&apos;, &#125; &#125;&gt; &lt;/View&gt; ) &#125;&#125; 2. 外联方式12345678910const Styles = StyleSheet.create(&#123; container: &#123; marginTop:200, marginLeft:5, marginRight:5, height:84, flexDirection:&apos;row&apos;, backgroundColor:&apos;#FF0067&apos;, &#125;&#125;); 3. 混合方式123456789export default class appProject extends Component &#123; render() &#123; return ( //外层容器 &lt;View style=&#123;[Styles.container,Styles.bg,&#123;color:&apos;red&apos;&#125;]&#125;&gt; &lt;/View&gt; ) &#125;&#125; 4.import引用1234567891011121314151617import React from &apos;react&apos;import &#123; StyleSheet,&#125; from &apos;react-native&apos;;const styles = StyleSheet.create(&#123; container: &#123; marginTop:200, marginLeft:5, marginRight:5, height:84, flexDirection:&apos;row&apos;, &#125;, bg:&#123; backgroundColor:&apos;#FF0067&apos;, &#125;&#125;);module.exports = styles; 通过import进行引入1import styles from &apos;./styles/style&apos;; 常见的属性及说明1.背景 属性名称 取值 对应css属性 backgroundColor color 对应 CSS 中的 background-color 属性 2.宽高尺寸 属性名称 取值 对应css属性 width number 对应 CSS 中的 width 属性 height number 对应 CSS 中的 height 属性 3.外边距相关(margin) 属性名称 取值 对应css属性 margin number 对应 CSS 中的 margin 属性，不同的是，只能定义一个参数，用以表示上、右、下、左4个方位的外补白 marginHorizontal number CSS中没有对应的属性，相当于同时设置marginRight和marginLeft marginVertical number CSS中没有对应的属性，相当于同时设置marginTop和marginBottom marginTop number 对应 CSS 中的 margin-top 属性 marginRight number 对应 CSS 中的 margin-right 属性 marginBottom number 对应 CSS 中的 margin-bottom 属性 marginLeft number 对应 CSS 中的 margin-left 属性 4.内边距相关(padding) 属性名称 取值 对应css属性 padding number 对应 CSS 中的 padding 属性，不同的是，只能定义一个参数，用以表示上、右、下、左4个方位的内补白 paddingHorizontal number CSS中没有对应的属性，相当于同时设置paddingRight和paddingLeft paddingVertical number CSS中没有对应的属性，相当于同时设置paddingTop和paddingBottom paddingTop number 对应 CSS 中的 padding-top 属性 paddingRight number 对应 CSS 中的 padding-right 属性 paddingBottom number 对应 CSS 中的 padding-bottom 属性 paddingLeft number 对应 CSS 中的 padding-left 属性 5.边框相关(border) 属性名称 取值 对应css属性 borderStyle solid, dotted, dashed 对应 CSS 中的 border-style 属性，但阉割了 none, hidden, double, groove, ridge, inset, outset 取值，且无方向分拆属性 borderWidth number 对应 CSS 中的 border-width 属性 borderTopWidth number 对应 CSS 中的 border-top-width 属性 borderRightWidth number 对应 CSS 中的 border-right-width 属性 borderBottomWidth number 对应 CSS 中的 border-bottom-width 属性 borderLeftWidth number 对应 CSS 中的 border-left-width 属性 borderColor color 对应 CSS 中的 border-color 属性 borderTopColor color 对应 CSS 中的 border-top-color 属性 borderRightColor color 对应 CSS 中的 border-right-color 属性 borderBottomColor color 对应 CSS 中的 border-bottom-color 属性 borderLeftColor color 对应 CSS 中的 border-left-color 属性 borderRadius number 对应 CSS 中的 border-radius 属性 borderTopLeftRadius number 对应 CSS 中的 border-top-left-radius 属性 borderTopRightRadius number 对应 CSS 中的 border-top-right-radius 属性 borderBottomLeftRadius number 对应 CSS 中的 border-bottom-left-radius 属性 borderBottomRightRadius number 对应 CSS 中的 border-bottom-right-radius 属性 6.位置相关(position) 属性名称 取值 对应css属性 position absolute, relative 对应 CSS 中的 position 属性，但阉割了 static, fixed 取值 top number&gt; 对应 CSS 中的 top 属性 right number 对应 CSS 中的 right 属性 bottom number 对应 CSS 中的 bottom 属性 left number 对应 CSS 中的 left 属性 7.文本相关(Text) 属性名称 取值 对应css属性 color color 对应 CSS 中的 color 属性 fontFamily string 对应 CSS 中的 font-family 属性 fontSize number 对应 CSS 中的 font-size 属性 fontStyle normal, italic 对应 CSS 中的 font-style 属性，但阉割了 oblique 取值 fontWeight normal, bold 100~900 对应 CSS 中的 font-weight 属性，但阉割了 bolder, lighter 取值 lineHeight number 对应 CSS 中的 line-height 属性 textAlign auto, left, right, center, justifyiOS 对应 CSS 中的 text-align 属性，增加了 auto 取值 textAlignVerticalAndroid auto, top, bottom, center 对应 CSS 中的 vertical-align 属性，增加了 auto 取值，center 取代了 middle，并阉割了 baseline, sub 等值 textShadowColor color 对应 CSS 中的 text-shadow 属性中的颜色定义 textShadowOffset {width: number, height: number} 对应 CSS 中的 text-shadow 属性中的阴影偏移定义 textShadowRadius number 在 CSS 中，阴影的圆角大小取决于元素的圆角定义，不需要额外定义 letterSpacingiOS number 对应 CSS 中的 letter-spacing 属性，但取值不同 textDecorationColoriOS color 对应 CSS 中的 text-decoration-color 属性 textDecorationLineiOS none, underline, line-through, underline line-through 对应 CSS 中的 text-decoration-line 属性，但阉割了 overline, blink 取值 textDecorationStyleiOS solid, double, dotted, dashed 对应 CSS 中的 text-decoration-style 属性，但阉割了 wavy 取值 writingDirectioniOS auto, ltr, rtl 对应 CSS 中的 direction 属性，增加了 auto 取值 8.弹性布局相关(Flex) 属性名称 取值 对应css属性 flex number 对应 CSS 中的 flex 属性 flexDirection row, column 对应 CSS 中的 flex-direction 属性，但阉割了 row-reverse, column-reverse 取值 flexWrap wrap, nowrap 对应 CSS 中的 flex-wrap 属性，但阉割了 wrap-reverse 取值 justifyContent flex-start, flex-end, center, space-between, space-around 对应 CSS 中的 justify-content 属性，但阉割了 stretch 取值。 alignItems flex-start, flex-end, center, stretch 对应 CSS 中的 align-items 属性，但阉割了 baseline 取值。 alignSelf auto, flex-start, flex-end, center, stretch 对应 CSS 中的 align-self 属性，但阉割了 baseline 取值 9.转换相关(transform) 属性名称 取值 对应css属性 transform [{perspective: number}, {rotate: string}, {rotateX: string}, {rotateY: string}, {rotateZ: string}, {scale: number}, {scaleX: number}, {scaleY: number}, {translateX: number}, {translateY: number}, {skewX: string}, {skewY: string}] 对应 CSS 中的 transform 属性 transformMatrix TransformMatrixPropType 类似于 CSS 中 transform 属性的 matrix() 和 matrix3d() 函数 backfaceVisibility visible, hidden 对应 CSS 中的 backface-visibility 属性 10.图片相关 属性名称 取值 对应css属性 resizeMode cover, contain, stretch contain是指无论如何图片都包含在指定区域内，假设设置的宽度高度比图片大，则图片居中显示，否则，图片等比缩小显示 overflow visible, hidden 超出部分是否显示，hidden为隐藏 tintColor number 着色，rgb字符串类型 opacity number 透明度 11.图像变换 属性名称 取值 对应css属性 rotation – 旋转 scaleX – 水平方向缩放 scaleY – 垂直方向缩放 translateX – 水平方向平移 translateY – 水平方向平移 本文链接：http://www.sguotao.com/ReactNative-2017-04-25-rn-css.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android动态加载机制]]></title>
      <url>%2F%E6%8F%92%E4%BB%B6%E6%A1%86%E6%9E%B6-2017-03-17-classloader.html</url>
      <content type="text"><![CDATA[Java的类加载机制ClassLoader我们编写的java代码，最终会编译成.class字节码的形式，一个完整的Java程序，通常会由若干个.class文件组成，在程序运行时，通过该程序的入口函数来调用系统的各个功能，但是程序启动时，并不会一次性将.class文件加载到内存中，根据程序的需要，通过Java的类加载机制来动态加载.class文件，ClassLoader就是来实现.class文件的动态加载的。 Java中各类加载器的关系Java默认会提供三个类加载器，分别为BootStrapClassLoader,ExtClassLoader和AppClassLoader; BootStrapLoader，启动类加载器，是Java类加载层次中最顶层的类加载器，由c代码编写，负责加载JDK中的核心类库（包括JRE classes目录下的.class文件，libs目录下的jar文件）。可以使用System.getProperty(“sun.boot.class.path”)来显示BootStrapLoader加载的jar和.class文件； ExtClassLoader,扩展类加载器，负责加载Java的扩展类库，默认加载/jre/lib/ext目录下的所有jar和.class文件。可以通过可以使用System.getProperty(“java.ext.dirs”)来显示ExtClassLoader加载的jar和.class文件； AppClassLoader,系统类加载器，负责加载classpath目录下所有的jar和class文件。 Java类加载的实现过程 执行程序代码，找到JRE所在目录； 找到jvm.dll(Windows)或者libjvm.so(Linux); 启动JVM，并进行初始化工作 创建BootStrapClassLoader; BootStrapClassLoader会加载ExtClassLoader，并设定ExtClassLoader的parent为BootStrapClassLoader; BootStrapClassLoader会加载AppClassLoader,并设定AppClassLoader的parent为ExtClassLoader; 当AppClassLoader开始加载xxx.class时，类加载器会现将加载的任务交给其parent来完成，如果parent找不到，则自己负责加载。所以在加载xxx.class时的顺序是，BootstrapClassLoader –&gt; ExtClassLoader –&gt; AppClassLoader，如果都找不到，则抛出ClassNotFoundException。这就是非常有名的双亲委托模型。 使用双亲委托模型，有效地解决了.class字节码重复加载的问题，当parent已经加载类某各类的.class字节码时，子类就没有必要再重新进行加载。举个例子，来说明一下双亲委托模型。 123456789// 取得SomeClass的Class实例 Class c = Class.forName(&quot;SomeClass&quot;); // 取得ClassLoader ClassLoader loader = c.getClassLoader(); System.out.println(loader); // 取得父ClassLoader System.out.println(loader.getParent()); // 再取得父ClassLoader System.out.println(loader.getParent().getParent()); 运行结果： 123sun.misc.Launcher\$AppClassLoader@19821fsun.misc.Launcher\$ExtClassLoader@addbf1null 由于SomeClass是自定义的一个Java类，通常会java.class.path中产生字节码，首先AppClassLoader会将加载的任务交给其parent,ExtClassLaoder,ExtClassLoader将加载任务交给其parent，BootStrapClassLoader,由于BootStrapLoader在其目录(sun.boot.class.path)下没有找到该类的字节码，所以由ExtClassLoader来加载，ExtClassLoader在其目录(java.ext.dirs)也没有发现SomeClass的字节码，交给AppClassLoader进行加载，AppClassLoader在(java.class.path)中找到，并进行加载。 加载SomeClass的ClassLoader是AppClassLoader,其parent是ExtClassLoader,而ExtClassLoader的parent是null，这是因为BootStrapClassLoader是由c代码编写的，在JVM中并没有对应的实例对象，所以显示为null。 Dalvik与JVM在Java中，把一些Java类编译成.class文件，通过ClassLoader进行加载，但是在Android上边，情况有所不同，主要的原因在于Android中使用的虚拟机是Dalvik。Android中的Dalvik和Java中的JVM都是将对应的Java类加载到内存中运行。不同的是JVM加载的是.class字节码文件，或是通过defineClass方式产生class，进行加载。Dalvik加载的是.dex文件，.dex文件是Android对.class文件进行了优化，更加适合内存和处理器有限的系统。 Dalvik是基于寄存器的，而JVM是基于栈的。 Dalvik运行dex文件，而JVM运行java字节码 自Android 2.2开始，Dalvik支持JIT（just-in-time，即时编译技术）。 很长时间以来，Dalvik虚拟机一直被用户指责为拖慢安卓系统运行速度不如IOS的根源。2014年6月25日,Android L 正式亮相于召开的谷歌I/O大会，Android L 改动幅度较大，谷歌将直接删除Dalvik，代替它的是传闻已久的ART。ART,即Android Runtime。ART 的机制与 Dalvik 不同。在Dalvik下，应用每次运行的时候，字节码都需要通过即时编译器（just in time,JIT）转换为机器码，这会拖慢应用的运行效率，而在ART 环境中，应用在第一次安装的时候，字节码就会预先编译成机器码，使其成为真正的本地应用。这个过程叫做预编译（AOT,Ahead-Of-Time)。这样的话，应用的启动(首次)和执行都会变得更加快速。 DexClassLoader与PathClassLoader在使用Java虚拟机时，我们经常自定义继承自ClassLoader的类加载器。然后通过defineClass方法来从一个二进制流中加载Class。而在Android中我们无法这么使用，Android中ClassLoader的defineClass方法具体是调用VMClassLoader的defineClass本地静态方法。而这个本地方法什么都没做，只是抛出了一个“UnsupportedOperationException”异常。 12345protected final Class&lt;?&gt; defineClass(String name, byte[] b, int off, int len) throws ClassFormatError &#123; throw new UnsupportedOperationException("can't load this type of class file"); &#125; 既然在Dalvik虚拟机里，ClassLoader不好用，那么Android官方为了解决这个问题，帮我们从ClassLoader中派生出了两个类：DexClassLoader和PathClassLoader。先来看一下DexClassLoader和PahtClassLoader的继承关系。 DexClassLoaderDexClassLoader可以加载jar,apk,dex,可以从SD卡进行加载，可以实现dex的动态加载与更新，DexClassLoader要有一个app私有且可写的目录来存储经过优化的.odex文件。构造函数如下： 12345678910111213public class DexClassLoader extends BaseDexClassLoader &#123; /** * * @param dexPath .dex文件路径,多个文件路径使用':'分隔 * @param optimizedDirectory .dex文件优化后生成的.odex文件的路径 * @param librarySearchPath 动态库路径 * @param parent 双亲委派模式,指定父类加载器 */ public DexClassLoader(String dexPath, String optimizedDirectory, String librarySearchPath, ClassLoader parent) &#123; super((String)null, (File)null, (String)null, (ClassLoader)null); throw new RuntimeException("Stub!"); &#125; &#125; PathClassLoaderPathClassLoader只能加载已经安装的apk文件。Android系统默认使用的类加载器。构造函数如下： 1234567891011121314151617public class PathClassLoader extends BaseDexClassLoader &#123; public PathClassLoader(String dexPath, ClassLoader parent) &#123; super((String)null, (File)null, (String)null, (ClassLoader)null); throw new RuntimeException("Stub!"); &#125; /** * * @param dexPath .dex文件路径 * @param librarySearchPath 本地库路径 * @param parent 双亲委派模式,指定父类加载器 */ public PathClassLoader(String dexPath, String librarySearchPath, ClassLoader parent) &#123; super((String)null, (File)null, (String)null, (ClassLoader)null); throw new RuntimeException("Stub!"); &#125; &#125; DexClassLoader与PathClassLoader的比较通过两个类加载构造函数的对比发现，区别在于DexClassLoader构造函数中的参数optimizedDirectory。Google官方文档中给出optimizedDirectory的说明是，用来存储经过优化后的.odex文件的路径。optimizedDirectory必须是一个内部存储路径，DexClassLoader可以通过构造函数指定optimizedDirectory，所以DexClassLoader可以实现动态加载，外部的.jar/.dex文件，优化后会存在在optimizedDirectory目录中。PathClassLoader由于没有指定该路径，所以只能加载内部的，已经安装的apk中的.odex文件。 整个类加载过程可以简单描述为上面的时序图。ClassLoader在加载过程中，通过loadClass方法，调用BaseDexClassLoader中重载的findClass方法，该方法会遍历DexPathList列表。DexPathList的创建过程如下： 123456public BaseDexClassLoader(String dexPath, File optimizedDirectory, String libraryPath, ClassLoader parent) &#123; super(parent); this.originalPath = dexPath; this.pathList = new DexPathList(this, dexPath, libraryPath, optimizedDirectory); &#125; optimizedDirectory用来缓存优化过的.odex文件，在DexClassLoader中可以通过构造函数进行制定，在PathClassLoader中，optimizedDirectory为null，会直接使用系统中已经安装的apk文件的.odex目录。DexPathList完整的创建过程。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758public DexPathList(ClassLoader definingContext, String dexPath, String libraryPath, File optimizedDirectory) &#123; …… this.dexElements = makeDexElements(splitDexPath(dexPath), optimizedDirectory); &#125; private static Element[] makeDexElements(ArrayList&lt;File&gt; files, File optimizedDirectory) &#123; ArrayList&lt;Element&gt; elements = new ArrayList&lt;Element&gt;(); for (File file : files) &#123; ZipFile zip = null; DexFile dex = null; String name = file.getName(); if (name.endsWith(DEX_SUFFIX)) &#123; dex = loadDexFile(file, optimizedDirectory); &#125; else if (name.endsWith(APK_SUFFIX) || name.endsWith(JAR_SUFFIX) || name.endsWith(ZIP_SUFFIX)) &#123; zip = new ZipFile(file); &#125; …… if ((zip != null) || (dex != null)) &#123; elements.add(new Element(file, zip, dex)); &#125; &#125; return elements.toArray(new Element[elements.size()]); &#125; private static DexFile loadDexFile(File file, File optimizedDirectory) throws IOException &#123; if (optimizedDirectory == null) &#123; return new DexFile(file); &#125; else &#123; String optimizedPath = optimizedPathFor(file, optimizedDirectory); return DexFile.loadDex(file.getPath(), optimizedPath, 0); &#125; &#125; /** * Converts a dex/jar file path and an output directory to an * output file path for an associated optimized dex file. */ private static String optimizedPathFor(File path, File optimizedDirectory) &#123; String fileName = path.getName(); if (!fileName.endsWith(DEX_SUFFIX)) &#123; int lastDot = fileName.lastIndexOf("."); if (lastDot &lt; 0) &#123; fileName += DEX_SUFFIX; &#125; else &#123; StringBuilder sb = new StringBuilder(lastDot + 4); sb.append(fileName, 0, lastDot); sb.append(DEX_SUFFIX); fileName = sb.toString(); &#125; &#125; File result = new File(optimizedDirectory, fileName); return result.getPath(); &#125; 参考文章1.深入分析Java ClassLoader原理2.分析BootstrapClassLoader/ExtClassLoader/AppClassLoader的加载路径 及”父委托机制”3.簡介類別載入器4.Java虚拟机Dalvik5Android动态加载——DexClassloader分析 本文链接：http://www.sguotao.com/插件框架-2017-03-17-classloader.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】追风筝的人]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2017-01-04-%E8%BF%BD%E9%A3%8E%E7%AD%9D%E7%9A%84%E4%BA%BA.html</url>
      <content type="text"><![CDATA[为你，千千万万遍 阿米尔问哈桑为什么知道被切断绳线的风筝的掉落地点，哈桑肯定会对阿米尔说，我就是知道，然后反问，我什么时候骗过你。阿米尔轻声说，我怎么知道有没有骗过我。哈桑发誓，为了你，我宁可啃烂泥。阿米尔进一步确定，你真的会为我啃烂泥？哈桑坚定的说，我肯定，然后又说，但是你又怎么能忍心让我啃烂泥。 同哈桑洋溢着笑脸对阿米尔说：为你，千千万万遍。 一个是主人，一个是仆人；一个是普什图，一个是哈扎拉；一个是逊尼派，一个是什叶派； 从他们出生的那一刻起，他们的命运就被这些他们所不能理解的标签所分隔开来，尽管他们是亲密无间的朋友，尽管他们事实上拥有同一位父亲。无论是平凡的阿米尔和哈桑，还是高高在上的查希尔国王或者卡尔扎伊，都不得不接受社会为他们预定的座位——阿米尔不再是阿米尔，哈桑也不再是哈桑，他们必须戴上社会分给他们的面具。 哈桑总是说“为你，千千万万遍”，而生性懦弱的阿米尔却选择沉默冷酷的逃避，这样的悲剧性结果并不单单是个性差异所造成的，在这些年少无知的孩子的潜意识里早已被灌输了相应于自身社会地位的“应该”与“不应该”，一个哈扎拉仆人理应为主人尽忠，而高贵的普什图少爷不值得为一个卑贱的哈扎拉仆人冒任何风险。 “阿米尔和哈桑，喀布尔的统治者”，这样的誓言只能是石榴树下的童话，“王子与贫儿”不可能成为兄弟，因为他们命中注定不平等。包括二十年后，阿米尔重返阿富汗的自我救赎行为，也只不过是在获知自己与哈桑的同父异母兄弟关系之后对身世的无奈认可，也就是说，他仍然没有证明自己已经找到了“重新成为好人的路”。 我们少年的时候，总是意气风发，三五结伴，促膝长谈。那是在我们其乐融融的环境中构建的虚拟场景，属于物理学讲究的理想状态，然而在残酷的现实面前，在微弱的友谊遇到挑战的时刻，只要有一方露出破绽，友谊的桥梁必然坍塌。 于是当阿米尔在看到哈桑被大一些的孩子欺负甚至猥亵的时候，他选择沉默和逃避；与此同时，哈桑却为了阿米尔的风筝坚定不动摇的和对手较量，对手残忍的揭示阿米尔和哈桑之间的主仆关系，哈桑大声反驳说两个人是朋友。躲在角落里不敢出现的阿米尔听到这句话不但没有一点激励也没有丝毫感动，他心底里的怯懦终于将他的灵魂吞噬，于是悲剧发生。 这就是我们对友谊最大的误解，认为它是万能的。 即使是存在这样的问题，《追风筝的人》也还是一本出色的小说。主和仆、贵族和贱民、朋友和兄弟，历史和现实，种种转变都被刻画得生动而细腻。放在历史的宏大背景下，更洞见人生和人性的复杂。 友谊和爱。 是在困难之中由弱变强的柔韧派还是在权衡利弊之中土崩瓦解的懦弱派。 谁敢真的站出来举起右手发誓，我从来没有辜负过任何一段纯粹的友谊，谁敢真的抬头挺胸说自己对朋友忠心不二。 我们总是太自信，对友谊误解，对自己的爱误解，对不可能的事信以为真。 本文链接：http://www.sguotao.com/读书笔记-2017-01-04-追风筝的人.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】跟任何人都聊得来]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2016-11-16-%E8%B7%9F%E4%BB%BB%E4%BD%95%E4%BA%BA%E9%83%BD%E8%81%8A%E5%BE%97%E6%9D%A5.html</url>
      <content type="text"><![CDATA[本文链接：http://www.sguotao.com/读书笔记-2016-11-16-跟任何人都聊得来.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】阿弥陀佛么么哒]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2016-11-30-%E9%98%BF%E5%BC%A5%E9%99%80%E4%BD%9B%E4%B9%88%E4%B9%88%E5%93%92.html</url>
      <content type="text"><![CDATA[内容简介《阿弥陀佛么么哒》一书记录了大冰十余年的江湖游历，以及他和他朋友们的爱与温暖的传奇故事。这些故事与风花雪月无关，与鸡汤小清新无关，有的是无畏的奋斗和孤身的寻找，有的是疯狂的爱情和极致的浪漫……12个故事，12种善意，如点点星光与烛火，给所有心怀希望的人们以温暖和光芒。请相信，这个世界上真的有人在过着你想要的生活。忽晴忽雨的江湖，祝你有梦为马，随处可栖。 本文链接：http://www.sguotao.com/读书笔记-2016-11-30-阿弥陀佛么么哒.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】乖,摸摸头]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2016-11-21-%E4%B9%96-%E6%91%B8%E6%91%B8%E5%A4%B4.html</url>
      <content type="text"><![CDATA[内容简介真实的故事自有万钧之力这本书讲述了12个真实的故事或许会让你看到那些你永远无法去体会的生活见识那些可能你永远都无法结交的人【乖，摸摸头】：“杂草敏”是一只南方姑娘，辞去了稳定的幼儿园老师工作，跑到济南某电视台，从剪片子做起。后来又离开了山东，蒲公英一样漂去了北京又漂回了南方，甚至还漂到了澳大利亚……【我有一碗酒，可以慰风尘】：这是一个关于越战老兵的故事。他将所有用命换来的补贴终身无偿捐献给希望工程、自费组建了第一支民间消防队，从不屑解释也不愿争辩的老兵，心里藏着一个关于铭记与奉献的故事。【普通朋友】：每个硬着骨头敢拼敢搏的人都有个柔软的理由。所有人都看到“屌丝男士”大鹏光辉灿烂的现在，而在此之前，他也曾经独自经历过漫长的黑夜。【唱歌人不许掉眼泪】：唱歌的人，到底靠什么而活呢？这个故事里，有金三角的连绵雨水，孟定的香蕉园，新千年的建筑工地……故事里有穷困窘迫、颠沛流离、渺茫的希望、忽晴忽雨的前路，还有一把红棉吉他和一个很想唱歌的孩子。…… ……《乖，摸摸头》是一本让你舍不得读完的短篇故事集。畅销书作者大冰，在《乖，摸摸头》一书中记录了他在拉萨、丽江与大理路上遇到12个人，以及关于他们的爱与温暖的故事。这些人的故事，有的是无畏的奋斗和孤身的寻找，有的是疯狂的爱情和极致的浪漫，有的是你我不曾尝试却跃跃欲试的生活，这些真实的故事，如点点星光，又如支支火把，给所有心怀梦想的年轻人以温暖、以力量、以方向。 本文链接：http://www.sguotao.com/读书笔记-2016-11-21-乖-摸摸头.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】谁动了我的奶酪]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2016-10-31-%E8%B0%81%E5%8A%A8%E4%BA%86%E6%88%91%E7%9A%84%E5%A5%B6%E9%85%AA.html</url>
      <content type="text"><![CDATA[内容简介人生犹如“迷宫”，每个人都在其中寻找各自的“奶酪”——稳定的工作、身心的健康、和谐的人际关系、甜蜜美满的爱情，或是令人充满想象的财富…… 那么，你是否正在享受你的奶酪呢？ 如果是的，恭喜你，你只需要阅读一下书中的小故事即可，因为它会时刻提醒你，你的奶酪是否已经变质； 如果不是，欢迎你，请你把这本书从头到尾阅读一下，希望你能够从中受到启发，尽快享受你的奶酪。 自本书出版以来，已经有众多读者从奶酪的故事中得到启发，从而改善了自己的事业、婚姻和生活，同时也引起了广泛的讨论。 变化总在时时发生，我们每个人都要认真思考，究竟是谁动了我的“奶酪”，我们又该如何发现新的“奶酪”？ 本文链接：http://www.sguotao.com/读书笔记-2016-10-31-谁动了我的奶酪.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】最好的我们]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2016-10-11-%E6%9C%80%E5%A5%BD%E7%9A%84%E6%88%91%E4%BB%AC.html</url>
      <content type="text"><![CDATA[内容简介你总是说青春从不曾永远，而那时候的我们，就是最好的我们。这一次，我们和整个青春做告别。八月长安全新力作。你还记得高中时的同桌吗？那个少年有世界上最明朗的笑容，那个女生有世界上最好看的侧影。高中三年，两个人的影子和粉笔灰交织在一起，黑白分明，在记忆里面转圈。本书以怀旧的笔触讲述了女主角耿耿和男主角余淮同桌三年的故事，耿耿余淮，这么多年一路走过的成长故事极为打动人心，整个故事里有的都是在成长过程中细碎的点点滴滴，将怀旧写到了极致，将记忆也写到了极致。 本文链接：http://www.sguotao.com/读书笔记-2016-10-11-最好的我们.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】你只是看起来很努力]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2016-09-21-%E4%BD%A0%E5%8F%AA%E6%98%AF%E7%9C%8B%E8%B5%B7%E6%9D%A5%E5%BE%88%E5%8A%AA%E5%8A%9B.html</url>
      <content type="text"><![CDATA[内容简介为什么你一直努力，却还是没有满意的成果？为什么你每天都很忙碌，却始终看不到终点？……你是真的努力了，还是，只是看起来很努力？本书是中国优质新偶像李尚龙先生写给千万年轻人的成长和成功之书。本书以夯实别致的内容，独特另类的思考，让你在面对学业的压力，青春的迷茫，爱情的复杂中保持无畏无惧的心态，成为最好的自己。在本书中，作者提到了很多朋友，他们有的因为父母的压力一直待在军校，有的因为和朋友爱上同一个女孩，坚持放弃了自己的爱情。有的人是在孤寂的大山之中的一面之缘，有的是教学课上的数面之交，虽是小角色，却都熠熠发光。因为他们受伤，他们坚强，他们努力，他们有勇气。这本书的文字，没有无聊的励志。这些故事也许你生活中永远不会碰触，亦或许曾经经历，它会告诉你“只是看起来很努力”的生活状态是可怕的；它会告诉你“再好的朋友也经不起你过分直白”；它还会告诉你不要为讨好别人而为难自己，因为“你以为你在合群，其实你在浪费青春”……47篇随笔和故事，或让人忍俊不禁，或让人潸然泪下，或让人茅塞顿开，或让人微笑释然，最终汇集成被《人民日报》盛赞的“改变千万热血青年的思维轨迹”。 本文链接：http://www.sguotao.com/读书笔记-2016-09-21-你只是看起来很努力.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】查令十字街84号]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2016-09-11-%E6%9F%A5%E4%BB%A4%E5%8D%81%E5%AD%97%E8%A1%9784%E5%8F%B7.html</url>
      <content type="text"><![CDATA[内容简介1949年的纽约，曼哈顿一间没有暖气的公寓里，三十三岁的穷作家海莲，偶然看到一则伦敦旧书店的广告，凭着一股莽撞劲，她开始给这个伦敦地址写信。这一写，就写了二十年。很多年后，她和这家书店的通信集，被称为“爱书人的圣经”，不断演绎。而那家书店的地址——查令十字街84号，已经成为全球爱书人之间的一个暗号。三十多年来，人们读它、写它、演它，在这段传奇里彼此问候，相互取暖。 本文链接：http://www.sguotao.com/读书笔记-2016-09-11-查令十字街84号.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】白说]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2016-08-21-%E7%99%BD%E8%AF%B4.html</url>
      <content type="text"><![CDATA[内容简介《白说》是央视资深新闻人白岩松继《幸福了吗》《痛并快乐着》之后的全新作品，一部言语中的心灵之路。通过近年来于各个场合与公众的深入交流，以平等自由的态度，分享其世界观和价值观。时间跨度长达十五年，涵盖时政、教育、改革、音乐、阅读、人生等多个领 域，温暖发声，理性执言。在有权保持沉默的年纪拒绝沉默，为依然热血有梦的人们敲鼓拨弦。尽管“说话不是件好玩的事儿”，依然向往“说出一个更好点儿的未来”，就算“说了白说”，可是“不说，白不说”。 本文链接：http://www.sguotao.com/读书笔记-2016-08-21-白说.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[怎样才能让别人觉得与你合作愉快]]></title>
      <url>%2F%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F-2016-08-17-pleasure-working-with-you.html</url>
      <content type="text"><![CDATA[文章作者：咪喵文章来源： TalentGuide 为什么有的人，明明事情做得不少，却永远没人说他好？有的人，不管做什么都得到周围人众口一词的称赞？ 真的是因为两个人做的事差很多吗？也许是。也许，只是一些小习惯改变了他们的口碑。 1. 收到请回答一些人，交给他的事情永远没下文。你不知道他收到了没有，是不是正在做，已经做到了什么进展，啥时候能交付。即使这件事他已经做完了，不去问，他也永远不会告诉你。 收到任务，请告诉对方“我收到了。” 需要时间消化，请告诉对方“我看一下，晚点（给出具体时间段更佳）给你答复。” 事情有进展时，及时周知相关人等最新进度。 事情完成时，通知相关方，并感谢在其中给过帮助的人。 做到这些，不需要很多时间，却会让与你合作的人感到轻松愉快。 2. 要做就别抱怨有的人，接受任务时永远不情不愿，嘴里没完没了地抱怨，最后虽仍然接下了任务，却留下了难以合作的印象。 如果别人的行为确实给自己带来了麻烦或是有为难之处，可以清晰告知对方自己难做的原因，说清楚希望对方如何改进，并告知这样的改进会给双方带来什么好处。 比如对方总给你扔急活，你为了这个急活不得不加班加点，到处求人。正确的做法是告诉对方这件事有哪些环节，分别需要多长时间，以后请提早多少天告知，以便更好的完成。这次帮忙加急，下不为例。这样对方能理解你这次加急赶完是帮了他忙，而不会抱怨每次给你事情都推三阻四还完成得不好。 3. 推进事情要推到有进展才算数有些人，推进一件事的方法是：每隔一段时间，发封不痛不痒的邮件，抄送所有人，摆个样子跟进一下，也不在乎对方是否给了结果。仿佛在说“你看，我推过了，是对方不给做，推不动不关我事哦。出了问题责任是他是他还是他。” 如果是自家孩子病了，有哪位家长会说“我给医生发邮件了，他没回我，所以病治不了了。”显然，孩子生病时家长都是心急火燎的，医生不在会找护士，找主管，找院长，找媒体。用尽一切可用的渠道，一切可用的方法，直到医生给孩子看病为止。 当说一件事情推不动时，扪心自问自己真的做到了像家长为生病的孩子找医生那样努力吗？真的已经用尽了一切可用的力量，找尽了一切可找的人去推动这件事吗？ 装模作样推一推是没有意义的，一定要推到这件事有实质进展为止。实质进展是对方给排期、给解决方案、给具体处理这件事的人。如果什么都没拿到，那根本不算推进过一件事。 4. 做不到早说有的人，交给他的事情，不问永远没问题，一问全是问题。拖过了截止期做不到，罗列出一堆原因，都是ABCDE的问题，与他无关。 OK，就算ABCDE的问题确实与他无关，为什么不能在发现有这些问题时及时反馈呢？自己解决不了的问题，及时反馈并暴露，让有能力解决的人去解决，是靠谱最重要的表现之一。 又有人说，我要是暴露了这些问题得罪了别人怎么办？请问不暴露这些问题，任由时间资源浪费，事情最终没做到，就谁都不得罪了吗？作为一个团队，成事是最重要的。暴露问题是为了解决问题，而不是为了挑事，关键是把握分寸。 还有人说，跟别人没关系，就是堆给我的活太多了，我做不完怎么办？如果是这种情况，更要尽早反馈了。或许你花了大量时间在一件优先级比较低的事情上，导致最重要的事情没有做完。结果把自己累得半死，还谁都不满意。发现自己做不完，就要第一时间跟相关方确认优先级，力保最重要的事情能够及时完成。如果被插入了其他优先级更高的事，也要尽快知会事情被推迟的相关方。 5. 功劳是大家的有些人，干活的时候一天八回地狂催别人。活干完了，人没影了，汇报工作成果时只字不提其他人，仿佛活全是他自己一人干的。这样的人，执行力再好，下次再找人干活时，也难得到别人心甘情愿的帮忙。 无论别人是帮了多小的忙，在事情结束后也要表示感谢。道谢要不嫌隆重，能当面谢的尽量当面去谢，能单独打电话谢的就不要讲其他事情时顺便谢，发邮件表示感谢的话尽量抄送对方老板详细说明感谢的事由。这些事情并不费劲，却会让别人更愿意帮助你。 6. 别吐槽，给解决方案有的人，你一找他解决问题，就开启吐槽模式，内容全是“我有多辛苦多不容易，能做的我都做了，这些问题全是因为balabala……” 每当这时我都好想告诉对方“亲，没有人关心你的心路历程。”我不关心你有多辛苦多不容易你做了多少事情，为什么别人就是没按照你设定的剧本做。我只知道现在有一个问题，我找你只想知道“怎样解决这个问题”。 当有一个问题时，请直奔主题，给解决方案。 7. 敢作敢当当事情搞砸时，最次的做法是想尽办法推卸责任，最好的做法是诚恳道歉，评估影响范围，想尽办法用最快速度修正错误，弥补损失。 不要耍滑头，得意于自己把责任都推出去了，推卸得越成功，实际越失败。不要怕承担，勇于承担责任的人，别人才敢赋予你更大的责任。 8. 结语做到上面这些条，说难不难，说易也不易。说白了，就是要多操些心，多费些力。 有的人说一份工作而已，干嘛把自己搞这么累。我就做好自己这部分，别人的事我不管，跟我没关系，只要出事了别怪我头上就行。当然，若真这么想，没什么不行的，您高兴就好。只是请不要再抱怨为什么自己怀才不遇，升职加薪总是比别人慢。多劳多得，很公平，不是么？ 本文链接：http://www.sguotao.com/生活感悟-2016-08-17-pleasure-working-with-you.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】一切都是最好的安排]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2016-08-11-%E4%B8%80%E5%88%87%E9%83%BD%E6%98%AF%E6%9C%80%E5%A5%BD%E7%9A%84%E5%AE%89%E6%8E%92.html</url>
      <content type="text"><![CDATA[内容简介在人的一生中所遭遇的困境和不解，在当下或许是如此难以接受。但在过后某一时刻会突然觉得，这是最好的安排。全文始终以“一切都是最好的安排”为主线，传递着正能量。十个“最好”篇章里，52个温暖人心的故事，入世、出世中贯穿着对人生、对情感、对事业的感悟，折射出生活 的简单与复杂，在世间百态中领略禅意的美。时间扑面而来，我们终将释怀。这不是一本“心灵鸡汤”，而是“心灵鱼汤”，营养丰富，同时也要小心刺。《一切都是最好的安排》，这本书，你看不透可惜，看透了又可悲。它给所有钻牛角尖、走进死胡同的人挖一条出路。本书作者辉姑娘，长年从事艺人经纪的工作，与当红明星接触多了，在娱乐圈混迹久了，训练出百毒不侵的强大心理素质，这本书也是她自己每每感到活不下去时的一粒速效救心丸，关键时刻真能救命。只有放弃问为什么，我们才能安于当下，以臣服之心，接受一切。不说悲，不说愁，一生故事独自守。 本文链接：http://www.sguotao.com/读书笔记-2016-08-11-一切都是最好的安排.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】成大事者不纠结]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2016-08-09-%E6%88%90%E5%A4%A7%E4%BA%8B%E8%80%85%E4%B8%8D%E7%BA%A0%E7%BB%93.html</url>
      <content type="text"><![CDATA[本文链接：http://www.sguotao.com/读书笔记-2016-08-09-成大事者不纠结.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】丰乳肥臀]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2016-07-24-%E4%B8%B0%E4%B9%B3%E8%82%A5%E8%87%80.html</url>
      <content type="text"><![CDATA[内容简介小说中通过母亲，含辛茹苦、艰难的抚育着一个又一个儿女，并且视上官金童为生命一般重要，其用意在于说明：人永远是宇宙中最宝贵的，生命具有无可争辩的意义，是第一本位的，“种”的繁衍生殖（即上官金童的重要与受宠）自然就具有无与伦比的重要意义。生命的承传、沿袭是人类赖以永恒存在的源泉。宇宙中的一切事物，因为有了生命的存在才显示了自身的价值和意义。小说也正是在这种意义上揭示了：人不仅是历史的主体，也是美的主体、生命的承传、延续是当最受到礼赞的。没有生命的宇宙和世界，无论美与丑、纯洁与肮脏、卑鄙与高尚，都不再具有意义。所以我们才悟得了《易传》中“天地之大德曰生”的真正含义。小说或作者的深刻性也就在于将这个似简单又普泛深刻的道理蕴含在母亲率领儿女们的顽强的求生保种的生命过程中。那么生命的创造者－－母亲无疑要受到尊敬与赞美。母亲是无私，是爱，是奉献，是生命的载体。对母亲由衷的尊敬与感恩，也表明 了人们对生命的终极崇拜和热爱。由此我们似乎可以看出作者的母性意识或说女性意识在小说中起着主导作用。创造社会历史的可能是男性为主，创造生命历史的，或说人类历史的却是母亲生命源初的女性。这里似乎既体现了作家的心灵深沉着的恋母情结，而上官金童，作为作家思想意识的化身，他对母乳的依恋–恋乳证，在这里也找到了情感的回答，它源出于作家本人的一种情结。小说主体仍然是展示生命的过程，讴歌生命的本体意义及母亲的伟大性。对于历史的再现与表现，以及城市生活的描写是为揭示人性之变曲，并提出问题，但不是小说的主旨。作者用笔仍然着力于刻划与表现讴歌的主题仍然是：生命、母亲、历史只是作为副线贯穿其中，着力突出的是历史的主体－－人。 纵观整篇小说，我们说这是一部具有相当力度与厚度的作品，它蕴含了作家对生命、母亲、历史的深沉思索，对于社会历史与时代问题的独特、新颖的思考与探索。具有很强的思想性与独创性。大概由于小说篇幅太长，小说后部分在艺术手法上，显得有些尚欠锤练，不够圆熟，加之匆促收尾，读来未免使人觉得不如前部分和谐、完好，而有些迷乱，用语生硬，对魔幻现实主义这一手法运用不够圆熟。诚然，这样一部巨著，存在一些个别不足且是艺术手法上的，并不影响它整体的价值。 本文链接：http://www.sguotao.com/读书笔记-2016-07-24-丰乳肥臀.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】不疯魔,不成活]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2016-05-11-%E4%B8%8D%E7%96%AF%E9%AD%94-%E4%B8%8D%E6%88%90%E6%B4%BB.html</url>
      <content type="text"><![CDATA[本文链接：http://www.sguotao.com/读书笔记-2016-05-11-不疯魔-不成活.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】侣行]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2017-05-11-%E4%BE%A3%E8%A1%8C.html</url>
      <content type="text"><![CDATA[本文链接：http://www.sguotao.com/读书笔记-2017-05-11-侣行.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】小王子]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2016-07-17-%E5%B0%8F%E7%8E%8B%E5%AD%90.html</url>
      <content type="text"><![CDATA[本文链接：http://www.sguotao.com/读书笔记-2016-07-17-小王子.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】失乐园]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2017-05-11-%E5%A4%B1%E4%B9%90%E5%9B%AD.html</url>
      <content type="text"><![CDATA[本文链接：http://www.sguotao.com/读书笔记-2017-05-11-失乐园.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】好吗好的]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2017-05-11-%E5%A5%BD%E5%90%97%E5%A5%BD%E7%9A%84.html</url>
      <content type="text"><![CDATA[本文链接：http://www.sguotao.com/读书笔记-2017-05-11-好吗好的.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】摆渡人]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2017-05-11-%E6%91%86%E6%B8%A1%E4%BA%BA.html</url>
      <content type="text"><![CDATA[本文链接：http://www.sguotao.com/读书笔记-2017-05-11-摆渡人.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】巨人的陨落]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2017-05-11-%E5%B7%A8%E4%BA%BA%E7%9A%84%E9%99%A8%E8%90%BD.html</url>
      <content type="text"><![CDATA[本文链接：http://www.sguotao.com/读书笔记-2017-05-11-巨人的陨落.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】我有故事,你有酒吗？]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2017-05-11-%E6%88%91%E6%9C%89%E6%95%85%E4%BA%8B%E4%BD%A0%E6%9C%89%E9%85%92%E5%90%97.html</url>
      <content type="text"><![CDATA[本文链接：http://www.sguotao.com/读书笔记-2017-05-11-我有故事你有酒吗.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】番茄工作法图解:简单易行的时间]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2016-07-10-%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95%E5%9B%BE%E8%A7%A3-%E7%AE%80%E5%8D%95%E6%98%93%E8%A1%8C%E7%9A%84%E6%97%B6%E9%97%B4.html</url>
      <content type="text"><![CDATA[本文链接：http://www.sguotao.com/读书笔记-2016-07-10-番茄工作法图解-简单易行的时间.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】从你的全世界路过]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2016-06-12-%E4%BB%8E%E4%BD%A0%E7%9A%84%E5%85%A8%E4%B8%96%E7%95%8C%E8%B7%AF%E8%BF%87.html</url>
      <content type="text"><![CDATA[本文链接：http://www.sguotao.com/读书笔记-2016-06-12-从你的全世界路过.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】在绝望中寻找希望]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2016-06-05-%E5%9C%A8%E7%BB%9D%E6%9C%9B%E4%B8%AD%E5%AF%BB%E6%89%BE%E5%B8%8C%E6%9C%9B.html</url>
      <content type="text"><![CDATA[本文链接：http://www.sguotao.com/读书笔记-2016-06-05-在绝望中寻找希望.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】三体(全集）]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2016-05-24-%E4%B8%89%E4%BD%93-%E5%85%A8%E9%9B%86.html</url>
      <content type="text"><![CDATA[本文链接：http://www.sguotao.com/读书笔记-2016-05-24-三体-全集.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android动画分析二 Drawable Animation]]></title>
      <url>%2FAndroid%E8%BF%9B%E9%98%B6-2016-05-19-android-drawable-animation.html</url>
      <content type="text"><![CDATA[在上一篇中对Android传统动画中的View动画进行了一些整理，Android动画分析一 View Animation 在这一篇中，将对Android传统动画中的Drawable动画进行整理。什么是Drawable动画，Drawable动画是将一些列的Drawable资源一个接一个的播放，从而产生动画的效果，可以理解为是Frame Animation。 Drawable Animation这里介绍实现Drawable Animation的两种方式，一种是使用&lt;animation-list&gt;标签，一种是使用AnimationDrawable对象。 Drawable动画的示例在res/drawable目录下定义一个动画文件(注:不是res/anim目录)，文件的根节点是&lt;animation-list&gt;其中android:oneshot属性当值为true时,动画只执行一次，当值为false时，动画重复执行。12345678910&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:oneshot=&quot;false&quot;&gt; &lt;item android:drawable=&quot;@drawable/upgrade_notification01&quot; android:duration=&quot;200&quot; /&gt; &lt;item android:drawable=&quot;@drawable/upgrade_notification02&quot; android:duration=&quot;200&quot; /&gt; &lt;item android:drawable=&quot;@drawable/upgrade_notification03&quot; android:duration=&quot;200&quot; /&gt; &lt;item android:drawable=&quot;@drawable/upgrade_notification04&quot; android:duration=&quot;200&quot; /&gt; &lt;item android:drawable=&quot;@drawable/upgrade_notification05&quot; android:duration=&quot;200&quot; /&gt; &lt;item android:drawable=&quot;@drawable/upgrade_notification06&quot; android:duration=&quot;200&quot; /&gt;&lt;/animation-list&gt; 在Activity中处理的逻辑:123456789101112131415161718192021ImageView imageView; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_test_view_animation); imageView = (ImageView) this.findViewById(R.id.imageView); Button mButton = (Button) this.findViewById(R.id.button); mButton.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; AnimationDrawable drawableAnim = (AnimationDrawable) imageView.getBackground(); if (drawableAnim.isRunning()) &#123; drawableAnim.stop(); &#125; else &#123; drawableAnim.start(); &#125; &#125; &#125;); &#125; Drawable动画显示效果实现一个下载提示的动画: 一点引申在实现Drawable动画过程中,做一点引申: 定义的xml动画文件根元素是&lt;animation-list&gt;，存放在res/drawable目录，如果放在其他目录，会出现警告，但不影响正常的编译。 AnimationDrawable的start()方法不能够在Activity的onCreate()调用，因为这个时候，AnimationDrawable可能还没有绑定到Window上，如果想实现进入Activity后直接播放动画，可以在onWindowFocusChanged()方法里面调用，因为这个方法是在window已经获取到焦点之后回调的，可以保证已经绑定结束。 在ImageView设置动画时，需要区分&lt;ImageView&gt;的src属性和background属性，在这个示例中，如果使用src属性，会出现NPE异常。出现异常的原因与src属性的绘制时机有关。background属性是view的属性，Android系统提供的所有控件都有该属性，在View的onDraw之前，就已经被绘制。而src属性是ImageView的特有属性，在ImageView的onDraw()方法中才会被绘制。 参考文献drawable-animation 本文链接：http://www.sguotao.com/Android进阶-2016-05-19-android-drawable-animation.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android动画分析一 View Animation]]></title>
      <url>%2FAndroid%E8%BF%9B%E9%98%B6-2016-05-18-android-view-animation.html</url>
      <content type="text"><![CDATA[在进行Android动画内容整理的时候，发现Android的动画有很多，如官方文档中直接给出的有Property Animation、View Animation、Drawable Animation，还有平时接触比较多的帧动画（Frame Animation）和补间动画（Tweened Animation）等，这些概念需要进行一下梳理。 Android的动画可以分为两类，传统动画和Android3.0之后出现的属性动画(Property Animation)，其中传统动画又包括帧动画(Frame Animation)和补间动画(Tweened Animation)，帧动画的工作原理，类似于动画片，将一个完成的动画拆分为一张张的图片，然后连起来进行播放；补间动画是对View进行的一系列操作，包括淡入淡出(Alpha)，缩放(Scale)，旋转(Rotate)和平移(Translate)。Drawable Animation是将一些列的Drawable资源一个接一个的播放，从而产生动画的效果，可以理解为是Frame Animation。类似的，View Animation可以理解为是Tweened Animation。用一张图来说明一下这几种动画之间的关系。 View AnimationView Animation视图动画，只能作用在View上，完成一些基本的动画，淡入淡出，缩放，旋转和平移，以及这些基本动画的组合。视图动画的实现方式有两种，通常在res/anim目录下定义一个xml文件，xml的根元素可以是&lt;alpha&gt;、&lt;scale&gt;、&lt;rotate&gt;、&lt;translate&gt;及&lt;set&gt;。在&lt;set&gt;中定义了一个动画集，包括四种基本动画，也可以包括一个子&lt;set&gt;。另外一种方式，直接使用这些标签对应的Java类，也可以实现相同的效果。View Animation的类图如下所示。在介绍几种基本动画之前，先介绍一下动画的一些共有属性，四种基本动画除了继承了这些基本属性外，还有一些自身的属性，这些特有属性的介绍，会在每类动画介绍中做详细的说明。这些共有属性包括： XML Attribute Description android:detachWallpaper 设置是否在壁纸上运行，只对设置了壁纸背景的窗口动画(window animation)有效。设为true，则动画只在窗口运行，壁纸背景保持不变 android:duration 动画从开始到结束持续的时长，单位为毫秒 android:fillAfter 设置为true时，动画执行完后，View会停留在动画的最后一帧；默认为false；如果是动画集，需在&lt;set&gt;标签中设置该属性才有效 android:fillBefore 设置为true时，动画执行完后，View回到动画执行前的状态，默认即为true android:fillEnabled 设置为true时，android:fillBefore的值才有效，否则android:fillBefore会被忽略 android:interpolator 设置动画速率的变化，比如加速、减速、匀速等，需要指定Interpolator资源 android:repeatCount 设置动画重复执行的次数，默认为0，即不重复；可设为-1或infinite，表示无限重复 android:repeatMode 设置动画重复执行的模式，可设为以下两个值其中之一：restart 动画重复执行时从起点开始，默认为该值;reverse 动画会反方向执行 android:startOffset 设置动画执行之前的等待时长，毫秒为单位；重复执行时，每次执行前同样也会等待一段时间 android:zAdjustment 表示被设置动画的内容在动画运行时在Z轴上的位置，取值为以下三个值之一：normal 默认值，保持内容在Z轴上的位置不变;top 保持在Z周最上层;bottom 保持在Z轴最下层 &lt;alpha&gt;(淡入淡出)&lt;alpha&gt;可以实现淡入淡出的渐变效果。 alpha动画属性对应AlphaAnimation，alpha动画有两个特有的属性： XML Attribute Description android:fromAlpha 动画开始时的透明度，0.0为全透明，1.0为不透明，默认为1.0 android:toAlpha 动画结束时的透明度，0.0为全透明，1.0为不透明，默认为1.0 alpha动画构造方法12345678910111213/** * 需要在res中定义属性集(不常使用） * @param context 上下文 * @param attrs 属性集 */public AlphaAnimation(Context context, AttributeSet attrs)/** * 在构造法方法中指定动画开始和结束时的透明度(常用方法) * @param fromAlpha 动画开始时的透明度 * @param toAlpha 动画结束时的透明度 */public AlphaAnimation(float fromAlpha, float toAlpha) alpha动画示例123456789101112final ImageView imageView = (ImageView) this.findViewById(R.id.imageView);Button mButton = (Button) this.findViewById(R.id.button);final AlphaAnimation alphaAnimation = new AlphaAnimation(0.0f,1.0f);alphaAnimation.setDuration(3000);mButton.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; imageView.startAnimation(alphaAnimation); &#125;&#125;); &lt;scale&gt;(缩放)&lt;scale&gt;可以实现缩放的效果。 scale动画属性对应ScaleAnimation，scale动画有以下的特有属性： XML Attribute Description fromX 动画开始时X坐标上的缩放尺寸，0.0表示缩放到没有，1.0表示正常无缩放，小于1.0表示收缩，大于1.0表示放大 toX 动画结束时X坐标上的缩放尺寸，0.0表示缩放到没有，1.0表示正常无缩放，小于1.0表示收缩，大于1.0表示放大 fromY 动画开始时Y坐标上的缩放尺寸，0.0表示缩放到没有，1.0表示正常无缩放，小于1.0表示收缩，大于1.0表示放大 toY 动画结束时Y坐标上的缩放尺寸，0.0表示缩放到没有，1.0表示正常无缩放，小于1.0表示收缩，大于1.0表示放大 pivotX 缩放动画相对的固定点X坐标 pivotY 缩放动画相对的固定点Y坐标 pivotXType 缩放动画相对的固定点X坐标位置类型，取值为以下三个值之一：Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT pivotXValue 缩放动画相对的固定点X坐标的位置，与pivotXType相关 pivotYType 缩放动画相对的固定点Y坐标位置类型，取值为以下三个值之一：Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT pivotYValue 缩放动画相对的固定点Y坐标的位置，与pivotYType相关 scale动画构造方法123456789101112131415161718192021222324252627282930313233343536373839404142434445/** * 自定义动画时需要重写的方法 * @param context 上下文 * @param attrs 属性集 */public ScaleAnimation(Context context, AttributeSet attrs)/** * * @param fromX 动画开始时X坐标上的缩放尺寸 * @param toX 动画结束时X坐标上的缩放尺寸 * @param fromY 动画开始时Y坐标上的缩放尺寸 * @param toY 动画结束时Y坐标上的缩放尺寸 */public ScaleAnimation(float fromX, float toX, float fromY, float toY)/** * 指定一个固定点,进行动画,固定点的坐标是(pivotX,pivotY) * 第二个构造方法默认固定点的坐标是(0,0),即动画view的的左上角 * * @param fromX 动画开始时X坐标上的缩放尺寸 * @param toX 动画结束时X坐标上的缩放尺寸 * @param fromY 动画开始时Y坐标上的缩放尺寸 * @param toY 动画结束时Y坐标上的缩放尺寸 * @param pivotX 固定点的X坐标坐标,取值为0时表示动画view的左边沿 * @param pivotY 固定点的Y坐标坐标,取值为0时表示动画view的上边沿 */public ScaleAnimation(float fromX, float toX, float fromY, float toY, float pivotX, float pivotY)/** * 通过pivotXType,pivotXValue,pivotYType和pivotYValue确定一个固定点进行动画 * 第三个构造方法中,固定点默认的位置类型(pivotXType、pivotYType)为 Animation.ABSOLUTE * * @param fromX 动画开始时X坐标上的缩放尺寸 * @param toX 动画结束时X坐标上的缩放尺寸 * @param fromY 动画开始时Y坐标上的缩放尺寸 * @param toY 动画结束时Y坐标上的缩放尺寸 * @param pivotXType 固定点X坐标位置的类型,取值范围(Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT.) * @param pivotXValue 固定点X坐标坐标,位置与pivotXType有关 * @param pivotYType 固定点Y坐标位置的类型,取值范围(Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT.) * @param pivotYValue 固定点Y坐标坐标,位置与pivotYType有关 */public ScaleAnimation(float fromX, float toX, float fromY, float toY, int pivotXType, float pivotXValue, int pivotYType, float pivotYValue) 这里有必要对这几个构造方法进行一些说明： 第二个构造方法public ScaleAnimation(float fromX, float toX, float fromY, float toY)固定点的默认坐标是(0,0)，即要发生动画view的左上角，通过该构造方法创建的缩放动画，都是相对于该固定点进行的。 第三个构造方法public ScaleAnimation(float fromX, float toX, float fromY, float toY,float pivotX, float pivotY)固定点的坐标可以指定为(pivotX,pivotY),即相对于发生动画view的左上角距离(pivotX,pivotY)的位置，通过该构造方法创建的缩放动画,都是相对这个指定的点进行的。 第四个构造方法public ScaleAnimation(float fromX, float toX, float fromY, float toY,int pivotXType, float pivotXValue, int pivotYType, float pivotYValue)对固定点位置的确定有了更多的方式，固定点位置的确定主要与pivotXType, pivotXValue, pivotYType, pivotYValue这四个值有关。通常pivotXType和pivotYType的值都指定为同一种类型。 当pivotXType和pivotYType为Animation. ABSOLUTE时，与第三个构造方法效果相同，即第三个构造方法默认的pivotXType和pivotYType为Animation. ABSOLUTE。 当pivotXType和pivotYType为Animation.RELATIVE_TO_SELF，固定点的位置相对于动画view，固定点的坐标为(width*pivotXValue,height*pivotYValue),其中width为动画view的宽，height为动画view的高。 当pivotXType和pivotYType为Animation.RELATIVE_TO_PARENT，固定点的位置相对于动画view的父容器view，固定点的坐标为(parentWidth*pivotXValue,parentHeight*pivotYValue),其中parentWidth为父容器view的宽，parentHeight为父容器的高。 scale动画示例12345678910//固定点位置相对于imageview,固定点坐标为imageview的中心 final ScaleAnimation scaleAnimation = new ScaleAnimation(0.5f, 1.0f, 0.5f, 1.0f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f); scaleAnimation.setDuration(3000); scaleAnimation.setFillAfter(true);//动画结束时,保持结束的位置不变 mButton.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; imageView.startAnimation(scaleAnimation); &#125; &#125;); &lt;rotate&gt;(旋转)&lt;rotate&gt;可以实现旋转的效果。 rotate动画属性对应RotateAnimation，rotate动画有以下的特有属性： XML Attribute Description fromDegrees 旋转开始的角度，旋转角度从0到360 toDegrees 旋转结束的角度，旋转角度从0到360 pivotX 旋转中心相对的X坐标 pivotY 旋转中心相对的Y坐标 pivotXType 旋转动画中心X坐标位置类型，取值为以下三个值之一：Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT pivotXValue 旋转动画中心X坐标的位置，与pivotXType相关 pivotYType 旋转动画中心Y坐标位置类型，取值为以下三个值之一：Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT pivotYValue 旋转动画中心Y坐标的位置，与pivotYType相关 rotate动画构造方法12345678910111213141516171819202122232425262728293031323334/** * * @param context * @param attrs */public RotateAnimation(Context context, AttributeSet attrs)/** * 旋转中心的位置(0,0) * @param fromDegrees 旋转动画开始角度 * @param toDegrees 旋转动画结束角度 */public RotateAnimation(float fromDegrees, float toDegrees)/** * 旋转中心相对(0,0)的位置(pivotX,pivotY) * @param fromDegrees 旋转动画开始角度 * @param toDegrees 旋转动画结束角度 * @param pivotX 旋转中心x坐标 * @param pivotY 旋转中心y坐标 */public RotateAnimation(float fromDegrees, float toDegrees, float pivotX, float pivotY)/** * 通过pivotXType,pivotXValue,pivotYType和pivotYValue确定旋转中心 * @param fromDegrees 旋转动画开始角度 * @param toDegrees 旋转动画结束角度 * @param pivotXType 旋转动画中心x坐标位置类型,取值范围(Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT.) * @param pivotXValue 旋转动画中心x坐标的位置,与pivotXType相关 * @param pivotYType 旋转中心y坐标位置类型,取值范围(Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT.) * @param pivotYValue 旋转动画中心y坐标的位置,与pivotYType相关 */public RotateAnimation(float fromDegrees, float toDegrees, int pivotXType, float pivotXValue, int pivotYType, float pivotYValue) rotate动画示例123456789101112final ImageView imageView = (ImageView) this.findViewById(R.id.imageView);Button mButton = (Button) this.findViewById(R.id.button);final RotateAnimation rotateAnimation = new RotateAnimation(0, 360, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);rotateAnimation.setDuration(3000);rotateAnimation.setFillAfter(true);//动画结束时,保持结束的位置不变mButton.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; imageView.startAnimation(rotateAnimation); &#125;&#125;); &lt;translate&gt;(平移)&lt;translate&gt;可以实现平移的动画效果。 translate动画属性对应TranslateAnimation，translate动画有以下特有的属性： XML Attribute Description fromXDelta 平移动画开始点X坐标 toXDelta 平移动画结束点X坐标 fromYDelta 平移动画开始点Y坐标 toYDelta 平移动画结束点Y坐标 fromXType 平移动画开始点X坐标位置类型，取值为以下三个值之一：Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT fromXValue 平移动画开始点X坐标位置，与fromXType有关 toXType 平移动画结束点X坐标位置类型，取值为以下三个值之一：Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT toXValue 平移动画结束点X坐标位置，与toXType有关 fromYType 平移动画开始点Y坐标位置类型，取值为以下三个值之一：Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT fromYValue 平移动画开始点坐标位置，与fromYType有关 toYType 平移动画结束点Y坐标位置类型，取值为以下三个值之一：Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT toYValue 平移动画结束点坐标位置，与toYType有关 translate动画构造方法123456789101112131415161718192021222324252627282930/** * * @param context 上下文 * @param attrs 属性集 */public TranslateAnimation(Context context, AttributeSet attrs)/** * 平移动画的起点位置和结束位置坐标都是相对于(0,0)即动画view的左上角. * @param fromXDelta * @param toXDelta * @param fromYDelta * @param toYDelta */public TranslateAnimation(float fromXDelta, float toXDelta, float fromYDelta, float toYDelta)/** * 通过构造参数确定平移动画的起始位置和结束位置的坐标 * * @param fromXType 开始点x坐标位置类型,取值范围(Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT.) * @param fromXValue 开始点x坐标位置,与fromXType有关 * @param toXType 结束点x坐标类型,取值范围(Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT.) * @param toXValue 结束点x坐标位置,与toXType有关 * @param fromYType 开始点y坐标类型,取值范围(Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT.) * @param fromYValue 开始点y坐标位置,与fromYType有关 * @param toYType 结束点y坐标类型,取值范围(Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT.) * @param toYValue 结束点y坐标类型,与toYType有关 */public TranslateAnimation(int fromXType, float fromXValue, int toXType, float toXValue, int fromYType, float fromYValue, int toYType, float toYValue) translate动画示例12345678910final TranslateAnimation translateAnimation = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 1.0f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 1.0f);translateAnimation.setDuration(3000);translateAnimation.setFillAfter(true);//动画结束时,保持结束的位置不变mButton.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; imageView.startAnimation(translateAnimation); &#125;&#125;); &lt;set&gt;动画集&lt;set&gt;是一系列动画的集合，对应AnimationSet,可以实现一些动画的组合。在AnimationSet的构造方法中，1234567891011/** * Constructor to use when building an AnimationSet from code * * @param shareInterpolator Pass true if all of the animations in this set * should use the interpolator associated with this AnimationSet. * Pass false if each animation should use its own interpolator. */ public AnimationSet(boolean shareInterpolator) &#123; setFlag(PROPERTY_SHARE_INTERPOLATOR_MASK, shareInterpolator); init(); &#125; 当使用代码方式创建动画集时，需要使用到这个构造方法，构造方法需要一个boolean值，当为true时，动画集中的动画使用animationSet的插值器，当为false时，使用每个动画自己的插值器。这里有一个问题，什么是插值器？ Interpolator在Android API 11以前，插值器是Interpolator的直接翻译过来的名称，在Android API 11以后，加入了TimeInterpolator接口。什么是插值器？插值器定义了动画的运行轨迹，如加速和减速等。粗略统计了一下，Android API中关于插值器的接口，抽象类和实现类大概有16个，为了清晰的理解这些接口和类的关系，先抛出一张类图。这么多的实现类，每个插值器实现类的作用是什么？区别又是什么？在TimeInterpolator接口中声明了一个方法12345678910111213/** * Maps a value representing the elapsed fraction of an animation to a value that represents * the interpolated fraction. This interpolated value is then multiplied by the change in * value of an animation to derive the animated value at the current elapsed animation time. * * @param input A value between 0 and 1.0 indicating our current point * in the animation where 0 represents the start and 1.0 represents * the end * @return The interpolation value. This value can be more than 1.0 for * interpolators which overshoot their targets, or less than 0 for * interpolators that undershoot their targets. */ float getInterpolation(float input); 该函数将当前动画运行的点input映射到一个插值函数中。不同的插值器实现类，对应这不同的插值函数。比如在插值器AccelerateInterpolator中，对应的插值函数是一个抛物线。抛物线的斜率跟mFactor参数有关，mFactor的值越大，抛物线的曲率越大。对应的动画效果是开始阶段动画比较慢，此后会越来越快。1234567public float getInterpolation(float input) &#123; if (mFactor == 1.0f) &#123; return input * input; &#125; else &#123; return (float)Math.pow(input, mDoubleFactor); &#125; &#125; 对一些插值器的效果进行一个简单的描述，具体的运动效果，与对应的插值函数有关。 参考文献prop-animationview animationdrawable-animationAnimationAlphaAnimationRotateAnimationScaleAnimationTranslateAnimationAnimationSetandroid动画（一）Interpolator 本文链接：http://www.sguotao.com/Android进阶-2016-05-18-android-view-animation.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】格局逆袭]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2016-05-11-%E6%A0%BC%E5%B1%80%E9%80%86%E8%A2%AD.html</url>
      <content type="text"><![CDATA[内容简介努力真的有用吗？当格局不同，你才有逆袭的资本有人靠天分逆袭，有人靠身份逆袭，如果你什么都没有，也许只有靠格局了。走出自身的局限，讲述用格局逆袭的真实案例！教你思考赚钱与人生转折、职场与自我价值的逆袭之道告诉你认清自己与学会选择的方式和策略你在社会中位置的高低，决定了你看待问题角度的高低。看完本书，为三年后的自己努力。慢慢来，比较快。唯有相信，才有可能。人笨没问题，但别懒。到处都是有才华的穷人。见识负责发现机遇，判断负责抓住机遇。人的成就，永远无法超越他的格局。贫穷不是不赚钱，而是丧失了从这个社会获取资源的能力。情商高、智商低总有贵人相助，智商高、情商低总觉得生不逢时。如果你很在意别人的评价，要么是你站的不够高，要么你是在做淘宝。工作是什么？工作是一个发现自己的过程，千万不要以为工作是一个赚钱的过程，赚钱留到30岁以后再去考虑吧。人生三大转折，读书、就业、结婚，你必须要找到一个逆袭的转折点。人生拼的不是起点，是转折点。人脉的真正价值在于，有人想干什么的时候，你能迅速找到专业的人帮他去干，而且还便宜靠谱。……《格局逆袭》是一本写给都市年轻人和热血创业者的奋斗指南。本书不仅可以帮助年轻人清晰地认识自己的特质和特长，规划自己的职场和人生轨迹，还提出了实用且针对性较强的，提升个人觉悟和能力的经验。本书用年轻人的话语体系，一阵见血地道出了当下年轻人关于工作、生活、人际关系的思想误区，提出格局逆袭的观点，帮奋斗路上的年轻人再次定位自己，找到方向，实现普通人的逆袭。 本文链接：http://www.sguotao.com/读书笔记-2016-05-11-格局逆袭.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】白鹿原]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2016-05-11-%E7%99%BD%E9%B9%BF%E5%8E%9F.html</url>
      <content type="text"><![CDATA[内容简介在从清末民初到建国之初的半个世纪里，一阵阵狂风掠过了白鹿原上空，而每一次的变动都震荡着它的内在结构：打乱了再恢复，恢复了再打乱，细腻地反映出白姓和鹿姓两大家族祖孙三代的恩怨纷争。陈忠实先生在这里，人物的命运是纵线，百回千转，社会历史的演进是横面，愈拓愈宽，传统文化的兴衰则是全书的精神主体，以至人、社会历史、文化精神三者之间相互激荡，相互作用，共同推进了作品的时空，在我们眼前铺开了一轴恢宏的、动态的、极富纵深感的关于我们民族灵魂的现实主义的画卷。 本文链接：http://www.sguotao.com/读书笔记-2016-05-11-白鹿原.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[和光同尘，静水流深]]></title>
      <url>%2F%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F-2016-05-09-getdown-to-my-work.html</url>
      <content type="text"><![CDATA[北京时间，2016年5月1日，完成了自己人生中一件非常重要的事情，我结婚了，当自己去看婚礼视频的时候，那因紧张而僵硬的表情，在大方自如的媳妇面前，感觉是那么的不协调，我对自己说，我是多么的幸运，能遇到这样的女孩，同时，我也感到一份支撑，一种依靠。2016，我不再单打独斗了。 总想快速从结婚的喜悦中调整到繁忙的工作中来，2016年，对于公司也是非常重要的一年，能成为其中的一员，见证公司和自己的成长，我想着本身也是一种缘分，希望自己能在2016年剩下的日子里，看到自己持续的成长。 今天看到一篇博客，其中的一些文字，让自己感触很深： 好奇心比雄心走得更远：很多人对未来空有满腔的雄心壮志，往往不如对技术要有一份好奇心，一份探索欲，再加上一份执着的人。 要有open的心态：曾经的我也只是把自己的所思所得都放入自己的云笔记，很少整理，这其实不利于技术发展，有空应该多整理自己零散的知识点，觉得不错的点可以拿出来写成博客，那是对能力的又一层提升。另外，在低头做技术的同时，还应该有空抬头看世界，不能闭门造车。 天道酬勤：学历只能代表过去，能力代表现在，潜力代表未来！ 你不把自己逼一把，你压根不知道自己有多优秀，只要努力去学习，去挖掘潜力，进而提升自我技术修为，未来不再是梦！共勉之！ 解决问题的方式：遇到问题，一定要先尝试自己解决，解决不了再请教他人。这是对自己的一个锻炼，也是对他人的一个尊重，可以有多种途径自行搜索： 百度一下，很多时候还是能有所帮助的，不要过分强调google，完全抛弃百度，毕竟中文看起来比较快； 先中文关键词google一下；再英文关键词google一下； stackoverflow.com、知乎等技术问答网站内直接搜索； 查看官方文档； 如果有源码，尝试直接看源码，看能否解决； 有空可以多逛逛github，多看看Google官方文档，多关注社区，定会收获不少； 当然，最最重要的是能静得下心，持之以恒地专研技术。 以前，自己总是用“和光同尘，静水流深”来勉励自己，现在更加觉着这句话的重要。浮躁是在自己这个年纪，甚至是现在这个社会，比较普遍的现象。希望自己不要眼高手低，脚踏实地的走好现在的路，低调做人，高调做事。 本文链接：http://www.sguotao.com/生活感悟-2016-05-09-getdown-to-my-work.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】激荡三十年(上)]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2016-04-21-%E6%BF%80%E8%8D%A1%E4%B8%89%E5%8D%81%E5%B9%B4-%E4%B8%8A.html</url>
      <content type="text"><![CDATA[本文链接：http://www.sguotao.com/读书笔记-2016-04-21-激荡三十年-上.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】看见]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2016-04-18-%E7%9C%8B%E8%A7%81.html</url>
      <content type="text"><![CDATA[本文链接：http://www.sguotao.com/读书笔记-2016-04-18-看见.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】迷茫时代的明白人]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2016-03-06-%E8%BF%B7%E8%8C%AB%E6%97%B6%E4%BB%A3%E7%9A%84%E6%98%8E%E7%99%BD%E4%BA%BA.html</url>
      <content type="text"><![CDATA[1、 罗振宇，自媒体视频脱口秀《罗辑思维》主讲人，互联网知识型社群试水者，资深媒体人和传播专家。曾任CCTV《经济与法》《对话》制片人等。2012年底打造知识型视频脱口秀《罗辑思维》。半年内，由一款互联网自媒体视频产品，逐渐延伸成长为全新的互联网社群品牌。他对商业和互联网的独到见解，影响了互联网一代的知识结构和对互联网的认识：人类正在从工业化时代进入互联网时代。新的时代将彻底改变人类协作的方式，使组织逐渐瓦解、消融，而个体生命的自由价值得到充分释放，未来将属于基于用户体验的“手艺人”经济。2、本书是罗振宇与《罗辑思维》见解的第一次充分集中表达：一切坚固的东西都将烟消云散，个人崛起的时代已经到来。3、工业时代用庞大的知识体系，让每一个人进入了一个细碎的分工的角落，让那么多人挤挤插插地生活在一个都市群落当中，每一个人都被迫变得扁平化。互联网时代人的兴趣、素质正变得越来越重要，而原先那些地理位置、组织当中的位置变得越来越不重要了。换言之，传统工业社会一切坚固的东西都将烟消云散，个人崛起的时代已经到来。如何以个人身份把握机会？传统经济的玩法都是跑步，尽可能地跑马圈地，占的范围越大越好。可是在个人崛起的时代，我们与其去把握更多的机会， 还不如立定下来，在一个固定点上成长，这才是真正的身法。在传统社会，我们经常讲的是做大做强，总希望跟着组织把事业做大。可是在互联网时代，也许我们立定在自己所擅长的那个领域成长，并拥有合适规模的客户，就可以拥有自由且富足的一生。你找到立定的地方了吗?内容介绍本书精选罗振宇的诸多思考，与你分享成长的洞见：《微革命》：转身、立定、呻吟、躺下，就是互联网时代个人崛起的方法《发现你的太平洋》：不跟存量较劲，而去寻找人生的增量《疯狂的投资》：有好点子马上行动，当实干家而不是评论家《和你赛跑的不是人》：放弃追求地位，转而追求联系；放弃追求效率，转而追求趣味《怎么当个明白人》：真正的牛人，就是在集体中可以按自己的想法思考的人……迷茫时代，怎么当个明白人？ 本文链接：http://www.sguotao.com/读书笔记-2016-03-06-迷茫时代的明白人.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】皮囊]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2016-02-26-%E7%9A%AE%E5%9B%8A.html</url>
      <content type="text"><![CDATA[一部有着小说阅读质感的散文集，也是一本“认心又认人”的书。 作者蔡崇达，本着对故乡亲人的情感，用一种客观、细致、冷静的方式，讲述了一系列刻在骨肉间故事。一个福建渔业小镇上的风土人情和时代变迁，在这些温情而又残酷的故事中一一体现。用《皮囊》这个具有指向本质意味的书名，来 表达作者对父母、家乡的缅怀，对朋友命运的关切，同时也回答那些我们始终要回答的问题。 书中收录有《皮囊》《母亲的房子》《残疾》《重症病房里的圣诞节》《我的神明朋友》《张美丽》《阿小和阿小》《天才文展》《厚朴》《海是藏不住的》《愿每个城市都不被阉割》《我们始终要回答的问题》《回家》《火车伊要开往叨位》等14篇作品。 其中《皮囊》一文中的阿太，一位99岁的老太太，没文化，是个神婆。她却教给作者具有启示力量的生活态度：“肉体是拿来用的，不是拿来伺候的。” 《母亲的房子》里，母亲想要建一座房子，一座四楼的房子，因为“这附近没有人建到四楼，我们建到了，就真的站起来了”。为了房子，她做苦工，捡菜叶，拒绝所有人的同情，哪怕明知这座房子不久后会被拆毁，只是为了“这一辈子，都有家可归”。 而《残疾》里的父亲，他离家、归来，他病了，他挣扎着，全力争取尊严，然后失败，退生为孩童，最后离去。父亲被照亮了。被怀着厌弃、爱、不忍和怜惜和挂念，艰难地照亮。就在这个过程中，作者长大成人。自70后起，在文学书写中，父亲形象就失踪了。而蔡崇达的书里，这个形象重新出现了。 这部特别的“新人新作”，由韩寒监制，上市之初即广受好评。莫言、白岩松、阿来、阎连科等评价为当下写作中的一个惊喜。或许《皮囊》真是新生的＂非虚构＂写作林地里，兀自展现的一片完全与众不同、可读可思、独具样貌的林木。 本文链接：http://www.sguotao.com/读书笔记-2016-02-26-皮囊.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【读书笔记】解忧杂货店]]></title>
      <url>%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2016-02-20-%E8%A7%A3%E5%BF%A7%E6%9D%82%E8%B4%A7%E5%BA%97.html</url>
      <content type="text"><![CDATA[现代人内心流失的东西，这家杂货店能帮你找回——僻静的街道旁有一家杂货店，只要写下烦恼投进卷帘门的投信口，第二天就会在店后的牛奶箱里得到回答。 因男友身患绝症，年轻女孩静子在爱情与梦想间徘徊；克郎为了音乐梦想离家漂泊，却在现实中寸步难行；少年浩介面临家庭巨变，挣扎在亲情与未来的迷茫中…… 他们将困惑写成信投进杂货店，随即奇妙的事情竟不断发生。生命中的一次偶然交会，将如何演绎出截然不同的人生？ 如今回顾写作过程，我发现自己始终在思考一个问题：站在人生的岔路口，人究竟应该怎么做？我希望读者能在掩卷时喃喃自语：我从未读过这样的小说。– 东野圭吾 回答在牛奶箱里深夜的口琴声在思域车上等到天亮听着披头士默祷来自天上的祈祷 如果把来找我咨询的人比喻成迷途的羔羊，通常他们手上都有地图，却没有去看，或是不知道自己目前的位置。但我相信你不属于这两种情况。你的地图是一张白纸，所以即使想决定目的地，也不知道路在哪里。地图是一张白纸，这当然很伤脑筋。任何人都会不知所措。可是换个角度来看，正因为是一张白纸，才可以随心所欲地描绘地图。一切全在你自己。对你来说，一切都是自由的，在你面前是无限的可能。这可是很棒的事啊。我衷心祈祷你可以相信自己，无悔地燃烧自己的人生。我以后应该不会再回答烦恼咨询了。感谢你在最后问了一个很有价值的难题。 –浪矢杂货店 本文链接：http://www.sguotao.com/读书笔记-2016-02-20-解忧杂货店.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【RxJava】一 RxJava是什么]]></title>
      <url>%2FRxJava-2016-01-25.html</url>
      <content type="text"><![CDATA[1.RxJava是什么？GitHub官方给出的解释： RxJava – Reactive Extensions for the JVM – a library for composing asynchronous and event-based programs using observable sequences for the Java VM. 即一个运行在JVM上的库，通过一个可观测的序列，组成的异步的、基于事件的程序。 2.为什么要使用RxJava?在平时的开发中，当遇到如进行访问网络请求，数据库的查询操作，文件读写操作等耗时操作时，都会放在子线程中来进行。让复杂的业务逻辑，回归简单和清晰。 Rx模式以及优点1，使用观察者模式； 创建：Rx可以方便的创建事件流和数据流； 组合：Rx使用查询式的操作符组合和变换数据流； 监听：Rx可以订阅任何可观察数据流并执行操作；2，简化代码 函数式风格:对可观察数据流使用无副作用的输入输出函数，避免了程序里错综复杂的状态； 简化代码:Rx的操作符通常可以将复杂的难题简化成为很少的几行代码； 异步错误处理:传统的try/catch没办法处理异步计算，Rx提供了合适的错误处理机制； 轻松使用并发:Rx的Observerables和Schedulers让开发者可以摆脱底层的线程同步和各种并发问题。 3.怎样使用RxJava?响应式编程 Rx提供了一系列的操作符，你可以使用它们来过滤（filter）、选择（select）、变换（transform)、 结合（combine)和组合（compose)多个Observable，这些操作符让执行和复合变得非常高效。 你可以把Observable当做Iterable的推送方式的等价物，使用Iterable,消费者从生产者哪里获取数据， 线程阻塞直至数据准备好。使用Observable，在数据准备好时，生产者将数据推送给消费者。数据可以同步 或异步的到达，这种方式更灵活。 RxAndroid响应式开发 1，Rx是响应式编程的意思，本质是观察者模式，是以观察者（Observer）和订阅者（Subscriber)为基础的异步响应方式。2，在Android编程时，经常会使用后台线程，那么就可以使用这种方式，目前的异步编程方式都会导致一些问题，如： Asynctasks can easily lead to memory leaks.CursorLoaders with a ContentProvider require a large amount of configuration and boilerplate code to setup.Services are intentded for longer running background tasks and not fast-finishing operations,such as makinga network call or loading content from a database.访问网络接口调用返回数据，尤其在使用接口回调时，处理数据比较麻烦。 创建观察者 在异步模型中创建观察者； 定义一个方法，它完成某些任务，然后从异步调用中返回一个值，这个方法时观察者的一部分。 将这个异步调用本身定义为一个Observable 观察者通过订阅（Subscribe)操作关联到那个Observable； 继续业务逻辑，等方法返回时，Observable会发射结果，观察者的方法会开始处理结果或结果集； RxJava的观察者模式 观察者模式面向的需求是：A对象（观察者）对B对象（被观察者）的某种变化高度敏感， 需要在B变化的一瞬间做出反应。 RxJava有四个基本概念： Observable（可观察者,即被观察者） Observer（观察者） subscribe（订阅） 事件 Observable和Observer通过subscribe()方法实现订阅关系，从而Observerable可以在需要的时候发出事件来通知Observer。 RxJava基本实现 1.创建Observer Observer即观察者，它决定事件触发的时候将有怎样的行为。RxJava中的Observer接口实现方式： 2.创建Observable Observable即被观察者，它决定什么时候触发事件以及触发怎样的事件。RxJava使用create()方法 来创建一个Observable，并为它定义事件触发规则； 3.Subscribe(订阅) 创建了Observable和Observer之后，再用subscribe()方法将它们联结起来，整条链子就可以工作了。 参考内容https://github.com/ReactiveX/RxJava 本文链接：http://www.sguotao.com/RxJava-2016-01-25.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[听了好多道理，却还是做不好工作]]></title>
      <url>%2F%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F-2015-12-30-executive-ability.html</url>
      <content type="text"><![CDATA[文章来源：微信公众号 海尔的企业文化内刊上，刊着一张员工砸冰箱的黑白照片。这件事发生在1985年，海尔公司涣散不堪，只能长期靠借钱维持工厂运营。砸冰箱事件源于一封举报信，用户反映海尔的电冰箱有质量问题。经检查，这类不合格的冰箱还有76台，张瑞敏当即决定把冰箱全部砸掉，并由生产者自己动手。 至此，“具备责任心、做好每一个细节”的理念深深刻在每一个员工心里。海尔的管理精髓之一是：日事日毕，日清日高。强调高效的执行力，把每天的工作做完、做好。在此理念下，海尔从一个濒临倒闭的小厂，蜕变为享誉国内外的大集团。执行力的力量功不可没。 我的老大Ella在创业前，曾在腾讯干过几年，当时工作中他们提得最多的一个词，就是“执行力”。这个习惯让她在以后的创业中受益匪浅。Ella曾问过阿里高管：论人才储备，阿里18罗汉，占据各部高层，为什么他们有那么多人可用？ 对方回答：平凡人做非凡事。企业偏爱执行力强的平凡人，愿意帮助这样的员工成长。执行力对职业发展的重要性可见一斑。再有想法不去执行，也是空谈。那么，执行力具体指的是什么？从概念上讲，它包含三个方面：完成任务的意愿、完成任务的能力、完成任务的程度。我用三个小故事来分别解释这三个方面： 我有个朋友，一直口口声声说暗恋一名女孩儿，却从来没有展开追求。他并不是不知道怎么追女孩，在给别人建议时，他头头是道。“你每天给她买早餐，悄悄放在桌上，坚持三个月，肯定成！”“你为什么不这样做？”“不行不行，现在还不是时候，我再等等吧。”等着等着，然后就没有然后了。女孩跟别人好了。心中思绪涌动，但不愿付诸行动。此乃缺乏执行的意愿。 一群老鼠开会，研究怎样才能躲避猫的袭击。有老鼠提议说：不如在猫脖子上挂一个铃铛，猫一靠近，我们就能听到然后逃跑了。大家纷纷赞同这是个好点子，鼠老大决定就这么办！那么问题来了，谁去挂这个铃铛呢？所有老鼠都低着头，谁也不愿意接这个任务，做就等于死。直到鼠老大去世，这个决定依然没有被实施。究其原因，是老鼠们根本不具备执行它的能力。 闺蜜梅梅一个月前定下减肥计划——每天坚持跑步半小时。一个月来，她一天也没落下，但减肥大业毫无成效，这让我很困惑。在陪她跑了一次之后，我彻底明白其中原因：半小时时间里，有10分钟她在做准备工作，10分钟在停下来喝水休息，剩下10分钟才是真正运动的时间。执行程度低，看似完成了目标，实则收效甚微。 以上三个故事，都是缺乏执行力的表现。在职场中，因为多次没有完成工作任务而被解雇的例子比比皆是，相信你也碰到或耳闻过。而执行力强的那些人，总是晋升最快的一类。你可能要问了：道理我都懂，可为什么执行起来这么困难呢？ Lagou将执行力不足的原因总结为三点： 目标定得太离谱； 想得多却做得少； 拖延后潦草收场； 为了摆脱“听了很多道理，却依然做不好工作”的困扰，Lagou 针对原因对症下药，精心准备了10条既有用、又易操作的小技巧，来助你提高执行力，使职场之路更加顺畅。 1.明确目标很多时候你会发现，决定好了的事情，执行起来却非常困难，这通常是目标设定不清晰导致的。目标超过个人能力、目标过大、周期过长、不能分解、指向不明、不掌握资源等等，都会导致目标难以执行。在设定目标的时候，首先要去判定目标的明确性，这时候，我们可以用到著名的“SMART原则”，来衡量已定目标的明确与否。“SMART原则”是： 目标必须是具体的(Specific); 目标必须是可以衡量的(Measurable); 目标必须是可以达到的(Attainable); 目标必须和其他目标具有相关性(Relevant); 目标必须具有明确的截止期限(Time-based)。 例如：你接到一项任务，做一款H5，旨在通过H5实现用户的转化，促使他们去注册你公司的APP。你把这项任务的目标设定为——尽最大可能做出一款能够刷爆朋友圈的H5，实现用户的高效转化——这会让你在实施这项任务时感到茫然。 运用SMART原则，此项目标的设定应为：在两周的时间内（明确期限），做一款H5，实现1万的用户转化（具体目标、可衡量）。在设定这个量的时候，应当考虑渠道数和粉丝数，并参考以往的推广案例里，它们的转化率是多少。如果推广渠道的粉丝总数才5万，你设定1万的转化量，那几乎是不切实际的。 2.将目标分解成多个小目标目标过大、周期过长的任务，会让人不知从何下手。在处理一项庞杂的事务时，很容易出现本末倒置、战线延长的现象。成功hold住大目标的秘诀在于，将之分解为一个个小目标，安排好时间，逐一攻破。目标分解的经典案例是一个关于马拉松的故事：1984年东京国际马拉松邀请赛中，一个名不见经传的山本田一出人意料地夺得冠军，他的技巧在于把路程分解成几个小目标：银行、大树、红房子。他说：“比赛开始后，我就以百米冲刺的速度奋力向第一个目标冲去，到达第一个目标后，我同样的速度冲向第二个目标— —40多公里的路程就被我分解成这么几个小目标轻松地跑完了。” 3.设定奖励机制为自己完成目标设定一个奖励，会让你更有动力去做这件事。比如在你面临一项棘手的任务时，告诉自己如果完成了，就可以去买一个你心仪已久的东西，这会让你更有动力去朝目标努力。同样，可以将奖励机制细分在每个小目标里。每完成一个部分，给自己一个小小的奖励，既能减轻困难感，又能让你更有动力去完成下一个目标。 4.寻找执行后果的吸引力在执行任务之前，先去考量完成目标能给你带来的好处。这里的好处可能是：得到领导的肯定、同事的赞许、职位晋升的可能、金钱收入、经验值增长……这样，你的行动就有了一个具有吸引力的目的地，吸引你主动向前，提高执行力。 5.寻找同伴行为是具有传染性的。试想，如果你与他人共同完成一项任务，当你看到别人已经行动了，你好意思待着不动么？同伴的参与会督促你尽快执行任务，在“自己不能做得比别人差”的心理作用下，让你的执行效果更加地好。 6.在公共场合公开进度,寻求监督很多时候，面子是促进一个人完成目标的重要因素。把你要做的事写在公开场合，让朋友监督，说出去的话，泼出去的水，在众目睽睽之下，为了不丢脸，硬着头皮熬夜也要把这件事做完。 7.五分钟打扫房间法则告诉自己只花5分钟去打扫一下房间，看起来很快很简单的样子。事实上，一旦你开始打扫，你就很可能不会在5分钟之后真的停止打扫。打扫后的改观让你得到了成就感，并且想要一鼓作气打扫完毕。在这种观念下，想要再拖延一段时间在开始的想法，就被攻破了。 8.设定一个你难以承受的惩罚措施为自己设定一个完不成目标就必须接受的惩罚措施，而且，这个惩罚必须是你很难承受的。比如，在你经济紧张的情况下，告诉朋友，如果自己没有达到目标，就给他一千块钱，并立下字据。如果输了那一千，你很可能接下来的日子会十分拮据，避免不受到惩罚，会迫使你提高执行力。 《为学》里曾说到： “自恃其聪与敏而不学者，自败者也；不自限其昏与庸而力学不卷者，自力者也。” 智力有高低，思想有深浅，但如果不付诸行动去执行，一切都是无用的。在职业成长过程中，执行力才是最好的催促剂。就如老大Ella所说的：“甩开膀子干，赢过一切造作。每一个人，无论今天是什么起点，一切皆有可能。” 新的一年马上要来了，开始行动吧!! 本文链接：http://www.sguotao.com/生活感悟-2015-12-30-executive-ability.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello 2015]]></title>
      <url>%2F%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F-2015-01-21-my-2014.html</url>
      <content type="text"><![CDATA[动机都说开通博客，要写篇文章纪念一下，借此感谢Github，Jekyll,MarkDown,感谢像闫肃,黄玄这样的爱分享的童鞋，2014年对我来说，是很重要的一年，认识了很多人，失去了很多人，总得来说，成长了很多，借此写一篇，纪念我逝去的2014。 工作2014年，换了工作，离开了PBI，离开了原来熟悉的环境，离开了熟悉的同事，告别了朝九晚五熟悉的生活节奏，当然也搬离了住了2年的海淀，一切都像当年，从学校出来，搬到海淀的情景。时光荏苒，场景再现，不变的是自己，变了的是身边的人。 以前都是在Android源码的环境下，编译代码，调试应用，曾经一度以为自己对很多知识已经足够了解了，可是突然到了一个更大的平台，你才发现，突来的状况，还是会让你措手不及，所以，当你以为自己很牛了，那是因为你见识的还不够多，在更大的🐂面前，你还是攻击力只有5的渣儿渣儿。 来到了Letv，一切都要从零开始，昨天的已经成为过去，对于未来，还需要今天的积攒，未来还有很长的路要走。 学习2014年，研究生进入了第二年，习惯了没有休息日的节奏，突然闲下来，还会有些不适应。在读研之前，没有认真的想过，自己为什么要读，可能是因为曾经考研未果的不甘吧。如果说，读研的收获是为了见识的更多，学到的更多，那我最大的收获，就是认识了很多小伙伴，是他们让我改变了很多，让我发现自己很多性格上的缺点，从而去弥补不足。 2014年，顺利的通过了开题报告，接下来就安心的准备毕业答辩了，在准备的过程中，把工作中内容和答辩的内容结合起来，深入的去了解移动流媒体的内容，相信在未来的工作中，会有很大的帮助。 生活2014年，去了江西的三清山，当时还没想到，那竟然是最后一次和同事们一起出去玩，好在当时还没有这种离别的情绪，不然也不会玩的这么尽兴。2015年了，衷心的祝森涛，田田，尚喆，赵哥，晶晶…一切都好。 2014年，去了筹划了已久的西藏，认识了能歌善舞的ZuoZuo，特别会聊天的DiDi，还有原原，感谢徐老师拍的照片和视频，本想写一篇日记记录一下来着，看来只能把这事儿推到2015了，很感慨，为什么人们都说你们变黑了，唯独说我变白了呢？ 总结 那时我们有梦，关于青春，关于爱情，关于穿于世界的旅行。 2014年，错过了一些人，有些是因为客观的原因，更多的是因为自己。杰伦结婚了，我们的青春岁月也结束了；科比，阿伦最后一年征战NBA，以后再想看他们打球，只能去翻看以前的视频了，从来没想过他们离开的日子，他们就老了。以后再做错事儿，再也不能拿自己年轻当借口了，遇到合适的人，不能再错过了。 本文链接：http://www.sguotao.com/生活感悟-2015-01-21-my-2014.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Activity Task栈及启动模式]]></title>
      <url>%2FAndroid%E8%BF%9B%E9%98%B6-2013-11-11-activity-task-affinity.html</url>
      <content type="text"><![CDATA[在Android中，一个activity可以激活另一个activity（可能属于另一个应用程序）。若新的被激活的activity属于另一个应用程序，则那个activity会运行在那个应用程序的进程中，但是从用户的角度来看，好像就是属于本应用程序一样。 Android是通过将之前的activity组件和新被激活的activity组件放入同一个任务栈来实现这个功能的。从用户的角度看，一个任务栈就代表了“一个应用程序”。它实际上是一个栈，里面放着一组被排列好的相关的activity组件。位于栈底的activity（根activity）就是开启这个任务栈的activity组件，一般情况下，就是应用程序的主界面。而位于栈顶的activity组件即代表当前被激活的activity组件（可接收用户行为的activity）。 什么是任务栈任务栈中包含了activity组件的对象，且任务栈中可以包含某一个activity组件类型的多个实例对象。在任务栈中的activity组件不能被重排序，只能被压栈和弹栈。 任务栈不是某个类型，也不是某一个元素，它是一组activity组件的组织形式。所以没有办法在不影响任务栈中的activity组件的情况下，单独设置任务栈的参数。根activity的参数既是整个任务栈的参数，它会影响任务栈中的所有activity组件。 当某个应用程序在前后台切换的时候，实际上就是代表这个应用程序的一个任务栈在前后台切换。刚刚描述的行为是activity和任务栈的默认行为，但也有办法在很多方面对它进行修改： 方法1：在发送的请求（即Intent对象）中设置一些标记。 方法2：在manifest文件中，对接收请求（即Intent对象）的activity组件设置一些属性。 所以在请求者和接收者中都可以进行控制。在Intent对象中主要的标志有：1234FLAG_ACTIVITY_NEW_TASK FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_RESET_TASK_IF_NEEDED FLAG_ACTIVITY_SINGLE_TOP 在标签中，主要的属性有：123456taskAffinity launchMode allowTaskReparenting clearTaskOnLaunch alwaysRetainTaskState finishOnTaskLaunch 接下来的内容就会讲解一些Intent标志和标签属性的作用和用法。 亲缘关系和新的任务默认情况下，一个应用程序中的activity组件彼此之间是亲属关系――也就是说它们属于同一个任务栈。但是我们可以通过设置某个标签的taskAffinity属性来为这个activity组件设置亲属关系。在不同的应用程序中定义的activity组件可以共用同一个亲属关系，或者在同一个的应用程序中定义的activity组件可以使用不同的亲属关系。亲属关系会在两种情况下发挥作用： 1）负责激活activity组件的Intent对象中包含了FLAG_ACTIVITY_NEW_TASK标志。 2）被激活的activity组件的allowTaskReparenting属性被设置为“true”。 关于FLAG_ACTIVITY_NEW_TASK标志量默认情况下，一个被激活的新activity会和负责激活它的那个activity组件存在于同一个任务栈中。但是若负责激活的Intent对象包含了FLAG_ACTIVITY_NEW_TASK标志，则系统会为存放那个即被激活的新activity寻找一个新的任务栈。此时，若已经存在了相同亲属关系的任务栈，则系统会直接将这个即被激活的新activity放入到这个任务栈中；否则系统会开始一个新的任务栈。 关于allowTaskReparenting属性若一个activity组件的allowTaskReparenting被置为“true”，则当与这个activity有相同的亲属关系的任务栈被切换到前台的时候，这个activity会从当前存在的任务栈中移动到与其有相同的亲属关系的任务栈中。若从用户的角度来看，一个.apk文件包含了一个以上的“应用程序”，那你可能要为那些activity组件指定不同的亲属关系。 启动模式标签的launchMode属性可以设置为四种不同的模式：1234“standard”（默认模式） “singleTop” “singleTask” “singleInstance” 这几种模式的区别体现以下四点上： 1)当这个activity被激活的时候，会放入哪个任务栈。对于“standard”和“singleTop”模式，这个新被激活的activity会放入和之前的activity相同的任务栈中――除非如前所述，Intent对象包含FLAG_ACTIVITY_NEW_TASK标志。但“singleTask”和“singleInstance”模式则表示这个新被激活的activity不会放入已经存在的任务栈中，它会重新开启一个任务栈，并作为这个新的任务栈的根activity。 2)是否可以存在这个activity类型的多个实例。对于“standard”和“singleTop”模式，可以有多个实例，并且这些实例可以属于不同的任务栈，每个任务栈也可以包含有这个activity类型的多个实例。但“singleTask”和“singleInstance”模式则表示至多只可以存在这个activity类型的一个实例。又因为有第一点必须是根activity的限制，所以这意味着在同一时间，在手机上绝不会存在多于一个的由这个activity启动的任务栈。 3)包含此activity的任务栈是否可以包含其它的activity。“singleInstance”模式表示包含此activity的任务栈不可以包含其它的activity。若此activity启动了另一个activity组件，那么无论那个activity组件的启动模式是什么或是Intent对象中是否包含了FLAG_ACTIVITY_NEW_TASK标志，它都会被放入另外的任务栈。在其它方面“singleInstance”模式和“singleTask”模式是一样的。其余三种启动模式则允许包含此activity的任务栈包含其它的activity。 4)每一个activity实例处理一个intent对于默认的“standard”模式，每当响应一个Intent对象，都会创建一个这种activity类型的新的实例。即每一个activity实例处理一个intent。对于“singleTop”模式，只有当这个activity的实例当前处于任务栈的栈顶位置，则它会被重复利用来处理新到达的intent对象。否则就和“standard”模式的行为一样。正如第二点所说的，“singleTask”和“singleInstance”模式表示只能有一个实例，所以这个唯一的实例需要处理所有新到达的intent对象。又由于“singleInstance”模式的activity实例总是位于任务栈的栈顶，所以这样做很正常。但对于“singleTask”模式的acitvity，在其上面可能存在其它的activity组件，所以它的位置并不是栈顶，在这种情况下，intent对象会被丢弃。（虽然会被丢弃，但是这个intent对象会使这个任务栈切换到前台） 如果一个新到达的intent对象是被一个已经存在的activity组件来处理的，那么这个activity的onNewIntent(android.content.Intent)方法会被系统调用。注意：若为了处理一个新到达的intent对象而创建了一个activity实例，则用户按下“BACK”键就会退到之前的那个activity。但若这个新到达的intent对象是由一个已经存在的activity组件来处理的，那么用户按下“BACK” 键就不会回退到处理这个新intent对象之前的状态了。 清理任务栈如果一个任务栈在很长的一段时间都被用户保持在后台的，那么系统就会将这个任务栈中除了根activity以外的其它所有activity全部清除掉。从这之后，当用户再将任务栈切换到前台，则只能显示根activity了。以上说的是默认模式，可以通过标签的一些属性来更改： 1）alwaysRetainTaskState属性如果将根activity的alwaysRetainTaskState属性设置为“true”，则即便一个任务栈在很长的一段时间都被用户保持在后台的，系统也不会对这个任务栈进行清理。 2）clearTaskOnLaunch属性如果将根activity的clearTaskOnLaunch属性设置为“true”，那么只有这个任务栈切换到了后台，那么系统就会将这个任务栈中除了根activity以外的其它所有activity全部清除掉。即和alwaysRetainTaskState的行为完全相反。 3) finishOnTaskLaunch属性这个属性的行为类似于clearTaskOnLaunch，但是此属性作用于单个的activity对象，而不是整个任务栈。当这个任务栈切换到了后台，这个属性可以使任务栈清理包括根activity在内的任何activity对象。 这里也有另一种方法来使activity对象从任务栈中被移除。若Intent对象包含FLAG_ACTIVITY_CLEAR_TOP标志，并且在目标任务栈中已经存在了用于处理这个Intent对象的activity类型的一个实例，那么在任务栈中这个实例之上的所有activity实例会被移除。从而用于处理这个Intent对象的activity类型的那个实例会位于任务栈的栈顶，并用来处理那个Intent对象。若那个匹合的activity类型的启动模式是“standard”，则这个已经存在于任务栈中的匹合的activity类型的实例也会被移除，并且一个新的此类型activity的实例被创建并压栈来处理这个Intent对象。 FLAG_ACTIVITY_CLEAR_TOP这个标志经常和FLAG_ACTIVITY_NEW_TASK标志结合使用，这样结合使用的意思是在另一个任务栈中定位已经存在的匹合的activity类型的实例，并且让此实例位于栈顶。 启动任务栈通过将一个activity类型的intent-filter的动作设置为“android.intent.action.MAIN”，类别设置为“android.intent.category.LAUNCHER”可以使这个activity实例称为一个任务栈的入口。拥有这种类型的intent-filter的activity类型的图标和名字也会显示在application launcher中。 第二个能力是很重要的：用户必须能够使一个任务栈切换到后台，也可以随时将其切换到前台。出于这个原因，使activity在启动时新开任务栈的启动模式（即“singleTask”和“singleInstance”模式）只应该被利用在拥有拥有“android.intent.action.MAIN”动作和“android.intent.category.LAUNCHER”类别的intent-filter的activity类型上。 类似的限制同样体现在FLAG_ACTIVITY_NEW_TASK标志上。如果这个标志使一个activity开始了一个新的任务栈，并且用户点击“HOME”键将其切换到了后台，则必须有某种方式使用户可以重新将那个任务栈切换到前台。一些实例（比如通知管理器），总是在外部的任务栈中开启一个activity，而不是其自身的任务栈，所以它们总是将FLAG_ACTIVITY_NEW_TASK标志放入Intent对象中，并将Intent对象传入startActivity()方法中。 对于在某些情况下，你不希望用户能够返回到某一个activity，那么可以通过设置标签的“finishOnTaskLaunch”属性为“true”来实现。 本文链接：http://www.sguotao.com/Android进阶-2013-11-11-activity-task-affinity.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android 设置全屏显示]]></title>
      <url>%2FAndroid%E5%9F%BA%E7%A1%80-2012-08-15-android%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%8F%E6%98%BE%E7%A4%BA.html</url>
      <content type="text"><![CDATA[Android中实现全屏显示的两种方式: 方式一在AndroidManifest.xml文件中通过设置Application或Activity的android:theme属性12345678&lt;activity android:theme=&quot;@android:style/Theme.NoTitleBar.Fullscreen&quot; android:name=&quot;.TestViewAnimation&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt; &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt; &lt;/intent-filter&gt; &lt;/activity&gt; 方式二在Activity的onCreate()方法中进行设置(两行代码还必须写在setContentView()前面。)123456789@Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); /*set it to be no title*/ requestWindowFeature(Window.FEATURE_NO_TITLE); /*set it to be full screen*/ getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN); setContentView(R.layout.activity_test_view_animation); &#125; 方式三(补充)在AppCompatActivity设置全屏，情况有些特殊。发现当Activity继承AppCompatActivity时，以上两种方法会出现Crash和无法编译的情况。这时需要我们创建一个style样式，并在AndroidManifest.xml文件中需要全屏显示的Activity使用该样式。12345&lt;style name=&quot;theme_fullscreen&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt; &lt;item name=&quot;android:windowNoTitle&quot;&gt;true&lt;/item&gt; &lt;item name=&quot;android:windowFullscreen&quot;&gt;true&lt;/item&gt; &lt;item name=&quot;android:windowActionBar&quot;&gt;false&lt;/item&gt;&lt;/style&gt; 本文链接：http://www.sguotao.com/Android基础-2012-08-15-android设置全屏显示.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android基础16 传感器]]></title>
      <url>%2FAndroid%E5%9F%BA%E7%A1%80-2011-08-14-android-basic-16.html</url>
      <content type="text"><![CDATA[1. 传感器传感器类型：方向、加速度(重力)、光线、磁场、距离(临近性)、温度等。 方向传感器 Sensor.TYPE_ORIENTATION 加速度(重力)传感器 | Sensor.TYPE_ACCELEROMETER光线传感器 | Sensor.TYPE_LIGHT磁场传感器 | Sensor.TYPE_MAGNETIC_FIELD距离(临近性)传感器 | Sensor.TYPE_PROXIMITY温度传感器 | Sensor.TYPE_TEMPERATURE 代码实现： 1234//获取某种类型的感应器Sensor sensor = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);//注册监听，获取传感器变化值sensorManager.registerListener(listener, sensor, SensorManager.SENSOR_DELAY_GAME); 上面第三个参数为采样率：最快、游戏、普通、用户界面。当应用程序请求特定的采样率时，其实只是对传感器子系统的一个建议，不保证特定的采样率可用。 最快 SensorManager.SENSOR_DELAY_FASTEST 最低延迟，一般不是特别敏感的处理不推荐使用，该种模式可能造成手机电力大量消耗，由于传递的为原始数据，算法不处理好将会影响游戏逻辑和UI的性能。 游戏 | SensorManager.SENSOR_DELAY_GAME | 游戏延迟，一般绝大多数的实时性较高的游戏都使用该级别。普通 | SensorManager.SENSOR_DELAY_NORMAL | 标准延迟，对于一般的益智类或EASY级别的游戏可以使用，但过低的采样率可能对一些赛车类游戏有跳帧现象。用户界面 | SensorManager.SENSOR_DELAY_UI | 一般对于屏幕方向自动旋转使用，相对节省电能和逻辑处理，一般游戏开发中我们不使用。 下面介绍如何获取加速度(重力)传感器和方向传感器的测量值： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950public class MainActivity extends Activity &#123; private TextView accelerometer; private TextView orientation; private SensorManager sensorManager; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.main); //①获取感应器管理器 sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE); accelerometer = (TextView) findViewById(R.id.accelerometer); orientation = (TextView) findViewById(R.id.orientation); &#125; @Override protected void onResume() &#123; //②获取重力加速度传感器 Sensor sensor = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER); //③注册监听器 sensorManager.registerListener(listener, sensor, SensorManager.SENSOR_DELAY_GAME); Sensor sensor1 = sensorManager.getDefaultSensor(Sensor.TYPE_ORIENTATION);//获取方向传感器 sensorManager.registerListener(listener, sensor1, SensorManager.SENSOR_DELAY_GAME); super.onResume(); &#125; @Override protected void onPause() &#123; //④注消所有传感器监听 sensorManager.unregisterListener(listener); super.onPause(); &#125; private SensorEventListener listener = new SensorEventListener() &#123; @Override public void onSensorChanged(SensorEvent event) &#123;//当传感器的值发生变化 float x = event.values[SensorManager.DATA_X]; float y = event.values[SensorManager.DATA_Y]; float z = event.values[SensorManager.DATA_Z]; switch (event.sensor.getType()) &#123; case Sensor.TYPE_ACCELEROMETER: accelerometer.setText(&quot;Accelerometer Sensor: &quot; + x + &quot;, &quot; + y + &quot;, &quot; + z); break; case Sensor.TYPE_ORIENTATION: orientation.setText(&quot;Orientation Sensor: &quot; + x + &quot;, &quot; + y + &quot;, &quot; + z); break; &#125; &#125; @Override public void onAccuracyChanged(Sensor sensor, int accuracy) &#123;//当传感器的精度变化时 &#125; &#125;;&#125; 方法orientation.setText(x，y，z);参数的含义 x该值表示方位，0代表北（North）；90代表东（East）；180代表南（South）；270代表西（West）如果x值正好是这4个值之一，并且手机是水平放置，手机的顶部对准的方向就是该值代表的方向。 y值表示倾斜度，或手机翘起的程度。当手机绕着X轴倾斜时该值发生变化。y值的取值范围是-180≤y值 ≤180。 z值来测量桌子等物体的倾斜度。z值表示手机沿着Y轴的滚动角度。表示手机沿着Y轴的滚动角度。取值范围是-90≤z值≤90。假设将手机屏幕朝上水平放在桌面上，这时如果桌面是平的，z值应为0。将手机左侧逐渐抬起时，z值逐渐变小，直到手机垂直于桌面放置，这时z值是-90。将手机右侧逐渐抬起时，z值逐渐增大， 直到手机垂直于桌面放置，这时z值是90。在垂直位置时继续向右或向左滚动，z值会继续在-90至90之间变化。 假设将手机屏幕朝上水平放在桌子上，这时如果桌子是完全水平的，y值应该是0（由于很少有桌子是绝对水平的，因此，该值很可能不为0，但一般都是-5和5之间的某个值）。这时从手机顶部开始抬起，直到将手机沿X轴旋转180度（屏幕向下水平放在桌面上）。在这个旋转过程中，y值会在0到-180之间变化，也就是说，从手机顶部抬起时，y的值会逐渐变小，直到等于-180。如果从手机底部开始抬起，直到将手机沿X轴旋转180度，这时y值会在0到180之间变化。也就是y值会逐渐增大，直到等于180。可以利用y值和使用方向传感器（案例：指南针） 2. NinePatch图片NinePatch是一种很有用的PNG图片格式，它可以在特定区域随文字大小进行缩放。如下： 从上图可以看到，背景图片的中间区域会随着文字的大小进行缩放。背景图片是一张NinePatch图片。 NinePatch图片可以使用android自带的draw9patch工具来制作，该工具在SDK安装路径的tools目录下。执行该工具，然后点击“File”-&gt;“open 9-path”打开一张用于制作NinePatch图片的原来图片。在画布的上方和左方的边上画线指定缩放区域，勾选“Show patches”可显示画定的区域，绿色为固定大小区域，红色为缩放区域，文字会摆放在红色区域。制作完后，点击“File” “save 9-path”保存图片，draw9patch工具会自动为图片加上*.9.png后缀。 把制作好的图片拷贝进项目的res/drawable目录，然后编写代码。如下： 1234&lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;退出&quot; android:textColor=&quot;#330000&quot; android:background=&quot;@drawable/button&quot;/&gt; 3. 触摸事件3.1 拖拽XML配置： 123456&lt;ImageView android:id=&quot;@+id/img&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:scaleType=&quot;matrix&quot; android:src=&quot;@drawable/bb2&quot; /&gt; Java代码实现： 1234567891011121314151617181920212223ImageView imageView = (ImageView) findViewById(R.id.img);imageView.setOnTouchListener(new MyListener());private final class MyListener implements OnTouchListener &#123; private float x; private float y; private Matrix startMatrix = new Matrix(); private Matrix matrix = new Matrix(); public boolean onTouch(View v, MotionEvent event) &#123; switch (event.getAction()) &#123; case MotionEvent.ACTION_DOWN: x = event.getX(); y = event.getY(); startMatrix.set(imageView.getImageMatrix()); break; case MotionEvent.ACTION_MOVE: matrix.set(startMatrix); matrix.postTranslate(event.getX() - x, event.getY() - y); break; &#125; imageView.setImageMatrix(matrix); return true; &#125;&#125; 3.2 多点触控1234567891011121314151617181920212223242526272829303132333435363738394041424344454647private final class MyListener implements OnTouchListener &#123; private float x; private float y; private Matrix matrix = new Matrix(); private Matrix startMatrix = new Matrix(); private int type; private float startDis; private PointF point; public boolean onTouch(View v, MotionEvent event) &#123; System.out.println(event.getAction()); switch (event.getAction()) &#123; case MotionEvent.ACTION_DOWN: type = 1; x = event.getX(); y = event.getY(); startMatrix.set(imageView.getImageMatrix()); break; case MotionEvent.ACTION_MOVE: matrix.set(startMatrix); if (type == 1) matrix.postTranslate(event.getX() - x, event.getY() - y); else &#123; float scale = getDis(event) / startDis; matrix.postScale(scale, scale, point.x, point.y); &#125; break; case MotionEvent.ACTION_POINTER_DOWN: type = 2; startMatrix.set(imageView.getImageMatrix()); startDis = getDis(event); point = getPoint(event); break; &#125; imageView.setImageMatrix(matrix); return true; &#125; &#125; private float getDis(MotionEvent event) &#123; float a = event.getX(1) - event.getX(0); float b = event.getY(1) - event.getY(0); return (float) Math.sqrt(a * a + b * b); &#125; private PointF getPoint(MotionEvent event) &#123; float x = (event.getX(0) + event.getX(1)) / 2; float y = (event.getY(0) + event.getY(1)) / 2; return new PointF(x, y);&#125; 4. 读取SIM卡文档位置：android-sdk-windows\platforms\android-8\sources\ContactsProvider\src\com\android\providers\contacts\ CallLogProvider.java 4.1 判断SIM卡属于那个运营商SIM卡的IMSI码是SIM卡唯一标识：IMSI 国际移动用户识别码（IMSI：International Mobile Subscriber Identification Number）是区别移动用户的标志，储存在SIM卡中，可用于区别移动用户的有效信息。IMSI由MCC、MNC、MSIN组成，其中MCC为移动国家号码，由3位数字组成，唯一地识别移动客户所属的国家，我国为460；MNC为网络id，由2位数字组成，用于识别移动客户所归属的移动网络，中国移动为00，中国联通为01,中国电信为03；MSIN为移动客户识别码，采用等长11位数字构成。唯一地识别国内GSM.移动通信网中移动客户。所以要区分是移动还是联通，只需取得SIM卡中的MNC字段即可。需要权限 12&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt; Java代码实现：第一种方法:获取手机的IMSI码,并判断是中国移动\中国联通\中国电信 123456789TelephonyManager telManager = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE); String imsi = telManager.getSubscriberId(); if(imsi!=null)&#123;//因为移动网络编号46000下的IMSI已经用完,所以虚拟了一个46002编号，134/159号段使用了此编号 if(imsi.startsWith(&quot;46000&quot;) || imsi.startsWith(&quot;46002&quot;))&#123; //中国移动 &#125;else if(imsi.startsWith(&quot;46001&quot;))&#123; //中国联通 &#125;else if(imsi.startsWith(&quot;46003&quot;))&#123; //中国电信 &#125;&#125; 第二种方法 12345678TelephonyManager telManager = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE); String operator = telManager.getSimOperator(); if(operator!=null)&#123; if(operator.equals(&quot;46000&quot;) || operator.equals(&quot;46002&quot;))&#123; //中国移动 &#125;else if(operator.equals(&quot;46001&quot;))&#123;//中国联通 &#125;else if(operator.equals(&quot;46003&quot;))&#123;//中国电信 &#125;&#125; 4.2 从SIM卡中获取联系人信息Android系统内部通过Contentprovider对外共享Sim卡存放的联系人等信息，你可以通过操作Contentprovider来实现Sim卡信息的添删改查操作。 需要权限： 1&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot;/&gt; Java代码实现： 12345Uri uri = Uri.parse(&quot;content://icc/adn&quot;); Cursor c = getContentResolver().query(uri, null, null, null, null); while (c.moveToNext()) System.out.println(c.getString(c.getColumnIndex(&quot;name&quot;)) + &quot;: &quot; + c.getString(c.getColumnIndex(&quot;number&quot;))); 4.3 删除呼叫记录需要权限 12&lt;uses-permission android:name=&quot;android.permission.READ_CONTACTS&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.WRITE_CONTACTS&quot; /&gt; 负责存放呼叫记录的内容提供者源码在ContactsProvider项目下： 源码路径：com\android\providers\contacts\CallLogProvider.java 使用到的数据库在：/data/data/com.android.providers.contacts/databases/contacts2.db 表名:calls 呼叫记录有三种类型 来电：CallLog.Calls.INCOMING_TYPE （常量值：1） 外拔：CallLog.Calls.OUTGOING_TYPE（常量值：2） 未接：CallLog.Calls.MISSED_TYPE（常量值：3） 删除指定号码的来电或未接呼叫记录：Java代码实现： 123456789101112131415161718192021222324IncomingCallLogContentObserver observer = new IncomingCallLogContentObserver(new Handler());observer.setNumber(&quot;5554&quot;);getContentResolver().registerContentObserver(CallLog.Calls.CONTENT_URI, true, observer);private class IncomingCallLogContentObserver extends ContentObserver &#123; private String number; public IncomingCallLogContentObserver(Handler handler)&#123; super(handler); &#125; public void setNumber(String number)&#123; this.number = number; &#125; public void onChange(boolean paramBoolean)&#123; ContentResolver contentResolver = getContentResolver(); if(number!=null)&#123; Uri localUri = CallLog.Calls.CONTENT_URI; Cursor cursor = contentResolver.query(localUri, new String[]&#123;&quot;_id&quot;&#125;, &quot;number=? AND (type=1 OR type=3)&quot;, new String[]&#123;number&#125;, &quot;_id desc limit 1&quot;); if(cursor.moveToFirst())&#123; contentResolver.delete(localUri, &quot;_id=?&quot;, new String[]&#123;cursor.getString(0)&#125;); &#125; cursor.close(); &#125; contentResolver.unregisterContentObserver(this); &#125;｝ 本文链接：http://www.sguotao.com/Android基础-2011-08-14-android-basic-16.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android基础15 动画特效]]></title>
      <url>%2FAndroid%E5%9F%BA%E7%A1%80-2011-08-13-android-basic-15.html</url>
      <content type="text"><![CDATA[1. Tween动画将某个组件以渐变的方式实现透明、缩放、移动、旋转等动画效果。 详见文档android-sdk-windows/docs/guide/topics/resources/animation-resource.html 2. Frame动画通过多个画面连续播放实现动画效果，开发步骤： 把准备好的图片放进项目res/ drawable下。 在项目的res目录下创建文件夹anim，然后在anim文件夹下面定义动画XML文件，文件名称 可以自定义。当然也可以采用编码方式定义动画效果（使用AnimationDrawable类）。 1234567&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;android:oneshot=&quot;false&quot;&gt;&lt;item android:drawable=&quot;@drawable/girl_1&quot; android:duration=&quot;200&quot; /&gt;&lt;item android:drawable=&quot;@drawable/girl_2&quot; android:duration=&quot;200&quot; /&gt;&lt;item android:drawable=&quot;@drawable/girl_3&quot; android:duration=&quot;200&quot; /&gt;&lt;/animation-list&gt; 为View控件绑定动画效果。调用代表动画的AnimationDrawable的start()方法开始动画。详见文档 android-sdk-windows/docs/guide/topics/resources/animation-resource.html 3. 使用动画切换Activity在startActivity()方法调用之后调用overridePendingTransition(int enterAnim, int exitAnim)方法enterAnim 进入的动画资源idexitAnim 退出的动画 资源id 4. 使用动画翻页XML配置 12345678910111213&lt;ViewFlipper android:id=&quot;@+id/viewFlipper&quot; android:layout_width=&quot;fill_parent&quot; android:layout_height=&quot;fill_parent&quot;&gt; &lt;ImageView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:src=&quot;@drawable/bb2&quot;/&gt; &lt;ImageView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:src=&quot;@drawable/bb3&quot;/&gt;&lt;/ViewFlipper&gt; Java代码 123456789101112131415161718192021public boolean onTouchEvent(MotionEvent event) &#123; ViewFlipper viewFlipper = (ViewFlipper) findViewById(R.id.viewFlipper); switch (event.getAction()) &#123; case MotionEvent.ACTION_DOWN: start = event.getX(); break; case MotionEvent.ACTION_UP: float end = event.getX(); if (end &gt; start) &#123; viewFlipper.setInAnimation(this, R.anim.previous_enter); viewFlipper.setOutAnimation(this, R.anim.previous_exit); viewFlipper.showPrevious(); &#125; else if (end &lt; start) &#123; viewFlipper.setInAnimation(this, R.anim.next_enter); viewFlipper.setOutAnimation(this, R.anim.next_exit); viewFlipper.showNext(); &#125; break; &#125; return super.onTouchEvent(event);&#125; 5. 动画练习5.1 本例要实现对ImageView对象进行渐变尺寸缩放动画效果 在项目的res目录下创建文件夹anim，然后在anim文件夹下面定义动画XML文件,文件名称可以自定义，如：scale.xml，内容如下： 123456789101112&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;scale android:interpolator=&quot;@android:anim/accelerate_decelerate_interpolator&quot; android:fromXScale=&quot;0.0&quot; android:fromYScale=&quot;0.0&quot; android:toXScale=&quot;5&quot; android:toYScale=&quot;5&quot; android:pivotX=&quot;50%&quot; android:pivotY=&quot;50%&quot; android:fillAfter=&quot;false&quot; android:duration=&quot;5000&quot; /&gt; &lt;/set&gt; 动画的进度使用interpolator控制，android提供了几个Interpolator 子类，实现了不同的速度曲线，如LinearInterpolator实现了匀速效果、Accelerateinterpolator实现了加速效果、DecelerateInterpolator实现了减速效果等。还可以定义自己的Interpolator子类，实现抛物线、自由落体等物理效果。 fromXScale（浮点型） 属性为动画起始时X坐标上的缩放尺寸fromYScale（浮点型） 属性为动画起始时Y坐标上的缩放尺寸toXScale（浮点型） 属性为动画结束时X坐标上的缩放尺寸toYScale（浮点型） 属性为动画结束时Y坐标上的缩放尺寸 说明: 以上四种属性值0.0表示收缩到没有1.0表示正常无缩放值小于1.0表示收缩值大于1.0表示放大pivotX（浮点型） 属性为动画相对于物件的X坐标的开始位置pivotY（浮点型） 属性为动画相对于物件的Y坐标的开始位置 说明:以上两个属性值 从0%-100%中取值50%为物件的X或Y方向坐标上的中点位置duration（长整型）属性为动画持续时间 。说明: 时间以毫秒为单位fillAfter（布尔型）属性当设置为true，该动画转化在动画结束后被应用 在layout文件添加&lt;ImageView&gt;节点： 1234567891011&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:orientation=&quot;horizontal&quot; android:layout_width=&quot;fill_parent&quot; android:layout_height=&quot;fill_parent&quot;&gt;&lt;ImageView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:src=&quot;@drawable/icon&quot; android:id=&quot;@+id/imageView&quot; /&gt;&lt;/LinearLayout&gt; 说明：除了可以对&lt;ImageView&gt;实现动画效果，其实也可以对其他View实现动画效果，如：&lt;TextView&gt; 在Activity里对ImageView使用前面定义好的动画效果： 123456789101112public class AnimationActivity extends Activity &#123; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.main); ImageView imageView = (ImageView)this.findViewById(R.id.imageView); //加载动画XML文件,生成动画指令 Animation animation = AnimationUtils.loadAnimation(this, R.anim.scale); //开始执行动画 imageView.startAnimation(animation); &#125;&#125; 备注：上面采用的是xml文件定义动画效果，作为代替，也可以采用编码方式实现。下面采用编码方式实现上述例子同样的效果： 123456789101112public class AnimationActivity extends Activity &#123; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.main); ImageView imageView = (ImageView)this.findViewById(R.id.imageView); ScaleAnimation animation = new ScaleAnimation(0.0f, 5f, 0.0f, 5f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f); animation.setDuration(5000); //设置持续时间5秒 imageView.startAnimation(animation); &#125;&#125; 5.2 其他动画效果定义例子 渐变透明度动画效果 1234567&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;alpha android:fromAlpha=&quot;0.1&quot; android:toAlpha=&quot;1.0&quot; android:duration=&quot;3000&quot;/&gt;&lt;/set&gt; 编码实现透明度动画效果： 1234567891011public class AnimationActivity extends Activity &#123; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.main); ImageView imageView = (ImageView)this.findViewById(R.id.imageView); AlphaAnimation animation = new AlphaAnimation(0.1, 1.0); animation.setDuration(5000); //设置持续时间5秒 imageView.startAnimation(animation); &#125;&#125; 画面位置移动动画效果 123456789101112&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&lt;translateandroid:repeatCount=&quot;2&quot;android:fromXDelta=&quot;0&quot;android:fromYDelta=&quot;0&quot;android:toXDelta=&quot;120&quot;android:toYDelta=&quot;120&quot;android:duration=&quot;3000&quot;/&gt;&lt;!-- fromXDelta fromYDelta 为动画起始时 X和Y坐标上的位置toXDelta toYDelta为动画结束起始时 X和Y坐标上的位置 --&gt;&lt;/set&gt; 编码实现位置移动动画效果： 1234567891011public class AnimationActivity extends Activity &#123; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.main); ImageView imageView = (ImageView)this.findViewById(R.id.imageView); TranslateAnimation animation = new TranslateAnimation(0, 120, 0, 120); animation.setDuration(5000); //设置持续时间5秒 imageView.startAnimation(animation); &#125;&#125; 画面旋转动画效果 1234567891011121314151617181920212223&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&lt;rotateandroid:interpolator=&quot;@android:anim/accelerate_interpolator&quot;android:repeatCount=&quot;2&quot;android:fromDegrees=&quot;0&quot;android:toDegrees=&quot;+360&quot;android:pivotX=&quot;50%&quot;android:pivotY=&quot;50%&quot;android:duration=&quot;3000&quot;/&gt;&lt;!-- repeatCount 重复次数fromDegrees为动画起始时物件的角度:当角度为负数——表示逆时针旋转当角度为正数——表示顺时针旋转(负数fromDegrees——toDegrees正数:顺时针旋转)(负数fromDegrees——toDegrees负数:逆时针旋转)(正数fromDegrees——toDegrees正数:顺时针旋转)(正数fromDegrees——toDegrees负数:逆时针旋转)toDegrees属性为动画结束时物件旋转的角度 可以大于360度pivotX,pivotY 为动画相对于物件的X、Y坐标的开始位置。说明：以上两个属性值 从0%-100%中取值,50%为物件的X或Y方向坐标上的中点位置 --&gt;&lt;/set&gt; 编码实现： 123RotateAnimation animation = new RotateAnimation(0, -90, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);animation.setDuration(500);imageView.startAnimation(animation); Frame动画例子a) 把准备好的图片放进项目res/ drawable下。图片有：girl_1.gif, girl_2.gif, girl_3.gifb) 在项目的res目录下创建文件夹anim，然后在anim文件夹下面定义动画XML文件，文件名称可以自定义,如：frame.xml。 1234567&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:oneshot=&quot;false&quot;&gt; &lt;item android:drawable=&quot;@drawable/girl_1&quot; android:duration=&quot;200&quot; /&gt; &lt;item android:drawable=&quot;@drawable/girl_2&quot; android:duration=&quot;200&quot; /&gt; &lt;item android:drawable=&quot;@drawable/girl_3&quot; android:duration=&quot;200&quot; /&gt;&lt;/animation-list&gt; 上面的XML就定义了一个Frame动画，其包含3帧动画，3帧动画中分别应用了drawable中的3张图片：girl_1.gif, girl_2.gif, girl_3.gif，每帧动画持续200毫秒。android:oneshot属性如果为true，表示动画只播放一次停止在最后一帧上，如果设置为false表示动画循环播放。 c) 为View控件绑定动画效果，调用代表动画的AnimationDrawable的start()方法开始动画。 12345678910111213141516171819public class FrameActivity extends Activity &#123; private AnimationDrawable animationDrawable; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.main); ImageView imageView = (ImageView)this.findViewById(R.id.imageView); imageView.setBackgroundResource(R.anim.frame); animationDrawable = (AnimationDrawable) imageView.getBackground(); &#125; @Override public boolean onTouchEvent(MotionEvent event) &#123; if (event.getAction() == MotionEvent.ACTION_DOWN) &#123;//按下 animationDrawable.start(); return true; &#125; return super.onTouchEvent(event); &#125;&#125; 有一点需要强调的是：启动Frame动画的代码animationDrawable.start();不能应用在OnCreate()方法中，因为在OnCreate()中 AnimationDrawable还没有完全的与ImageView绑定。在OnCreate()中启动动画，只能看到第一张图片。这里在触摸事件中实现的。 本文链接：http://www.sguotao.com/Android基础-2011-08-13-android-basic-15.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android基础14 样式与主题]]></title>
      <url>%2FAndroid%E5%9F%BA%E7%A1%80-2011-08-12-android-basic-14.html</url>
      <content type="text"><![CDATA[1. 样式(style)android中的样式和CSS样式作用相似，都是用于为界面元素定义显示风格，它是一个包含一个或者多个view控件属性的集合。如：需要定义字体的颜色和大小。在CSS中是这样定义的： 123&lt;style&gt; .ncist&#123;COLOR:#0000CC;font-size:18px;&#125;&lt;/style&gt; 可以像这样使用上面的css样式：华北科技，在Android中可以这样定义样式：在res/values/styles.xml文件中添加以下内容 1234567&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;resources&gt; &lt;style name=“ncist”&gt; &lt;!-- 为样式定义一个全局唯一的名字--&gt; &lt;item name=“android:textSize”&gt;18px&lt;/item&gt; &lt;!-- name属性的值为使用了该样式的View控件的属性 --&gt; &lt;item name=&quot;android:textColor&quot;&gt;#0000CC&lt;/item&gt; &lt;/style&gt;&lt;/resources&gt; 在layout文件中可以像下面这样使用上面的android样式： 12345&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; ....&gt; &lt;TextView style=&quot;@style/ncist&quot; ..... /&gt;&lt;/LinearLayout&gt; &lt;style&gt;元素中有一个parent属性。这个属性可以让当前样式继承一个父样式，并且具有父样式的值。当然，如果父样式的值不符合你的需求，你也可以对它进行修改，如下： 12345678910&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;resources&gt; &lt;style name=&quot;ncist&quot;&gt; &lt;item name=&quot;android:textSize&quot;&gt;18px&lt;/item&gt; &lt;!-- name属性为样式要用在的View控件持有的属性 --&gt; &lt;item name=&quot;android:textColor&quot;&gt;#0000CC&lt;/item&gt; &lt;/style&gt; &lt;style name=&quot;subncist&quot; parent=&quot;@style/ncist&quot;&gt; &lt;item name=&quot;android:textColor&quot;&gt;#FF0000&lt;/item&gt; &lt;/style&gt;&lt;/resources&gt; 继承样式有两种定义方式 继承样式，在&lt;style&gt;标签中配置属性parent 123&lt;style name=&quot;style2&quot; parent=&quot;@style/style1&quot;&gt; &lt;item name=&quot;android:textColor&quot;&gt;#FF0000&lt;/item&gt;&lt;/style&gt; 继承样式，在name中引用其他样式 123&lt;style name=&quot;style2.style3&quot;&gt; &lt;item name=&quot;android:textSize&quot;&gt;30sp&lt;/item&gt;&lt;/style&gt; 使用样式在layout文件的标签中配置style属性 12&lt;Button style=&quot;@style/style2.style3&quot; android:text=&quot;这是一个按钮&quot;/&gt; 2. 主题(theme)android中主题也是用于为应用定义显示风格，它的定义和样式的定义相同，如下： 1234567&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;resources&gt;&lt;style name=“ncistTheme&quot;&gt; &lt;item name=“android:windowNoTitle”&gt;true&lt;/item&gt; &lt;!– 没标题 &lt;item name=“android:windowFullscreen”&gt;?android:windowNoTitle&lt;/item&gt; &lt;!– 全屏显示 &lt;/style&gt;&lt;/resources&gt; 上面“?android:windowNoTitle”中的问号用于引用在当前主题中定义过的资源的值。下面代码显示在AndroidManifest.xml中如何为应用设置上面定义的主题： 1234&lt;application android:icon=&quot;@drawable/icon&quot; android:label=&quot;@string/app_name&quot; android:theme=&quot;@style/ncistTheme&quot;&gt; ......&lt;/application&gt; 除了可以在AndroidManifest.xml中设置主题，同样也可以在代码中设置主题，如下：setTheme(R.style.ncistTheme); 3. 样式与主题的区别尽管在定义上，样式和主题基本相同，但是它们使用的地方不同。 样式用在单独的View，如：EditText、TextView等； 主题通过AndroidManifest.xml中的&lt;application&gt;和&lt;activity&gt;用在整个应用或者某个 Activity，主题对整个应用或某个Activity进行全局性影响。 如果一个应用使用了主题，同时应用下的view也使用了样式，那么当主题和样式属性发生冲突时，样式的优先级高于主题。 另外android系统也定义了一些主题，例如：&lt;activity android:theme=“@android:style/Theme.Dialog”&gt;，该主题可以让Activity看起来像一个对话框，还有透明主题：@android:style/Theme.Translucent 。如果需要查阅这些主题，可以在文档的referenceandroid–&gt;R.style 中查看。 注意：如果使用android内置的样式，IDE自动提示的“_”要替换成“.” 4. 国际化与屏幕适配4.1 国际化在values和drawable文件夹后加上语言以及地区名，程序中需要国际化的部分使用资源IDvalues-en-rUS ；values-zh-rCN；values-zh-rTW 匹配规则 在匹配资源时先会找语言、地区完全匹配的 如果没有地区匹配的，则查找语言匹配的如果没有语言匹配的则找默认values 4.2 屏幕适配在layout文件夹后加上分辨率，系统会根据屏幕尺寸自动选择，注意分辨率中的乘号是“x”不是“*”，并且大的数字在“x”之前，否则编译无法通过；如果没有匹配的分辨率会找默认layout文件夹。 本文链接：http://www.sguotao.com/Android基础-2011-08-12-android-basic-14.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android基础13 常用UI（下）]]></title>
      <url>%2FAndroid%E5%9F%BA%E7%A1%80-2011-08-11-android-basic-13.html</url>
      <content type="text"><![CDATA[1.菜单(Menu)1.1 普通menu 重写Activity的onCreateOptionsMenu(Menu menu)方法，该方法用于创建选项菜单，在用户按下手机的“Menu”按钮时就会显示创建好的菜单，在onCreateOptionsMenu(Menu menu)方法内部可以调用Menu.add()方法实现菜单的添加。 重写Activity的onMenuItemSelected()方法，该方法用于处理菜单被选择事件 通过手机上提供的“MENU”按钮可以打开菜单，如果希望通过代码打开菜单，可以调用Activity的openOptionsMenu()方法。 1234567891011121314151617181920212223242526public class MenuActivity extends Activity &#123;private static final String TAG = &quot;MenuActivity&quot;;private static final int MENU_ADD = Menu.FIRST;private static final int MENU_UPDATE = Menu.FIRST + 1; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.menu); &#125; @Override public boolean onCreateOptionsMenu(Menu menu) &#123; menu.add(Menu.NONE, MENU_ADD, Menu.NONE, &quot;添加&quot;); menu.add(Menu.NONE, MENU_UPDATE, Menu.NONE, &quot;更新&quot;); return super.onCreateOptionsMenu(menu); &#125; @Override public boolean onMenuItemSelected(int featureId, MenuItem item) &#123; switch (item.getItemId()) &#123; case MENU_ADD: Log.i(TAG, &quot;add was selected&quot;); return true; case MENU_UPDATE: Log.i(TAG, &quot;update was selected&quot;); return true; default: return super.onMenuItemSelected(featureId, item);&#125; &#125; &#125; 1.2 SubMenu 添加子菜单调用menu对象的addSubMenu(final CharSequence title)，该方法返回一个SubMenu对象 添加子菜单的菜单项调用SubMenu对象的add(CharSequence title) 方法 12345678public boolean onCreateOptionsMenu(Menu menu) &#123; menu.add(0, 1, 1, &quot;苹果&quot;); menu.add(0, 2, 2, &quot;香蕉&quot;); SubMenu subMenu = menu.addSubMenu(1, 100, 100, &quot;桃子&quot;); subMenu.add(2, 101, 101, &quot;大桃子&quot;); subMenu.add(2, 102, 102, &quot;小桃子&quot;); return true; &#125; 1.3 Context Menu类似于电脑上的右键，长按某个View之后弹出来的菜单。首先在main.xml里定义若干个按钮。首先要注册一下，在onCreate方法里，如下代码： 123456789@Overridepublic void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.main); b1 = (Button) findViewById(R.id.b1); b2 = (Button) findViewById(R.id.b2); registerForContextMenu(b1); registerForContextMenu(b2); &#125; 然后覆盖onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo)。 123456789101112131415Override public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) &#123; if(v==b1)&#123; menu.setHeaderTitle(&quot;这是1&quot;); menu.add(200, 200, 200, &quot;Context Menu 1&quot;); menu.add(200, 201, 201, &quot;Context Menu 2&quot;); &#125; else if(v==b2)&#123; menu.setHeaderTitle(&quot;这是2&quot;); menu.add(300, 300, 300, &quot;C 1&quot;); menu.add(300, 301, 301, &quot;C 2&quot;); &#125; super.onCreateContextMenu(menu, v, menuInfo); &#125; 1.4 动态Menu动态菜单就是根据不同的界面有不同的菜单。下面的代码实现这样的功能：当主界面的某个TextView的值是“M“和“N”时，弹出不同的菜单。 12345678910111213141516@Overridepublic boolean onPrepareOptionsMenu(Menu menu) &#123; String currentText = tv1.getText().toString(); if(&quot;M&quot;.equals(currentText))&#123; menu.clear();//先清掉菜单 MenuItem item = menu.add(0, 400, 401, &quot;to N&quot;);//可以通过点击这个菜单项来改变tv1的值这样(变成N)就可以测试了 item.setIcon(android.R.drawable.alert_dark_frame);//android自带的图标 &#125; if(&quot;N&quot;.equals(currentText))&#123; menu.clear();//先清掉菜单 MenuItem item = menu.add(0, 401, 402, &quot;to M&quot;);//可以通过点击这个菜单项来改变tv1的值这样(变成M)就可以测试了 item.setIcon(android.R.drawable.alert_light_frame); &#125; menu.add(0, 402, 403, &quot;Now is &quot; + currentText);//现在共有两个菜单子项 return super.onPrepareOptionsMenu(menu); &#125; 1.5 用xml文件方式创建Menu之前都是用代码的方法创建Menu,用xml配置文件也可以相当方便地制作菜单。要res/目录下建一个文件夹，名为menu，下面建一个xml文件，名为menu_xml_file.xml，代码如下： 123456789&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&lt;group android:id=&quot;@+id/grout_main&quot;&gt; &lt;item android:id=&quot;@+id/menu_1&quot; android:title=&quot;This 1&quot;/&gt; &lt;item android:id=&quot;@+id/menu_2&quot; android:title=&quot;This 2&quot; /&gt; &lt;/group&gt;&lt;/menu&gt; 在Activity中覆盖onCreateOptionsMenu(Menu menu)方法，代码如下： 123456@Overridepublic boolean onCreateOptionsMenu(Menu menu) &#123; MenuInflater inflater = getMenuInflater(); inflater.inflate(R.menu.menu_xml_file, menu); return true; &#125; 其他的都和在Activity中制作菜单一样。 2. 手势识别(GestureOverlayView) 建立手势库使用SDK自带例子GestureBuilder建立手势库（位置：android-sdk-windows\samples\android-8\GestureBuilder）。使用GestureBuilder之前，你需要恢复其到开发环境，然后进行编绎并部署到手机上。此时，就可以使用GestureBuilder建立手势库，生成的手势库文件在SCDard上，默认文件名称为：gestures 在应用中加载手势库文件，然后开发手势识别代码。把手势库文件gestures文件拷贝到项目的res/raw目录下。然后在布局文件中添加用于手势绘制的View： 12345&lt;android.gesture.GestureOverlayView android:id=&quot;@+id/gov&quot; android:layout_width=&quot;fill_parent&quot; android:layout_height=&quot;fill_parent&quot; android:gestureStrokeType=&quot;multiple&quot;/&gt; 为View添加手势监听事件：gestureOverlayView.addOnGesturePerformedListener(); 得到手势库：mLibrary = GestureLibraries.fromRawResource(this, R.raw.gestures); 加载手势库：mLibrary.load(); 大多数情况下，手势都是通过一笔完成。然而有一些特别的需求就需要通过多个笔画来实现，这时可以使用gestureStrokeType属性进行设置：android:gestureStrokeType=”multiple” 代码实现： 123456789101112131415161718192021222324252627282930313233public class MainActivity extends Activity &#123; private GestureOverlayView gestureOverlayView; private GestureLibrary mLibrary; private boolean state; private EditText addressText; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.main); addressText = (EditText)this.findViewById(R.id.address); gestureOverlayView = (GestureOverlayView)this.findViewById(R.id.gestures); //当用户完成一次Gesture绘制后，系统将自动调用Listener对象的onGesturePerformed()方法 gestureOverlayView.addOnGesturePerformedListener(new GestureListener()); mLibrary = GestureLibraries.fromRawResource(this, R.raw.gestures); state = mLibrary.load();//加载手势库 &#125; private final class GestureListener implements GestureOverlayView.OnGesturePerformedListener&#123; @Override public void onGesturePerformed(GestureOverlayView overlay, Gesture gesture) &#123; if(state)&#123; List&lt;Prediction&gt; predictions = mLibrary.recognize(gesture); //从手势库中查询匹配的内容，匹配的结果可能包括多个相似的结果，匹配度高的结果放在最前面 if(!predictions.isEmpty())&#123; Prediction prediction = predictions.get(0); //prediction的score属性代表了与手势的相似程度name代表手势对应的名称 if(prediction.score &gt; 1)&#123; addressText.setText(prediction.name); &#125; &#125; &#125; &#125; &#125;&#125; 3. 编码实现软件界面Android除了可以使用xml实现软件界面，还可以通过编码方式实现软件的界面，而且在某种情况下只能采用编码方式实现软件的界面，例如：软件运行时需要根据运算结果决定显示某些内容。如果不是必须，建议使用xml，因为这样可以使应用遵守mvc设计模式，具有良好的软件分层结构。下面代码实现了如HelloWorld项目一样的软件界面： 123456789101112131415public class MainActivity extends Activity &#123; public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); LinearLayout linearLayout = new LinearLayout(this); LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams( ViewGroup.LayoutParams.FILL_PARENT, ViewGroup.LayoutParams.FILL_PARENT); TextView textView = new TextView(this); textView.setText(R.string.hello); textView.setId(34); LinearLayout.LayoutParams textParams = new LinearLayout.LayoutParams( ViewGroup.LayoutParams.FILL_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT); linearLayout.addView(textView, textParams); setContentView(linearLayout, layoutParams); &#125;&#125; 4. 网页视图(WebView)因为android软件开发分工目前还没有细化，程序员往往需要负责软件界面的开发，虽然软件的界面图片已经由美工设计好了，但如果使用layout技术把软件做成如图片所示的界面确实很困难，而且也比较耗时。Android通过WebView实现了JS代码与Java代码互相通信的功能，使的android软件的界面开发也可以采用HTML网页技术，这样，广大网页美工可以参与进android软件的界面开发工作，从而让程序员从中解脱出来。 XML配置 1234&lt;WebViewandroid:id=&quot;@+id/webView&quot;android:layout_width=&quot;fill_parent&quot; android:layout_height=&quot;fill_parent&quot; /&gt; 在项目的assets目录放入index.html文件 123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;title&gt;Insert title here&lt;/title&gt; &lt;script type=&quot;text/javascript&quot;&gt; function show(jsondata)&#123; var jsonobjs = eval(jsondata); var table = document.getElementById(&quot;personTable&quot;); for(var y=0; y&lt;jsonobjs.length; y++)&#123; var tr = table.insertRow(table.rows.length); var td1 = tr.insertCell(0); var td2 = tr.insertCell(1); td2.align = &quot;center&quot;; var td3 = tr.insertCell(2); td3.align = &quot;center&quot;; td1.innerHTML = jsonobjs[y].name; td2.innerHTML = jsonobjs[y].amount; td3.innerHTML = &quot;&lt;a href=&apos;javascript:contact.call(\&quot;&quot;+ jsonobjs[y].phone+ &quot;\&quot;)&apos;&gt;&quot;+ jsonobjs[y].phone+ &quot;&lt;/a&gt;&quot;; &#125; &#125; &lt;/script&gt; &lt;/head&gt; &lt;body onload=&quot;javascript:contact.showcontacts()&quot;&gt; &lt;table border=&quot;0&quot; width=&quot;100%&quot; id=&quot;personTable&quot; cellspacing=&quot;0&quot;&gt; &lt;tr&gt; &lt;td width=&quot;30%&quot;&gt;姓名&lt;/td&gt; &lt;td width=&quot;30%&quot; align=&quot;center&quot;&gt;存款&lt;/td&gt; &lt;td align=&quot;center&quot;&gt;电话&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt;&lt;/html&gt; 代码实现： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556public class HtmlActivity extends Activity &#123;private WebView webView;private Handler handler = new Handler(); @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.main); webView = (WebView)this.findViewById(R.id.webView); webView.getSettings().setJavaScriptEnabled(true); webView.getSettings().setSaveFormData(false); webView.getSettings().setSavePassword(false); webView.getSettings().setSupportZoom(false); webView.addJavascriptInterface(new NcistJavaScript(), “ncist”); //addJavascriptInterface方法中要绑定的Java对象 webView.setWebChromeClient(new NcistWebClient()); webView.loadUrl(&quot;file:///android_asset/index.html&quot;); &#125; private final class NcistJavaScript&#123; public void personlist()&#123; webview.loadUrl(&quot;javascript:contactlist(&apos;&quot;+ getPersonJson() + &quot;&apos;)&quot;); &#125; public void call(final String phone)&#123; startActivity(new Intent(Intent.ACTION_CALL, Uri.parse(&quot;tel:&quot;+ phone))); &#125; public static String getPersonJson() &#123;//生成json字符串 try &#123; JSONObject jsonObject = new JSONObject(); jsonObject.put(&quot;id&quot;, 56); jsonObject.put(&quot;name&quot;, &quot;老张&quot;); jsonObject.put(&quot;phone&quot;, &quot;5556&quot;); JSONObject jsonObject2 = new JSONObject(); jsonObject2.put(&quot;id&quot;, 89); jsonObject2.put(&quot;name&quot;, &quot;老方&quot;); jsonObject2.put(&quot;phone&quot;, &quot;5558&quot;); JSONArray jsonArray = new JSONArray(); jsonArray.put(jsonObject); jsonArray.put(jsonObject2); return jsonArray.toString(); &#125; catch (JSONException e) &#123; e.printStackTrace(); &#125; return &quot;&quot;; &#125; &#125; private final class NcistWebClient extends WebChromeClient&#123; @Override public boolean onJsAlert(WebView view, String url, String message, JsResult result) &#123; new AlertDialog.Builder(HtmlActivity.this) .setTitle(&quot;提示信息&quot;) .setMessage(message) .setPositiveButton(&quot;确定&quot;, new DialogInterface.OnClickListener()&#123; public void onClick(DialogInterface dialoginterface, int i)&#123;&#125; &#125;).show(); return true; &#125; &#125;&#125; 本文链接：http://www.sguotao.com/Android基础-2011-08-11-android-basic-13.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android基础12 常用UI（中）]]></title>
      <url>%2FAndroid%E5%9F%BA%E7%A1%80-2011-08-10-android-basic-12.html</url>
      <content type="text"><![CDATA[1. 拖动条(SeekBar) SeekBar.getProgress()获取拖动条当前值 调用setOnSeekBarChangeListener()方法，处理拖动条值变化事件，把SeekBar.OnSeekBarChangeListener实例作为参数传入。 代码处理: 123456789101112131415161718192021222324252627282930public class SeekBarActivity extends Activity &#123; private SeekBar seekBar; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.seekbar); seekBar = (SeekBar) findViewById(R.id.seekBar); seekBar.setMax(100);//设置最大刻度 seekBar.setProgress(30);//设置当前刻度 seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() &#123; @Override public void onProgressChanged(SeekBar seekBar, int progress, boolean fromTouch) &#123; Log.v(&quot;onProgressChanged()&quot;, String.valueOf(progress) + &quot;, &quot; + String.valueOf(fromTouch)); &#125; @Override public void onStartTrackingTouch(SeekBar seekBar) &#123;//开始拖动 Log.v(&quot;onStartTrackingTouch()&quot;, String.valueOf(seekBar.getProgress())); &#125; @Override public void onStopTrackingTouch(SeekBar seekBar) &#123;//结束拖动 Log.v(&quot;onStopTrackingTouch()&quot;, String.valueOf(seekBar.getProgress())); &#125; &#125;); Button button = (Button)this.findViewById(R.id.seekBarButton); button.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; Toast.makeText(SeekBarActivity.this, String.valueOf(seekBar.getProgress()), 1).show(); &#125;&#125;); &#125;&#125; 2. 进度条(ProgressBar)在布局xml文件中添加进度条代码： 12345&lt;ProgressBar android:layout_width=&quot;fill_parent&quot; android:layout_height=&quot;20px&quot; style=&quot;?android:attr/progressBarStyleHorizontal&quot; android:id=&quot;@+id/downloadbar&quot;/&gt; 在代码中操作进度条： 12ProgressBar.setMax(100);//设置最大刻度ProgressBar.setProgress(0);//设置进度条的当前刻度，如果进度条的最大刻度为100，当前刻度为50，进度条将进行到一半。 3. 输入内容自动完成文本框(AutoCompleteTextView)AutoCompleteTextView和EditText组件类似，都可以输入文本。但AutoCompleteTextView组件可以和一个字符串数组或List对象绑定，当用户输入两个及以上字符时，系统将在AutoCompleteTextView组件下方列出字符串数组中所有以输入字符开头的字符串，这一点和www.google.com的搜索框非常相似，当输入某一个要查找的字符串时，google搜索框就会列出以这个字符串开头的最热门的搜索字符串列表。 12345&lt;AutoCompleteTextView android:layout_width=&quot;fill_parent“ android:layout_height=&quot;wrap_content“ &lt;!– completionThreshold 指定至少输入几个字符后才会出现自动提示功能 android:completionThreshold=&quot;1“ android:id=&quot;@+id/name&quot; /&gt; 代码处理： 12345public void onCreate(Bundle savedInstanceState) &#123; …… String[] names = &#123;&quot;老张&quot;, &quot;老方&quot;, &quot;老毕&quot;, &quot;李明&quot; , &quot;李丽&quot;, &quot;陈江&quot;, &quot;abc&quot;, &quot;acc&quot;&#125;; AutoCompleteTextView nameText = (AutoCompleteTextView)this.findViewById(R.id.name);ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;String&gt;(this, android.R.layout.simple_dropdown_item_1line, names); nameText.setAdapter(adapter);&#125; 4. 多次输入内容自动完成(MultiAutoCompleteTextView)除了AutoCompleteTextView控件外，我们还可以使用MultiAutoCompleteTextView控件来完成连续输入的功能。也就是说，当输入完一个字符串后，在该字符串后面输入一个逗号（,），在逗号前后可以有任意多个空格，然后再输入一个字符串，仍然会显示自动提示列表。使用MultiAutoCompleteTextView时，需要为它的setTokenizer()方法指定MultiAutoCompleteTextView.CommaTokenizer类对象实例，该对象表示采用逗号作为输入多个字符串的分隔符。 12345&lt; MultiAutoCompleteTextView android:layout_width=&quot;fill_parent“ android:layout_height=&quot;wrap_content“ &lt;!– completionThreshold 指定至少输入几个字符后才会出现自动提示功能 android:completionThreshold=&quot;1“ android:id=&quot;@+id/name&quot; /&gt; 代码处理 1234567public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.main); String[] names = &#123;&quot;老张&quot;, &quot;老方&quot;, &quot;老毕&quot;, &quot;李明&quot; , &quot;李丽&quot;, &quot;陈江&quot;, &quot;abc&quot;, &quot;acc&quot;&#125;; MultiAutoCompleteTextView nameText = (MultiAutoCompleteTextView)this.findViewById(R.id.name);ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;String&gt;(this, android.R.layout.simple_dropdown_item_1line,names); nameText.setAdapter(adapter); nameText.setTokenizer(new MultiAutoCompleteTextView.CommaTokenizer());&#125; 5. 列表视图(ListView)列表的显示需要三个元素： ListVeiw 用来展示列表的View。 适配器 用来把数据映射到ListView上的中介。 数据具体的将被映射的字符串，图片，或者基本组件。根据列表的适配器类型，列表分为三种，ArrayAdapter，SimpleAdapter和SimpleCursorAdapter。其中以ArrayAdapter最为简单，只能展示一行字。SimpleAdapter有最好的扩充性，可以自定义出各种效果。SimpleCursorAdapter可以认为是SimpleAdapter对数据库的简单结合，可以方面的把数据库的内容以列表的形式展示出来。 5.1 ArrayAdapter类型ListView 123456789101112131415161718public class MyListView extends Activity &#123; private ListView listView; @Override public void onCreate(Bundle savedInstanceState)&#123; super.onCreate(savedInstanceState); listView = new ListView(this); listView.setAdapter(new ArrayAdapter&lt;String&gt;(this, android.R.layout.simple_expandable_list_item_1,getData())); setContentView(listView); &#125; private List&lt;String&gt; getData()&#123; List&lt;String&gt; data = new ArrayList&lt;String&gt;(); data.add(&quot;测试数据1&quot;); data.add(&quot;测试数据2&quot;); data.add(&quot;测试数据3&quot;); data.add(&quot;测试数据4&quot;); return data; &#125;&#125; 上面代码使用了ArrayAdapter(Context context, int textViewResourceId, List objects)来装配数据，要装配这些数据就需要一个连接ListView视图对象和数组数据的适配器来两者的适配工作，ArrayAdapter的构造需要三个参数，依次为this,布局文件（注意这里的布局文件描述的是列表的每一行的布局，android.R.layout.simple_list_item_1是系统定义好的布局文件只显示一行文字，数据源(一个List集合)。同时用setAdapter()完成适配的最后工作。 5.2 SimpleCursorAdapter类型ListView sdk的解释是这样的：An easy adapter to map columns from a cursor to TextViews or ImageViews defined in an XML file. You can specify which columns you want, which views you want to display the columns, and the XML file that defines the appearance of these views。 简单的说就是方便把从游标得到的数据进行列表显示，并可以把指定的列映射到对应的TextView中。下面的程序是从电话簿中把联系人显示到类表中。先在通讯录中添加一个联系人作为数据库的数据。然后获得一个指向数据库的Cursor并且定义一个布局文件（当然也可以使用系统自带的）。 12345678910111213141516public class MyListView2 extends Activity &#123; private ListView listView; @Override public void onCreate(Bundle savedInstanceState)&#123; super.onCreate(savedInstanceState); listView = new ListView(this); Cursor cursor = getContentResolver().query(People.CONTENT_URI, null, null, null, null); startManagingCursor(cursor); ListAdapter listAdapter = new SimpleCursorAdapter(this, android.R.layout.simple_expandable_list_item_1, cursor, new String[]&#123;People.NAME&#125;, new int[]&#123;android.R.id.text1&#125;); listView.setAdapter(listAdapter); setContentView(listView); &#125;&#125; Cursor cursor = getContentResolver().query(People.CONTENT_URI, null, null, null, null);先获得一个指向系统通讯录数据库的Cursor对象获得数据来源。startManagingCursor(cursor);我们将获得的Cursor对象交由Activity管理，这样Cursor的生命周期和Activity便能够自动同步，省去自己手动管理Cursor。 SimpleCursorAdapter 构造函数前面3个参数和ArrayAdapter是一样的，最后两个参数：一个包含数据库的列的String型数组，一个包含布局文件中对应组件id的int型数组。其作用是自动的将String型数组所表示的每一列数据映射到布局文件对应id的组件上。上面的代码，将NAME列的数据一次映射到布局文件的id为text1的组件上。注意：需要在AndroidManifest.xml中如权限： 1&lt;uses-permission android:name=&quot;android.permission.READ_CONTACTS&quot;/&gt; 5.3 SimpleAdapter类型ListViewSimpleAdapter的扩展性最好，可以定义各种各样的布局出来，可以放上ImageView（图片），还可以放上Button（按钮），CheckBox（复选框）等等。下面的代码都直接继承了ListActivity，ListActivity和普通的Activity没有太大的差别，不同就是对显示ListView做了许多优化，方面显示而已。下面的程序是实现一个带有图片的类表。 首先需要定义好一个用来显示每一个列内容的xml。 1234567891011121314151617181920212223&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:orientation=&quot;horizontal&quot; android:layout_width=&quot;fill_parent&quot; android:layout_height=&quot;fill_parent&quot;&gt; &lt;ImageView android:id=&quot;@+id/img&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_margin=&quot;5px&quot;/&gt; &lt;LinearLayout android:orientation=&quot;vertical&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot;&gt; &lt;TextView android:id=&quot;@+id/title&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:textColor=&quot;#FFFFFFFF&quot; android:textSize=&quot;22px&quot; /&gt; &lt;TextView android:id=&quot;@+id/info&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:textColor=&quot;#FFFFFFFF&quot; android:textSize=&quot;13px&quot; /&gt; &lt;/LinearLayout&gt;&lt;/LinearLayout&gt; 实现代码： 123456789101112131415161718192021222324252627282930313233public class MyListView3 extends ListActivity &#123; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); SimpleAdapter adapter = new SimpleAdapter(this,getData(),R.layout.vlist, new String[]&#123;&quot;title&quot;,&quot;info&quot;,&quot;img&quot;&#125;, new int[]&#123;R.id.title,R.id.info,R.id.img&#125;); setListAdapter(adapter); &#125; private List&lt;Map&lt;String, Object&gt;&gt; getData() &#123; List&lt;Map&lt;String, Object&gt;&gt; list = new ArrayList&lt;Map&lt;String, Object&gt;&gt;(); Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;(); map.put(&quot;title&quot;, &quot;G1&quot;); map.put(&quot;info&quot;, &quot;google 1&quot;); map.put(&quot;img&quot;, R.drawable.i1); list.add(map); map = new HashMap&lt;String, Object&gt;(); map.put(&quot;title&quot;, &quot;G2&quot;); map.put(&quot;info&quot;, &quot;google 2&quot;); map.put(&quot;img&quot;, R.drawable.i2); list.add(map); map = new HashMap&lt;String, Object&gt;(); map.put(&quot;title&quot;, &quot;G3&quot;); map.put(&quot;info&quot;, &quot;google 3&quot;); map.put(&quot;img&quot;, R.drawable.i3); list.add(map); return list; &#125; &#125; 使用simpleAdapter的数据用一般都是HashMap构成的List，list的每一节对应ListView的每一行。HashMap的每个键值数据映射到布局文件中对应id的组件上。因为系统没有对应的布局文件可用，我们可以自己定义一个布局vlist.xml。下面做适配，new一个SimpleAdapter参数依次是：this，布局文件（vlist.xml），HashMap的 title 和 info，img。布局文件的组件id，title，info，img。布局文件的各组件分别映射到HashMap的各元素上，完成适配。 5.4 有按钮的ListView但是有时候，列表不光会用来做显示用，同样可以在在上面添加按钮。添加按钮首先要写一个有按钮的xml文件，然后自然会想到用上面的方法定义一个适配器，然后将数据映射到布局文件上。但是事实并非这样，因为按钮是无法映射的，即使你成功的用布局文件显示出了按钮也无法添加按钮的响应，这时就要研究一下ListView是如何现实的了，而且必须要重写一个类继承BaseAdapter.下面的示例将显示一个按钮和一个图片,两行字如果单击按钮将删除此按钮的所在行。并告诉你ListView究竟是如何工作的。 1234567891011121314151617181920212223242526272829&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:orientation=&quot;horizontal&quot; android:layout_width=&quot;fill_parent&quot; android:layout_height=&quot;fill_parent&quot;&gt; &lt;ImageView android:id=&quot;@+id/img&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_margin=&quot;5px&quot;/&gt; &lt;LinearLayout android:orientation=&quot;vertical&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot;&gt; &lt;TextView android:id=&quot;@+id/title&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:textColor=&quot;#FFFFFFFF&quot; android:textSize=&quot;22px&quot; /&gt; &lt;TextView android:id=&quot;@+id/info&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:textColor=&quot;#FFFFFFFF&quot; android:textSize=&quot;13px&quot; /&gt; &lt;/LinearLayout&gt; &lt;Button android:id=&quot;@+id/view_btn&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;@string/s_view_btn&quot; android:layout_gravity=&quot;bottom|right&quot; /&gt;&lt;/LinearLayout&gt; 代码实现： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103public class MyListView4 extends ListActivity &#123; private List&lt;Map&lt;String, Object&gt;&gt; mData; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); mData = getData(); MyAdapter adapter = new MyAdapter(this); setListAdapter(adapter); &#125; private List&lt;Map&lt;String, Object&gt;&gt; getData() &#123; List&lt;Map&lt;String, Object&gt;&gt; list = new ArrayList&lt;Map&lt;String, Object&gt;&gt;(); Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;(); map.put(&quot;title&quot;, &quot;G1&quot;); map.put(&quot;info&quot;, &quot;google 1&quot;); map.put(&quot;img&quot;, R.drawable.i1); list.add(map); map = new HashMap&lt;String, Object&gt;(); map.put(&quot;title&quot;, &quot;G2&quot;); map.put(&quot;info&quot;, &quot;google 2&quot;); map.put(&quot;img&quot;, R.drawable.i2); list.add(map); map = new HashMap&lt;String, Object&gt;(); map.put(&quot;title&quot;, &quot;G3&quot;); map.put(&quot;info&quot;, &quot;google 3&quot;); map.put(&quot;img&quot;, R.drawable.i3); list.add(map); return list; &#125; // ListView 中某项被选中后的逻辑 @Override protected void onListItemClick(ListView l, View v, int position, long id) &#123; Log.v(&quot;MyListView4-click&quot;, (String)mData.get(position).get(&quot;title&quot;)); &#125; /** * listview中点击按键弹出对话框 */ public void showInfo()&#123; new AlertDialog.Builder(this) .setTitle(&quot;我的listview&quot;) .setMessage(&quot;介绍...&quot;) .setPositiveButton(&quot;确定&quot;, new DialogInterface.OnClickListener() &#123; @Override public void onClick(DialogInterface dialog, int which) &#123; &#125; &#125;) .show(); &#125; public final class ViewHolder&#123; public ImageView img; public TextView title; public TextView info; public Button viewBtn; &#125; public class MyAdapter extends BaseAdapter&#123; private LayoutInflater mInflater; public MyAdapter(Context context)&#123; this.mInflater = LayoutInflater.from(context); &#125; @Override public int getCount() &#123; return mData.size(); &#125; @Override public Object getItem(int arg0) &#123; return null; &#125; @Override public long getItemId(int arg0) &#123; return 0; &#125; @Override public View getView(int position, View convertView, ViewGroup parent) &#123; ViewHolder holder = null; if (convertView == null) &#123; holder=new ViewHolder(); convertView = mInflater.inflate(R.layout.vlist2, null); holder.img = (ImageView)convertView.findViewById(R.id.img); holder.title = (TextView)convertView.findViewById(R.id.title); holder.info = (TextView)convertView.findViewById(R.id.info); holder.viewBtn = (Button)convertView.findViewById(R.id.view_btn); convertView.setTag(holder); &#125;else &#123; holder = (ViewHolder)convertView.getTag(); &#125; holder.img.setBackgroundResource((Integer)mData.get(position).get(&quot;img&quot;)); holder.title.setText((String)mData.get(position).get(&quot;title&quot;)); holder.info.setText((String)mData.get(position).get(&quot;info&quot;)); holder.viewBtn.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; showInfo(); &#125; &#125;); return convertView; &#125; &#125;&#125; 下面将对上述代码，做详细的解释，listView在开始绘制的时候，系统首先调用getCount（）函数，根据他的返回值得到listView的长度（这也是为什么在开始的第一张图特别的标出列表长度），然后根据这个长度，调用getView（）逐一绘制每一行。如果你的getCount（）返回值是0的话，列表将不显示同样return 1，就只显示一行。 系统显示列表时，首先实例化一个适配器（这里将实例化自定义的适配器）。当手动完成适配时，必须手动映射数据，这需要重写getView（）方法。系统在绘制列表的每一行的时候将调用此方法。getView()有三个参数，position表示将显示的是第几行，covertView是从布局文件中inflate来的布局。我们用LayoutInflater的方法将定义好的vlist2.xml文件提取成View实例用来显示。然后将xml文件中的各个组件实例化（简单的findViewById()方法）。这样便可以将数据对应到各个组件上了。但是按钮为了响应点击事件，需要为它添加点击监听器，这样就能捕获点击事件。至此一个自定义的listView就完成了，现在让我们回过头从新审视这个过程。系统要绘制ListView了，他首先获得要绘制的这个列表的长度，然后开始绘制第一行，怎么绘制呢？调用getView()函数。在这个函数里面首先获得一个View（实际上是一个ViewGroup），然后再实例并设置各个组件，显示之。好了，绘制完这一行了。那 再绘制下一行，直到绘完为止。在实际的运行过程中会发现listView的每一行没有焦点了，这是因为Button抢夺了listView的焦点，只要布局文件中将Button设置为没有焦点就OK了。 本文链接：http://www.sguotao.com/Android基础-2011-08-10-android-basic-12.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android基础11 常用UI（上）]]></title>
      <url>%2FAndroid%E5%9F%BA%E7%A1%80-2011-07-21-android-basic-11.html</url>
      <content type="text"><![CDATA[1. 单选框(RadioButton)要完成单选框显示，需要使用到RadioGroup和RadioButton(单选框)。 RadioGroup用于对单选框进行分组，相同组内的单选框只有一个单选框能被选中。 RadioGroup.check(R.id.dotNet);将id名为dotNet的单选框设置成选中状态。 (RadioButton) findViewById(radioGroup.getCheckedRadioButtonId());//获取被选中的单选框。 RadioButton.getText();//获取单选框的值 调用setOnCheckedChangeListener()方法，处理单选框被选择事件，把RadioGroup.OnCheckedChangeListener实例作为参数传入界面设计代码： 1234567891011121314151617&lt;RadioGroup android:id=&quot;@+id/radioGroup&quot; xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot;&gt;&lt;RadioButton android:id=&quot;@+id/java&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;java&quot; /&gt; &lt;RadioButton android:id=&quot;@+id/dotNet&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;dotNet&quot; /&gt; &lt;RadioButton android:id=&quot;@+id/php&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;PHP&quot; /&gt;&lt;/RadioGroup&gt; 处理程序： 12345678910public void onCreate(Bundle savedInstanceState) &#123; ...... RadioGroup radioGroup = (RadioGroup) findViewById(R.id.radioGroup); radioGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() &#123; public void onCheckedChanged(RadioGroup group, int checkedId) &#123; RadioButton radioButton = (RadioButton) findViewById(checkedId); Log.i(TAG, String.valueOf(radioButton.getText())); &#125; &#125;);&#125; 2. 多选框(CheckBox) 每个多选框都是独立的，可以通过迭代所有多选框，然后根据其状态是否被选中再获取其值。 CheckBox.setChecked(true);//设置成选中状态。 CheckBox.getText();//获取多选框的值 调用setOnCheckedChangeListener()方法，处理多选框被选择事件，把CompoundButton.OnCheckedChangeListener实例作为参数传入。 代码处理: 12345678910111213141516171819202122232425262728293031public class CheckBoxActivity extends Activity &#123;private List&lt;CheckBox&gt; checkboxs = new ArrayList&lt;CheckBox&gt;(); @Overridepublic void onCreate(Bundle savedInstanceState) &#123;…… checkboxs.add((CheckBox) findViewById(R.id.checkboxdotNet)); checkboxs.add((CheckBox) findViewById(R.id.checkboxjava)); checkboxs.add((CheckBox) findViewById(R.id.checkboxphp)); checkboxs.get(1).setChecked(true);//设置成选中状态 for(CheckBox box : checkboxs)&#123; box.setOnCheckedChangeListener(listener); &#125; Button button = (Button)findViewById(R.id.checkboxButton); button.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; List&lt;String&gt; values = new ArrayList&lt;String&gt;(); for(CheckBox box : checkboxs)&#123; if(box.isChecked())&#123; values.add(box.getText().toString()); &#125; &#125; Toast.makeText(CheckBoxActivity.this, values.toString(), 1).show(); &#125;&#125;); &#125; CompoundButton.OnCheckedChangeListener listener = new CompoundButton.OnCheckedChangeListener() &#123; @Override public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) &#123; CheckBox checkBox = (CheckBox) buttonView; Log.i(TAG, &quot;isChecked=&quot;+ isChecked +&quot;,value=&quot;+ checkBox.getText());//输出单选框的值 &#125; &#125;;&#125; 3. 下拉列表框(Spinner) Spinner.getItemAtPosition(Spinner.getSelectedItemPosition());获取下拉列表框的值 调用setOnItemSelectedListener()方法，处理下拉列表框被选择事件，把AdapterView.OnItemSelectedListener实例作为参数传入。 代码处理: 12345678910111213141516171819202122public class SpinnerActivity extends Activity &#123; @Override public void onCreate(Bundle savedInstanceState) &#123; …… //第二个参数为下拉列表框每一项的界面样式，该界面样式由Android系统提供，当然您也可以自定义 ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;String&gt;(this, android.R.layout.simple_spinner_item); adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item); adapter.add(&quot;java&quot;); adapter.add(&quot;dotNet&quot;); adapter.add(&quot;php&quot;); Spinner spinner = (Spinner) findViewById(R.id.spinner); spinner.setAdapter(adapter); spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() &#123; @Override public void onItemSelected(AdapterView&lt;?&gt; adapterView, View view, int position, long id) &#123; Spinner spinner = (Spinner)adapterView; String itemContent = (String)adapterView.getItemAtPosition(position); &#125; @Override public void onNothingSelected(AdapterView&lt;?&gt; view) &#123; Log.i(TAG, view.getClass().getName()); &#125; &#125;); &#125;&#125; 3.1 下拉列表框—采用javabean作为Adapter元素很多时候显示在下拉列表框的值并不是希望得到的值，如果要做一个联系人下拉列表框，列表框列出的是联系人的姓名，因为姓名有可能相同，所以我们希望得到的值应该为该联系人的id，要实现这种需求我们需要自定义Adapter，当然自定义Adapter需要我们编写一小段代码，如果我们不想编写Adapter，又能实现我们的需求，那是最好不过的了。通过观察ArrayAdapter中getView(int position, View convertView, ViewGroup parent)的内部代码发现，如果为ArrayAdapter指定的实际泛型参数类型没有实现CharSequence（字符串）接口，将会调用该类型对象的toString()向下拉列表框输出显示值。利用这个特点我们可以重写javaBean的toString()向下拉列表框提供显示值。 代码处理: 12345678910111213141516171819202122232425262728293031323334353637383940public class SpinnerActivity extends Activity &#123; private static final String TAG = &quot;SpinnerActivity&quot;; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.spinner); ArrayAdapter&lt;Person&gt; adapter = new ArrayAdapter&lt;Person&gt;(this, android.R.layout.simple_spinner_item); adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item); adapter.add(new Person(12, &quot;李明&quot;)); adapter.add(new Person(100, &quot;李明&quot;)); adapter.add(new Person(62, &quot;张天&quot;)); Spinner spinner = (Spinner) findViewById(R.id.spinner); spinner.setAdapter(adapter); spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() &#123; @Override public void onItemSelected(AdapterView&lt;?&gt; adapterView, View view, int position, long id) &#123; Spinner spinner = (Spinner)adapterView; Person person = (Person)adapterView.getItemAtPosition(position); &#125; @Override public void onNothingSelected(AdapterView&lt;?&gt; view) &#123; Log.i(TAG, view.getClass().getName()); &#125; &#125;); &#125;&#125;Person.java:public class Person &#123; private Integer id; private String name; public Person(Integer id, String name) &#123; this.id = id; this.name = name; &#125; …… @Override public String toString() &#123; return name; &#125;&#125; 3.2 下拉列表框–自定义选项界面样式 Spinner.getItemAtPosition(Spinner.getSelectedItemPosition());获取下拉列表框的值 调用setOnItemSelectedListener()方法，处理下拉列表框被选择事件，把AdapterView.OnItemSelectedListener实例作为参数传入。 下拉列表框每一项的界面样式:stylespinner.xml 123456&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;TextView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:id=&quot;@+id/contentTextView&quot; android:layout_width=&quot;fill_parent&quot; android:layout_height=&quot;wrap_content&quot; android:background=&quot;#F4FDFF&quot; /&gt; 代码处理: 123456789101112131415161718192021222324public class SpinnerActivity extends Activity &#123; private static final String TAG = &quot;SpinnerActivity&quot;; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.spinner); //第二个参数为layout文件在R文件的id,第三个参数为TextView在layout文件的id ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;String&gt;(this, R.layout.stylespinner,R.id.contentTextView); adapter.add(&quot;java&quot;); adapter.add(&quot;dotNet&quot;); adapter.add(&quot;php&quot;); Spinner spinner = (Spinner) findViewById(R.id.spinner); spinner.setAdapter(adapter); spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() &#123; @Override public void onItemSelected(AdapterView&lt;?&gt; adapterView, View view, int position, long id) &#123; Spinner spinner = (Spinner)adapterView; String itemContent = (String)adapterView.getItemAtPosition(position); &#125; @Override public void onNothingSelected(AdapterView&lt;?&gt; view) &#123; Log.i(TAG, view.getClass().getName()); &#125; &#125;); &#125;&#125; 3.3 总结实现spinner的步骤： 定义标签 创建一个适配器 获取Spinner标签，调用setAdapter(SpinnerAdapter adapter)方法设置一个适配器 调用setOnItemSelectedListener(OnItemSelectedListener listener)方法设置监听器监听选中事件 Spinner适配器的数据来源： 1) 使用字符串构建适配器 1234ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;String&gt;(this, android.R.layout.simple_spinner_item);adapter.add(&quot;Java&quot;);adapter.add(&quot;.NET&quot;);adapter.add(&quot;PHP&quot;); 2) 使用JavaBean构建适配器 1234ArrayAdapter&lt;User&gt; adapter = new ArrayAdapter&lt;User&gt;(this, android.R.layout.simple_spinner_item);adapter.add(new User(1, &quot;lhm&quot;, &quot;lhm@ncist.cn&quot;));adapter.add(new User(2, &quot;yzk&quot;, &quot;yzk@ncist.cn&quot;));adapter.add(new User(3, &quot;hsp&quot;, &quot;hsp@ncist.cn&quot;)); 3) 使用资源文件构建适配器 1ArrayAdapter&lt;CharSequence&gt; adapter = ArrayAdapter.createFromResource(this, R.array.names, android.R.layout.simple_spinner_item); 4) 自定义适配器样式 12ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;String&gt;(this, R.layout.custom, R.id.content);//R.layout.custom 布局文件ID ，R.id.content 哪一个组件用来显示文本 本文链接：http://www.sguotao.com/Android基础-2011-07-21-android-basic-11.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android基础10 通知]]></title>
      <url>%2FAndroid%E5%9F%BA%E7%A1%80-2011-07-15-android-basic-10.html</url>
      <content type="text"><![CDATA[关于通知的文档位置：android-sdk-windows/docs/guide/topics/ui/notifiers/index.html 1. 土司通知a) 创建通知 12Toast.makeText(Context context, CharSequence text, int duration)Toast.makeText(Context context, int resId, int duration) b) 发送通知 show() 2. 状态栏通知 通知用于在状态栏显示消息，消息到来时以图标方式表示，如果需要查看消息，可以拖动状态栏到屏幕下方即可查看消息。发送消息的代码如下： 1234567891011121314151617//获取通知管理器NotificationManager mNotificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);int icon = android.R.drawable.stat_notify_chat;long when = System.currentTimeMillis();//新建一个通知，指定其图标和标题//第一个参数为图标,第二个参数为短暂提示标题,第三个为通知时间Notification notification = new Notification(icon, null, when); notification.defaults = Notification.DEFAULT_SOUND;//发出默认声音Intent openintent = new Intent(this, OtherActivity.class);//当点击消息时就会向系统发送openintent意图，点击时发送PendingIntent contentIntent = PendingIntent.getActivity(this, 0, openintent, 0);//设置通知点击事件notification.setLatestEventInfo(this, “标题”, “我是内容&quot;, contentIntent);//发送消息，第一个参数为自定义的通知唯一标识mNotificationManager.notify(0, notification); 注意：设置通知点击后清除，设置Notification 对象属性 n.flags = Notification.FLAG_AUTO_CANCEL; 3. 对话框通知3.1 普通对话框当应用需要显示一个进度条或需要用户对信息进行确认时，可以使用对话框来完成。下面代码将打开一个如图所示的对话框：代码采用的是一个链式调用，像setTitle()、setMessage()这些方法，他们的返回值都是当前对话框对象。 123456789101112131415161718new AlertDialog.Builder(context) .setTitle(&quot;java培训&quot;) .setCancelable(false) //设置不能通过“后退”按钮关闭对话框 .setMessage(&quot;浏览华北科技网站?&quot;) .setPositiveButton(&quot;确认&quot;, new DialogInterface.OnClickListener()&#123; public void onClick(DialogInterface dialoginterface, int i)&#123; Uri uri = Uri.parse(&quot;http://www.ncist.cn/&quot;);//打开链接 Intent intent = new Intent(Intent.ACTION_VIEW, uri); startActivity(intent); &#125; &#125;) .setNegativeButton(&quot;取消&quot;, new DialogInterface.OnClickListener() &#123; public void onClick(DialogInterface dialog, int id) &#123; dialog.cancel(); &#125; &#125;) .show();//显示对话框 3.2 选项列表的对话框下面代码将打开一个如图所示的选项列表对话框： 12345678final String[] items = &#123;&quot;java&quot;, &quot;.net&quot;, &quot;php&quot;&#125;;new AlertDialog.Builder(SenderNotificationActivity.this).setTitle(&quot;选择语言&quot;) .setItems(items, new DialogInterface.OnClickListener() &#123; public void onClick(DialogInterface dialog, int item) &#123; Toast.makeText(getApplicationContext(), items[item], Toast.LENGTH_SHORT).show(); &#125; &#125;).show();//显示对话框 3.3 带单选框列表对话框下面代码将打开一个如图所示的带单选框的列表对话框： 12345678910final String[] items = &#123;&quot;java&quot;, &quot;.net&quot;, &quot;php&quot;&#125;;//setSingleChoiceItems()的第二个参数是设置默认选项，选项索引从0开始，-1代表不选择任何选项。new AlertDialog.Builder(SenderNotificationActivity.this).setTitle(&quot;选择语言&quot;).setSingleChoiceItems(items, 1, new DialogInterface.OnClickListener() &#123; public void onClick(DialogInterface dialog, int item) &#123; Toast.makeText(getApplicationContext(), items[item], Toast.LENGTH_SHORT).show(); dialog.cancel(); &#125;&#125;).show();//显示对话框 3.4 带多选项列表的对话框下面代码将打开一个如图所示的多选项列表对话框： 123456789101112131415161718final String[] items = &#123;&quot;java&quot;, &quot;.net&quot;, &quot;php&quot;&#125;;new AlertDialog.Builder(SenderNotificationActivity.this).setCancelable(false).setTitle(&quot;选择语言&quot;).setMultiChoiceItems(items, new boolean[]&#123;false,true,false&#125;, new DialogInterface.OnMultiChoiceClickListener() &#123; @Override public void onClick(DialogInterface dialog, int which, boolean isChecked) &#123; if(isChecked)&#123; Toast.makeText(getApplicationContext(), items[which], Toast.LENGTH_SHORT).show(); &#125; &#125; &#125;).setPositiveButton(&quot;确认&quot;,new DialogInterface.OnClickListener()&#123; public void onClick(DialogInterface dialoginterface, int i)&#123; dialoginterface.dismiss(); &#125;&#125;).show();//显示对话框 3.5 进度对话框调用setProgressStyle()方法设置进度对话框风格。有两种风格： ProgressDialog.STYLE_SPINNER 旋体进度条风格 (为默认风格) ProgressDialog.STYLE_HORIZONTAL 横向进度条风格 下面代码将打开一个如图所示的一个进度对话框： 1234567891011121314151617181920212223242526public class ProgressDialogActivity extends Activity &#123;private ProgressDialog progressDialog; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.menu); //开始一条专门处理耗时工作的线程 new Thread(new Runnable()&#123; @Override public void run() &#123; try &#123; Thread.sleep(5*1000);//假设这项工作需要5秒才能完成 progressDialog.dismiss();//关闭进程对话框 //runOnUiThread(finishDialog);//要求运行在UI线程 &#125; catch (InterruptedException e) &#123;&#125; &#125; &#125;).start(); progressDialog = ProgressDialog.show(ProgressDialogActivity.this, &quot;请稍等&quot;, &quot;数据正在加载中...&quot;, true); &#125; private Runnable finishDialog = new Runnable() &#123; @Override public void run() &#123; progressDialog.dismiss(); &#125; &#125;;&#125; 横向进度条风格的对话框 123456789ProgressDialog dialog = new ProgressDialog(this);dialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL); // 设置进度条样式dialog.setTitle(&quot;下载中&quot;);dialog.setMessage(&quot;请稍候...&quot;);dialog.setCancelable(false);dialog.setMax(100);dialog.show();dialog.setProgress(10); // 设置进度dialog.dismiss(); // 对话框结束 本文链接：http://www.sguotao.com/Android基础-2011-07-15-android-basic-10.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android基础9 多媒体]]></title>
      <url>%2FAndroid%E5%9F%BA%E7%A1%80-2011-07-09-android-basic-9.html</url>
      <content type="text"><![CDATA[1. 录音机使用手机进行现场录音，实现步骤如下：a) 在功能清单文件AndroidManifest.xml中添加音频刻录权限： 1&lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot;/&gt; b) 编写音频刻录代码: 1234567891011MediaRecorder recorder = new MediaRecorder(); recorder.setAudioSource(MediaRecorder.AudioSource.MIC);//从麦克风采集声音 recorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);//内容输出格式 recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);//音频编码方式 recorder.setOutputFile(&quot;/mnt/sdcard/ncist.amr&quot;); recorder.prepare();//预期准备 recorder.start(); //开始刻录 ... recorder.stop();//停止刻录 recorder.reset(); //重设 recorder.release(); //刻录完成一定要释放资源 2. 音频播放器 123456789101112131415161718192021222324MediaPlayer mediaPlayer = new MediaPlayer();if (mediaPlayer.isPlaying()) &#123; mediaPlayer.reset();//重置为初始状态&#125;mediaPlayer.setDataSource(&quot;/mnt/sdcard/god.mp3&quot;);mediaPlayer.prepare(); mediaPlayer.start();//开始或恢复播放mediaPlayer.pause();//暂停播放mediaPlayer.start();//恢复播放mediaPlayer.stop();//停止播放mediaPlayer.release();//释放资源mediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() &#123;//播出完毕事件 @Override public void onCompletion(MediaPlayer arg0) &#123; mediaPlayer.release(); &#125;&#125;);mediaPlayer.setOnErrorListener(new MediaPlayer.OnErrorListener() &#123;// 错误处理事件 @Override public boolean onError(MediaPlayer player, int arg1, int arg2) &#123; mediaPlayer.release(); return false; &#125;&#125;); 3. 使用soundpool播放音效在Android开发中我们经常使用MediaPlayer来播放音频文件，但是MediaPlayer存在一些不足，例如：资源占用量较高、延迟时间较长、不支持多个音频同时播放等。这些缺点决定了MediaPlayer在某些场合的使用情况不会很理想，例如在对时间精准度要求相对较高的游戏开发中。在游戏开发中我们经常需要播放一些游戏音效（比如：子弹爆炸，物体撞击等），这些音效的共同特点是短促、密集、延迟程度小。在这样的场景下，我们可以使用SoundPool代替MediaPlayer来播放这些音效。 SoundPool（android.media.SoundPool），顾名思义是声音池的意思，主要用于播放一些较短的声音片段，支持从程序的资源或文件系统加载。与MediaPlayer相比，SoundPool的优势在于CPU资源占用量低和反应延迟小。另外，SoundPool还支持自行设置声音的品质、音量、播放比率等参数，支持通过ID对多个音频流进行管理。就现在已知的资料来说，SoundPool有一些设计上的BUG，从固件版本1.0开始有些还没有修复，我们在使用中应该小心再小心。相信将来Google会修复这些问题，但我们最好还是列出来： SoundPool最大只能申请1M的内存空间，这就意味着我们只能用一些很短的声音片段，而不是用它来播放歌曲或者做游戏背景音乐。 SoundPool提供了pause和stop方法，但这些方法建议最好不要轻易使用，因为有些时候它们可能会使你的程序莫名其妙的终止.建议使用这两个方法的时候尽可能多做测试工作，还有些朋友反映它们不会立即中止播放声音,而是把缓冲区里的数据播放完才会停下来,也许会多播放一秒钟。 SoundPool的效率问题。其实SoundPool的效率在这些播放类中算是很好的了，但是有的朋友在G1中测试它还是有100ms左右的延迟，这可能会影响用户体验。也许这不能管SoundPool本身，因为到了性能比较好的Droid中这个延迟就可以让人接受了。 在现阶段SoundPool有这些缺陷，但也有着它不可替代的优点，基于这些建议大家在如下情况中多使用SoundPoola) 应用程序中的声效(按键提示音，消息等)b) 游戏中密集而短暂的声音(如多个飞船同时爆炸) 开发步骤a) 往项目的res/raw目录中放入音效文件。b) 新建SoundPool对象，然后调用SoundPool.load()加载音效，调用SoundPool.play()播放指定音效文件。 123456789101112131415161718192021public class AudioActivity extends Activity &#123;private SoundPool pool;@Overridepublic void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.main); //指定声音池的最大音频流数目为10，声音品质为5 pool = new SoundPool(10, AudioManager.STREAM_SYSTEM, 5); final int sourceid = pool.load(this, R.raw.pj, 0);//载入音频流，返回在池中的id Button button = (Button)this.findViewById(R.id.button); button.setOnClickListener(new View.OnClickListener() &#123; public void onClick(View v) &#123; //播放音频，第二个参数为左声道音量; 第三个参数为右声道音量; 第四个参数为优先级；第五个参数为循环次数，0不循环，-1循环;第六个参数为速率，速率最低0.5最高为2，1代表正常速度 pool.play(sourceid, 1, 1, 0, -1, 1); &#125; &#125;);&#125;&#125; 4. 视频播放器 a) 在main.xml布局文件添加用于视频画面绘制的SurfaceView 控件 1&lt;SurfaceView android:layout_width=&quot;fill_parent&quot; android:layout_height=&quot;240dip&quot; android:id=&quot;@+id/surfaceView&quot; /&gt; b) 在Activity中 12345678910111213141516SurfaceView surfaceView = (SurfaceView)this.findViewById(R.id.surfaceView);surfaceView.getHolder().setFixedSize(176, 144); //设置分辨率/*下面设置Surface不维护自己的缓冲区，而是等待屏幕的渲染引擎将内容推送到用户面前*/surfaceView.getHolder().setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);MediaPlayer mediaPlayer = new MediaPlayer();mediaPlayer.reset();//重置为初始状态mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);/* 设置Video影片以SurfaceHolder播放 */mediaPlayer.setDisplay(surfaceView.getHolder());mediaPlayer.setDataSource(&quot;/mnt/sdcard/oppo.mp4&quot;);mediaPlayer.prepare(); mediaPlayer.start();//播放mediaPlayer.pause();//暂停播放mediaPlayer.start();//恢复播放mediaPlayer.stop();//停止播放mediaPlayer.release();//释放资源 5. 拍照a) 在main.xml布局文件添加用于显示取景画面的SurfaceView 控件： 1&lt;SurfaceView android:layout_width=&quot;fill_parent&quot; android:layout_height=&quot;240dip&quot; android:id=&quot;@+id/surfaceView&quot; /&gt; b) 在Activity中 123456789101112131415161718192021SurfaceView surfaceView = (SurfaceView)this.findViewById(R.id.surfaceView);surfaceView.getHolder().setFixedSize(176, 144); //设置分辨率/*下面设置Surface不维护自己的缓冲区，而是等待屏幕的渲染引擎将内容推送到用户面前*/surfaceView.getHolder().setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);//打开摄像头SDK2.3之后支持前置摄像头，open方法可以接收一个int参数，用来指定哪个摄像头Camera camera = Camera.open();WindowManager wm = (WindowManager) getSystemService(Context.WINDOW_SERVICE);Display display = wm.getDefaultDisplay();Camera.Parameters parameters = camera.getParameters();parameters.setPreviewSize(display.getWidth(), display.getHeight());//设置预览照片的大小parameters.setPreviewFrameRate(3);//每秒3帧parameters.setPictureFormat(PixelFormat.JPEG);//设置照片的输出格式parameters.set(&quot;jpeg-quality&quot;, 85);//照片质量parameters.setPictureSize(display.getWidth(), display.getHeight());//设置照片的大小camera.setParameters(parameters);camera.setPreviewDisplay(surfaceView.getHolder());//通过SurfaceView显示取景画面camera.startPreview();//开始预览camera.autoFocus(null);//自动对焦camera.takePicture(null, null, null, jpegCallback);//拍照片camera.stopPreview();//停止预览camera.release();//释放摄像头 c) 需要权限 1&lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt; 小结a) 设置预览显示位置 1setPreviewDisplay(SurfaceHolder holder) 注意：SurfaceView不在前端显示的时候会被销毁，恢复之后会重绘b) 将摄像头拍摄画面显示在SurfaceView中，在此之前可对摄像头进行参数配置，getParameters() 方法可以获取摄像头的相关参数Parameters，调用其内部方法即可进行配置 c) 自动对焦 1autoFocus(AutoFocusCallback cb) 自动对焦是一个异步操作，如果我们向等待自动对焦结束之后才开始拍照，需要传入一个回调对象，在其回调函数中调用拍照方法 d) 拍照 1takePicture(ShutterCallback shutter, PictureCallback raw, PictureCallback jpeg) 拍照也是异步操作，需要通过回调函数来得到拍照之后的数据，注意拍照之后摄像头不回自动回到预览状态，需要重写调用startPreview()方法 1&lt;uses-permission android:name=&quot;android.permission.CAMERA&quot;/&gt; 6. 录像a) 在功能清单文件AndroidManifest.xml中添加音频刻录和照相机权限： 1234&lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot;/&gt;&lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot;/&gt;&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt; b) 编写音频刻录代码: 123456789101112131415recorder.reset();recorder.setVideoSource(MediaRecorder.VideoSource.CAMERA); //设置视频输入源，从照相机采集视频recorder.setAudioSource(MediaRecorder.AudioSource.MIC); //设置音频输入源recorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);//设置输出格式recorder.setVideoSize(320, 240);recorder.setVideoFrameRate(3); //每秒3帧recorder.setVideoEncoder(MediaRecorder.VideoEncoder.H263); //设置视频编码方式recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);//设置音频编码器recorder.setOutputFile(&quot;/mnt/sdcard/ncist.3gp&quot;);//设置输出文件recorder.setPreviewDisplay(surfaceView.getHolder().getSurface());//设置预览显示位置recorder.prepare();//预期准备recorder.start();//开始刻录...recorder.stop();//停止刻录recorder.release(); //刻录完成一定要释放资源 本文链接：http://www.sguotao.com/Android基础-2011-07-09-android-basic-9.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android基础8 服务(Service)]]></title>
      <url>%2FAndroid%E5%9F%BA%E7%A1%80-2011-07-03-android-basic-8.html</url>
      <content type="text"><![CDATA[1. 服务(Service)Android中的服务和windows中的服务是类似的东西，服务一般没有用户操作界面，它运行于系统中不容易被用户发觉，可以使用它开发如监控之类的程序。服务的开发比较简单，如下：第一步：继承Service类 1public class SMSService extends Service &#123; &#125; 第二步：在AndroidManifest.xml文件中的节点里对服务进行配置: 1&lt;service android:name=&quot;.SMSService&quot; /&gt; 服务不能自己运行，需要通过调用Context.startService()或Context.bindService()方法启动服务。这两个方法都可以启动Service，但是它们的使用场合有所不同。 使用startService()方法启用服务,访问者与服务之间没有关连，即使访问者退出了，服务仍然运行。 使用bindService()方法启用服务，访问者与服务绑定在了一起，访问者一旦退出，服务也就终止，大有“不求同时生，必须同时死”的特点。 采用Context.startService()方法启动服务，只能调用Context.stopService()方法结束服务，服务结束时会调用onDestroy()方法。 2. 服务的生命周期服务的生命周期跟启动服务的方法有关： 当采用Context.startService()方法启动服务，与之有关的生命周期方法onCreate() –&gt;onStart() –&gt; onDestroy() onCreate()该方法在服务被创建时调用，该方法只会被调用一次，无论调用多少次startService()或bindService()方法，服务也只被创建一次。 onStart() 只有采用Context.startService()方法启动服务时才会回调该方法。该方法在服务开始运行时被调用。多次调用startService()方法尽管不会多次创建服务，但onStart() 方法会被多次调用。 onDestroy()该方法在服务被终止时调用。 当采用Context.bindService()方法启动服务，与之有关的生命周期方法onCreate() –&gt;onBind() –&gt;onUnbind() –&gt;onDestroy() onBind()只有采用Context.bindService()方法启动服务时才会回调该方法。该方法在调用者与服务绑定时被调用，当调用者与服务已经绑定，多次调用Context.bindService()方法并不会导致该方法被多次调用。 onUnbind()只有采用Context.bindService()方法启动服务时才会回调该方法。该方法在调用者与服务解除绑定时被调用。 如果先采用startService()启动服务,然后调用bindService()方法绑定到服务，再调用unbindService()解除绑定，最后调用bindService()再次绑定到服务。触发的生命周期方法如下：onCreate() –&gt; onStart() –&gt; onBind() –&gt; onUnbind()[重载后的方法需返回true] –&gt; onRebind() 3. 建立能与访问者进行通讯的本地服务通过startService()和stopService()启动关闭服务。适用于服务和访问者之间没有交互的情况。如果服务和访问者之间需要方法调用或传递参数,则需要使用bindService()和unbindService()启动关闭服务。 采用Context.bindService()方法启动服务，在服务未被创建时，系统会先调用服务的onCreate()，接着调用onBind()，这个时候访问者和服务绑定在一起。 如果访问者要与服务进行通信，那么，onBind()必须返回Ibinder对象。如果访问者退出了，系统就会先调用服务的onUnbind()，接着调用onDestroy()。如果调用bindService()方法前服务已经被绑定，多次调用bindService()并不会导致多次创建服务及绑定(也就是说onCreate()和onBind()方法并不会被多次调用)。如果访问者希望与正在绑定的服务解除绑定，可以调用unbindService()，调用该方法也会导致系统调用服务的onUnbind()–&gt;onDestroy() Activity与服务进行通信，开发人员通常把通信方法定义在接口里，然后让Ibinder对象实现该接口，而Activity通过该接口引用服务onBind()返回的Ibinder对象，然后调用Ibinder对象里自定义的通信方法。本例是一个本地服务，即服务与Activity在同一个应用内部。接口： 123public interface ICountService &#123; public int getCount();&#125; 服务类： 123456789101112131415161718192021222324252627282930313233public class CountService extends Service &#123;private boolean quit;private int count;private ServiceBinder serviceBinder = new ServiceBinder();public class ServiceBinder extends Binder implements ICountService &#123; @Override public int getCount() &#123; return count; &#125;&#125;@Overridepublic IBinder onBind(Intent intent) &#123; return serviceBinder;&#125;@Overridepublic void onCreate() &#123; super.onCreate(); new Thread(new Runnable() &#123; @Override public void run() &#123; while (!quit) &#123; try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123;&#125; count++; &#125;&#125; &#125;).start();&#125;@Overridepublic void onDestroy() &#123; super.onDestroy(); this.quit = true;&#125;&#125; 客户端Activity： 123456789101112131415161718192021222324252627public class ClientActivity extends Activity &#123; private ICountService countService; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.main); this.bindService(new Intent(this, CountService.class), this.serviceConnection, BIND_AUTO_CREATE); &#125; @Override protected void onDestroy() &#123; super.onDestroy(); this.unbindService(serviceConnection); &#125; private ServiceConnection serviceConnection = new ServiceConnection() &#123; @Override public void onServiceConnected(ComponentName name, IBinder service) &#123; //对于本地服务，获取的实例和服务onBind()返回的实例是同一个 countService = (ICountService) service; int i = countService.getCount(); Log.v(&quot;CountService&quot;, &quot;Count is &quot; + i); &#125; @Override public void onServiceDisconnected(ComponentName name) &#123; countService = null; &#125; &#125;;&#125; 4. 使用AIDL和远程服务实现进程通信在Android中, 每个应用程序都有自己的进程，当需要在不同的进程之间传递对象时，该如何实现呢? 显然, Java中是不支持跨进程内存共享的。因此要传递对象, 需要把对象解析成操作系统能够理解的数据格式, 以达到跨界对象访问的目的。在JavaEE中，采用RMI通过序列化传递对象。在Android中, 则采用AIDL(Android Interface Definition Language：接口定义语言)方式实现。 AIDL是一种接口定义语言，用于约束两个进程间的通讯规则，供编译器生成代码，实现Android设备上的两个进程间通信(IPC)。AIDL的IPC机制和EJB所采用的CORBA很类似，进程之间的通信信息，首先会被转换成AIDL协议消息，然后发送给对方，对方收到AIDL协议消息后再转换成相应的对象。由于进程之间的通信信息需要双向转换，所以android采用代理类在背后实现了信息的双向转换，代理类由android编译器生成，对开发人员来说是透明的。实现进程通信，一般需要下面步骤： 假设A应用需要与B应用进行通信，调用B应用中的download(String path)方法，B应用以Service方式向A应用提供服务。需要下面步骤: 在B应用中创建*.aidl文件，aidl文件的定义和接口的定义很相类，如：在cn.ncist.aidl包下创建IDownloadService.aidl文件，内容如下： 1234package cn.ncist.aidl;interface IDownloadService &#123; void download(String path);&#125; 当完成aidl文件创建后，eclipse会自动在项目的gen目录中同步生成IDownloadService.java接口文件。 接口文件中生成一个Stub的抽象类，里面包括aidl定义的方法，还包括一些其它辅助方法。值得关注的是asInterface(IBinder iBinder),它返回接口类型的实例，对于远程服务调用，远程服务返回给客户端的对象为代理对象，客户端在onServiceConnected(ComponentName name, IBinder service)引用该对象时不能直接强转成接口类型的实例，而应该使用asInterface(IBinder iBinder)进行类型转换。 编写aidl文件时，需要注意下面几点 接口名和aidl文件名相同 接口和方法前不用加访问权限修饰符public,private,protected等,也不能用final,static aidl默认支持的类型包话java基本类型（int,long,boolean等）和（String,List,Map,CharSequence），使用这些类型时不需要import声明。对于List和Map中的元素类型必须是aidl支持的类型。如果使用自定义类型作为参数或返回值，自定义类型必须实现Parcelable接口。 自定义类型和AIDL生成的其它接口类型在aidl描述文件中，应该显式import，即便在该类和定义的包在同一个包中。 在aidl文件中所有非Java基本类型参数必须加上in、out、inout标记，以指明参数是输入参数、输出参数还是输入输出参数。Java原始类型默认的标记为in,不能为其它标记。 在B应用中实现aidl文件生成的接口（本例是IDownloadService），但并非直接实现接口，而是通过继承接口的Stub来实现（Stub抽象类内部实现了aidl接口），并且实现接口方法的代码。内容如下： 123456public class ServiceBinder extends IDownloadService.Stub &#123; @Override public void download(String path) throws RemoteException &#123; Log.i(&quot;DownloadService&quot;, path); &#125; &#125; 在B应用中创建一个Service（服务），在服务的onBind(Intent intent)方法中返回实现了aidl接口的对象（本例是ServiceBinder）。内容如下： 12345678910111213public class DownloadService extends Service &#123; private ServiceBinder serviceBinder = new ServiceBinder(); @Override public IBinder onBind(Intent intent) &#123; return serviceBinder; &#125; public class ServiceBinder extends IDownloadService.Stub &#123; @Override public void download(String path) throws RemoteException &#123; Log.i(&quot;DownloadService&quot;, path); &#125; &#125;&#125; 其他应用可以通过隐式意图访问服务,意图的动作可以自定义，AndroidManifest.xml配置代码如下： 12345&lt;service android:name=&quot;.DownloadService&quot; &gt; &lt;intent-filter&gt; &lt;action android:name=&quot;cn.ncist.process.aidl.DownloadService&quot; /&gt; &lt;/intent-filter&gt;&lt;/service&gt; 把B应用中aidl文件所在package连同aidl文件一起拷贝到客户端A应用，eclipse会自动在A应用的gen目录中为aidl文件同步生成IDownloadService.java接口文件,接下来就可以在A应用中实现与B应用通信，代码如下： 1234567891011121314151617181920212223242526272829public class ClientActivity extends Activity &#123; private IDownloadService downloadService; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.main); this.bindService(new Intent(&quot;cn.ncist.process.aidl.DownloadService&quot;), this.serviceConnection, BIND_AUTO_CREATE);//绑定到服务 &#125; @Override protected void onDestroy() &#123; super.onDestroy(); this.unbindService(serviceConnection);//解除服务 &#125; private ServiceConnection serviceConnection = new ServiceConnection() &#123; @Override public void onServiceConnected(ComponentName name, IBinder service) &#123; downloadService = IDownloadService.Stub.asInterface(service); try &#123; downloadService.download(&quot;http://www.ncist.cn&quot;); &#125; catch (RemoteException e) &#123; Log.e(&quot;ClientActivity&quot;, e.toString()); &#125; &#125; @Override public void onServiceDisconnected(ComponentName name) &#123; downloadService = null; &#125; &#125;;&#125; 5. 进程间传递自定义类型参数Aidl默认支持的类型包话java基本类型（int、long、boolean等）和（String、List、Map、CharSequence），如果要传递自定义的类型该如何实现呢？要传递自定义类型，首先要让自定义类型支持parcelable协议，实现步骤如下： 自定义类型必须实现Parcelable接口，并且实现Parcelable接口的public void writeToParcel(Parcel dest, int flags)方法 。 自定义类型中必须含有一个名称为CREATOR的静态成员，该成员对象要求实现Parcelable.Creator接口及其方法。 创建一个aidl文件声明你的自定义类型。 Parcelable接口的作用实现了Parcelable接口的实例可以将自身的状态信息（状态信息通常指的是各成员变量的值）写入Parcel，也可以从Parcel中恢复其状态。 Parcel用来完成数据的序列化传递。 进程间传递自定义类型的实现过程如下：a) 创建自定义类型，并实现Parcelable接口,使其支持parcelable协议。如：在cn.ncist.domain包下创建Person.java: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package cn.ncist.domain;import android.os.Parcel;import android.os.Parcelable;public class Person implements Parcelable private Integer id; private String name; public Person()&#123;&#125; public Person(Integer id, String name) &#123; this.id = id; this.name = name; &#125; public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; @Override public int describeContents() &#123; return 0; &#125; @Override public void writeToParcel(Parcel dest, int flags) &#123; //把javanbean中的数据写到Parcel dest.writeInt(this.id); dest.writeString(this.name); &#125; //添加一个静态成员,名为CREATOR,该对象实现了Parcelable.Creator接口 public static final Parcelable.Creator&lt;Person&gt; CREATOR = new Parcelable.Creator&lt;Person&gt;()&#123; @Override public Person createFromParcel(Parcel source) &#123; //从Parcel中读取数据，返回person对象 return new Person(source.readInt(), source.readString()); &#125; @Override public Person[] newArray(int size) &#123; return new Person[size]; &#125; &#125;;&#125; b) 在自定义类型所在包下创建一个aidl文件对自定义类型进行声明，文件的名称与自定义类型同名。 12package cn.ncist.domain;parcelable Person; c) 在接口aidl文件中使用自定义类型,需要使用import显式导入，本例在cn.ncist.aidl包下创建IPersonService.aidl文件，内容如下： 12345package cn.ncist.aidl;import cn.ncist.domain.Person;interface IPersonService &#123; void save(in Person person);&#125; d) 在实现aidl文件生成的接口（本例是IPersonService），但并非直接实现接口，而是通过继承接口的Stub来实现（Stub抽象类内部实现了aidl接口），并且实现接口方法的代码。内容如下： 123456public class ServiceBinder extends IPersonService.Stub &#123; @Override public void save(Person person) throws RemoteException &#123; Log.i(&quot;PersonService&quot;, person.getId()+&quot;=&quot;+ person.getName()); &#125; &#125; e) 创建一个Service（服务），在服务的onBind(Intent intent)方法中返回实现了aidl接口的对象（本例是ServiceBinder）。内容如下： 12345678910111213public class PersonService extends Service &#123; private ServiceBinder serviceBinder = new ServiceBinder(); @Override public IBinder onBind(Intent intent) &#123; return serviceBinder; &#125; public class ServiceBinder extends IPersonService.Stub &#123; @Override public void save(Person person) throws RemoteException &#123; Log.i(&quot;PersonService&quot;, person.getId()+&quot;=&quot;+ person.getName()); &#125; &#125;&#125; 其他应用可以通过隐式意图访问服务,意图的动作可以自定义，AndroidManifest.xml配置代码如下： 12345&lt;service android:name=&quot;.PersonService&quot; &gt; &lt;intent-filter&gt; &lt;action android:name=&quot;cn.ncist.process.aidl.PersonService &quot; /&gt; &lt;/intent-filter&gt;&lt;/service&gt; f) 把应用中的aidl文件和所在package一起拷贝到客户端应用的src目录下，eclipse会自动在客户端应用的gen目录中为aidl文件同步生成IPersonService.java接口文件,接下来再把自定义类型文件和类型声明aidl文件及所在package一起拷贝到客户端应用的src目录下。最后就可以在客户端应用中实现与远程服务的通信，代码如下： 123456789101112131415161718192021222324252627282930public class ClientActivity extends Activity &#123; private IPersonService personService; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.main); this.bindService(new Intent(&quot;cn.ncist.process.aidl.PersonService&quot;), this.serviceConnection, BIND_AUTO_CREATE);//绑定到服务 &#125; @Override protected void onDestroy() &#123; super.onDestroy(); this.unbindService(serviceConnection);//解除服务 &#125; private ServiceConnection serviceConnection = new ServiceConnection() &#123; @Override public void onServiceConnected(ComponentName name, IBinder service) &#123; personService = IPersonService.Stub.asInterface(service); try &#123; personService.save(new Person(56,&quot;liming&quot;)); &#125; catch (RemoteException e) &#123; Log.e(&quot;ClientActivity&quot;, e.toString()); &#125; &#125; @Override public void onServiceDisconnected(ComponentName name) &#123; personService = null; &#125; &#125;;&#125; 6. 监听电话呼叫状态要实现电话窃听，需要监听电话的状态，方法如下： 123456789101112131415161718/* 取得电话服务 */ TelephonyManager telManager = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE); PhoneStateListener listener = new PhoneStateListener()&#123; @Override public void onCallStateChanged(int state, String incomingNumber) &#123; switch (state)&#123; case TelephonyManager.CALL_STATE_IDLE: /* 无任何状态时 */ break; case TelephonyManager.CALL_STATE_OFFHOOK: /* 接起电话时 */ break; case TelephonyManager.CALL_STATE_RINGING: /* 电话进来时 */ break; &#125; super.onCallStateChanged(state, incomingNumber); &#125; &#125;;//监听电话的状态telManager.listen(listener, PhoneStateListener.LISTEN_CALL_STATE); 在清单文件AndroidManifest.xml中添加权限： 1&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot;/&gt; 7. 结束通话实现黑名单拦截Android没有对外公开结束通话的API，如果需要结束通话，必须使用AIDL与电话管理服务进行通信，并调用服务中的API实现结束通话，方法如下： a) 从Android的源代码中拷贝以下文件到项目中，开发工具会在gen目录下自动生成ITelephony.javacom.android.internal.telephony包下的ITelephony.aidlandroid.telephony包下的NeighboringCellInfo.aidl注意：需要在项目中建立对应的包名存放上述两个aidl文件 b) 调用ITelephony.endCall()结束通话： 1234Method method = Class.forName(&quot;android.os.ServiceManager&quot;).getMethod(&quot;getService&quot;, String.class);IBinder binder = (IBinder)method.invoke(null, new Object[]&#123;TELEPHONY_SERVICE&#125;);ITelephony telephony = ITelephony.Stub.asInterface(binder);telephony.endCall(); 在清单文件AndroidManifest.xml中添加权限： 1&lt;uses-permission android:name=&quot;android.permission.CALL_PHONE&quot; /&gt; 8. 电话录音12345678910111213141516171819202122232425262728293031323334TelephonyManager manager = (TelephonyManager) getSystemService(TELEPHONY_SERVICE);manager.listen(new MyListener(), PhoneStateListener.LISTEN_CALL_STATE);private final class MyListener extends PhoneStateListener &#123; private String num; private MediaRecorder recorder; public void onCallStateChanged(int state, String incomingNumber) &#123; switch (state) &#123; case TelephonyManager.CALL_STATE_RINGING: num = incomingNumber; break; case TelephonyManager.CALL_STATE_OFFHOOK: try &#123; File file = new File(Environment.getExternalStorageDirectory(), num + &quot;_&quot; + System.currentTimeMillis() + &quot;.3gp&quot;); recorder = new MediaRecorder(); recorder.setAudioSource(AudioSource.MIC); recorder.setOutputFormat(OutputFormat.THREE_GPP); recorder.setAudioEncoder(AudioEncoder.AMR_NB); recorder.setOutputFile(file.getAbsolutePath()); recorder.prepare(); recorder.start(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; break; case TelephonyManager.CALL_STATE_IDLE: if (recorder != null) &#123; recorder.stop(); recorder.release(); &#125; break; &#125; &#125;&#125; 本文链接：http://www.sguotao.com/Android基础-2011-07-03-android-basic-8.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android基础7 广播接收者(BroadcastReceiver)]]></title>
      <url>%2FAndroid%E5%9F%BA%E7%A1%80-2011-06-28-android-basic-7.html</url>
      <content type="text"><![CDATA[1. 广播的类型广播被分为两种不同的类型：普通广播（Normal broadcasts）和“有序广播（Ordered broadcasts）。普通广播是完全异步的，可以在同一时刻（逻辑上）被所有接收者接收到，消息传递的效率比较高，但缺点是：接收者不能将处理结果传递给下一个接收者，并且无法终止广播Intent的传播； 有序广播是按照接收者声明的优先级别，被接收者依次接收广播。如A的级别高于B,B的级别高于C,那么，广播先传给A，再传给B，最后传给C 。优先级别声明在intent-filter元素的android:priority属性中，数越大优先级别越高,取值范围:-1000到1000，优先级别也可以调用IntentFilter对象的setPriority()进行设置 。有序广播的接收者可以终止广播Intent的传播，广播Intent的传播一旦终止，后面的接收者就无法接收到广播。另外，有序广播的接收者可以将数据传递给下一个接收者，如A得到广播后，可以往它的结果对象中存入数据，当广播传给B时,B可以从A的结果对象中得到A存入的数据。1234//发送的是普通广播，所有订阅者都有机会获得并进行处理。Context.sendBroadcast()//发送有序广播Context.sendOrderedBroadcast() 发送的是有序广播，系统会根据接收者声明的优先级别按顺序逐个执行接收者，前面的接收者有权终止广播(BroadcastReceiver.abortBroadcast())，如果广播被前面的接收者终止，后面的接收者就再也无法获取到广播。对于有序广播，前面的接收者可以将数据通过setResultExtras(Bundle)方法存放进结果对象，然后传给下一个接收者，下一个接收者通过代码：Bundle bundle = getResultExtras(true))可以获取上一个接收者存入在结果对象中的数据。 系统收到短信，发出的广播属于有序广播。如果想阻止用户收到短信，可以通过设置优先级，让你们自定义的接收者先获取到广播，然后终止广播，这样用户就接收不到短信了。 2. 定义广播接收者广播接收者（BroadcastReceiver）用于接收广播Intent，广播Intent的发送是通过调用Context.sendBroadcast()、Context.sendOrderedBroadcast()来实现的。通常一个广播Intent可以被订阅了此Intent的多个广播接收者所接收，这个特性跟JMS中的Topic消息接收者类似。要实现一个广播接收者方法如下：第一步：继承BroadcastReceiver，并重写onReceive()方法。1234public class IncomingSMSReceiver extends BroadcastReceiver &#123; @Override public void onReceive(Context context, Intent intent) &#123; &#125;&#125; 第二步：订阅感兴趣的广播Intent，订阅方法有两种：12345678910//1.使用代码进行订阅IntentFilter filter = new IntentFilter(&quot;android.provider.Telephony.SMS_RECEIVED&quot;);IncomingSMSReceiver receiver = new IncomingSMSReceiver();registerReceiver(receiver, filter);//2.在AndroidManifest.xml文件中的&lt;application&gt;节点里进行订阅:&lt;receiver android:name=&quot;.IncomingSMSReceiver&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.provider.Telephony.SMS_RECEIVED&quot;/&gt; &lt;/intent-filter&gt;&lt;/receiver&gt; 3. 发送广播（无序广播和有序广播的比较）3.1 无序广播 使用sendBroadcast方法发送 被所有广播接收者接收，无序，不可中断 广播时可设置接收者权限，仅当接收者含有权限才能接收 接收者的也可设置发送方权限，只接收含有权限应用的广播 3.2 有序广播 使用sendOrderedBroadcast方法发送 接收者可以在中定义android:priority定义优先级，数字越大优先级越高 被各个广播接收者逐个接收，中途可以中断或者添加数据 12abortBroadcast() getResultExtras(true).putString(&quot;data&quot;, &quot;新增数据&quot;); 4. 监听短信接收当系统收到短信时，会发出一个广播Intent，Intent的action名称为android.provider.Telephony.SMS_RECEIVED，该Intent存放了系统接收到的短信内容，我们使用名称“pdus”即可从Intent中获取到短信内容。 1234567891011121314151617public class IncomingSMSReceiver extends BroadcastReceiver &#123;private static final String SMS_RECEIVED = &quot;android.provider.Telephony.SMS_RECEIVED&quot;;@Override public void onReceive(Context context, Intent intent) &#123;if (intent.getAction().equals(SMS_RECEIVED)) &#123; SmsManager sms = SmsManager.getDefault(); Bundle bundle = intent.getExtras(); if (bundle != null) &#123; Object[] pdus = (Object[]) bundle.get(&quot;pdus&quot;); SmsMessage[] messages = new SmsMessage[pdus.length]; for (int i = 0; i &lt; pdus.length; i++) messages[i] = SmsMessage.createFromPdu((byte[]) pdus[i]); for (SmsMessage message : messages)&#123; String msg = message.getMessageBody(); String to = message.getOriginatingAddress(); sms.sendTextMessage(to, null, msg, null, null);&#125;&#125;&#125;&#125;&#125; 在AndroidManifest.xml文件中的节点里对接收到短信的广播Intent进行订阅。 12345&lt;receiver android:name=&quot;.IncomingSMSReceiver&quot;&gt; &lt;intent-filter&gt; &lt;actionandroid:name=&quot;android.provider.Telephony.SMS_RECEIVED&quot;/&gt; &lt;/intent-filter&gt;&lt;/receiver&gt; 在AndroidManifest.xml文件中添加以下权限： 12&lt;uses-permission android:name=&quot;android.permission.RECEIVE_SMS&quot;/&gt;&lt;!-- 接收短信权限 --&gt;&lt;uses-permission android:name=&quot;android.permission.SEND_SMS&quot;/&gt;&lt;!-- 发送短信权限 --&gt; Android系统在收到短信的时候会发送一条有序广播，我们如果定义一个接收者接收这个广播，就可以得到短信内容，也可以拦截短信。 定义广播接收者接收广播 在onReceive方法内部调用Intent的getExtras()获取其中pdus字段，得到一个Object[]，其中每 一个 元素都是一个byte[]。 通过SmsMessage类的createFromPdu方法创建SmsMessage对象 从SmsMessage对象中即可获取发送者号码、短信内容、发送时间等信息 需要接收短信权限： 1&lt;uses-permission android:name=&quot;android.permission.RECEIVE_SMS&quot;/&gt; Android系统中收到短信的通知是一个有序通知，我们如需拦截垃圾短信，可以配置较高的priority，收到信息进行判断是否abortBroadcast()。除了短信到来广播Intent，Android还有很多广播Intent，如：开机启动、电池电量变化、时间已经改变等广播Intent。接收电池电量变化广播Intent ，在AndroidManifest.xml文件中的节点里订阅此Intent 12345&lt;receiver android:name=&quot;.IncomingSMSReceiver&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.BATTERY_CHANGED&quot;/&gt; &lt;/intent-filter&gt;&lt;/receiver&gt; 接收开机启动广播Intent，在AndroidManifest.xml文件中的节点里订阅此Intent: 12345&lt;receiver android:name=&quot;.IncomingSMSReceiver&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot;/&gt; &lt;/intent-filter&gt;&lt;/receiver&gt; 并且要进行权限声明： 1&lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;/&gt; 5. 监听呼出电话向外拨打电话时系统会发出一个有序广播，虽然该广播最终会被拔号器里的广播接收者所接收并实现电话拔打，但我们可以在广播传递给拔号广播接收者之前先得到该广播，然后清除传递给拔号广播接收者的电话号码，在拔号广播接收者接收到该广播时，由于电话号码为null，因此取消电话拔打。 123456789public class OutgoingCallReceiver extends BroadcastReceiver &#123; public void onReceive(Context context, Intent intent) &#123; //清除电话，广播被传给系统的接收者后，因为电话为null，取消电话拔打 setResultData(null); // 同样如果你想修改外拔的电话号码，可以这样做 // String phone = getResultData();//得到外拔电话 // setResultData(“12593”+ phone);//在电话前面加上12593 &#125;&#125; a) 接收外拔电话广播Intent，在AndroidManifest.xml文件中的节点里订阅此Intent。 12345&lt;receiver android:name=&quot;.OutgoingCallReceiver&quot;&gt; &lt;intent-filter android:priority=&quot;1&quot;&gt; &lt;action android:name=&quot;android.intent.action.NEW_OUTGOING_CALL&quot;/&gt; &lt;/intent-filter&gt;&lt;/receiver&gt; b) 并且要进行权限声明： 1&lt;uses-permission android:name=&quot;android.permission.PROCESS_OUTGOING_CALLS&quot;/&gt; 在onReceive方法中使用getResultData() 和 setResultData() 方法获取和设置电话号码 6. 生命周期 广播接收者的生命周期是非常短暂的，在接收到广播的时候创建，onReceive()方法结束之后销毁 广播接收者中不要做一些耗时的工作，耗时的较长的工作最好放在服务中完成，否则会弹出Application No Response错误对话框 最好也不要在广播接收者中创建子线程做耗时的工作，因为广播接收者被销毁后进程就成为了空进程，很容易被系统杀掉。 本文链接：http://www.sguotao.com/Android基础-2011-06-28-android-basic-7.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android基础6 活动(Activity)]]></title>
      <url>%2FAndroid%E5%9F%BA%E7%A1%80-2011-06-27-android-basic-6.html</url>
      <content type="text"><![CDATA[1. 创建Activity1.1 定义Activity定义类继承Activity123456public class NewActivity extends Activity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); //这里可以使用setContentView(R.layout.xxx)显示某个视图.... &#125;&#125; 在AndroidManifest.xml的节点中声明12345678&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; package=&quot;cn.ncist.action&quot; android:versionCode=&quot;1&quot; android:versionName=&quot;1.0&quot;&gt; &lt;application android:icon=&quot;@drawable/icon&quot; android:label=&quot;@string/app_name&quot;&gt; ..... &lt;activity android:name=&quot;.NewActivity&quot; android:label=&quot;新activity的页面标题&quot;/&gt; &lt;/application&gt; ...&lt;/manifest&gt; android:name属性值的前面加了一个点表示NewActivity是当前包cn.ncist.action下的类，如果类在应用的当前包下，可以省略点符号，如果类在应用的子包下必须加点，如：NewActivity类在cn.ncist.action.user包下可以这样写： 1.2 显式意图创建方式 构造函数，代码少new Intent(this, NewActivity.class); 类名形式，灵活，可扩展性强intent.setClassName(this, “cn.ncist.activity.NewActivity”); 包名类名形式，可启动其他程序中的Activityintent.setClassName(“cn.ncist.downloader”, “cn.ncist.downloader.MainActivity”); 1.3 创建Activity并传递数据 在意图对象中封装了一个Bundle对象，可以用来携带数据 在新Activity中可以获得意图对象以获取其中Bundle保存的数据123456789101112131415161718192021public class MainActivity extends Activity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; ....... button.setOnClickListener(new View.OnClickListener()&#123;//点击该按钮会打开一个新的Activity public void onClick(View v) &#123; Intent intent = new Intent(MainActivity.this, NewActivity.class)Bundle bundle = new Bundle();//该类用作携带数据bundle.putString(&quot;name&quot;, &quot;华北科技&quot;);bundle.putInt(&quot;age&quot;, 4);intent.putExtras(bundle);//附带上额外的数据startActivity(intent); &#125;&#125;); &#125;&#125;public class NewActivity extends Activity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; ........ Bundle bundle = this.getIntent().getExtras(); String name = bundle.getString(&quot;name&quot;); int age = bundle.getInt(&quot;age&quot;); &#125;&#125; 1.4 创建Activity获取返回数据 使用startActivityForResult(Intent intent, int requestCode) 方法打开Activity 重写onActivityResult(int requestCode, int resultCode, Intent data) 方法 新Activity中调用setResult(int resultCode, Intent data) 设置返回数据之后，关闭Activity就会调用onActivityResult方法 1.5 隐式意图创建Activity 显式意图是指在创建意图时指定了组件，而隐式意图则不指定组件，通过动作、类型、数据匹配对应的组件 在清单文件中定义时需要定义才能被隐式意图启动 中至少配置一个和一个，否则无法被启动 Intent对象中设置的action、category、data在必须全部包含才能启动 中的、、都可以配置多个，Intent对象中不用全部匹配，每样匹配一个即可启动如果一个意图可以匹配多个Activity，Android系统会提示选择 2. Bundle类的作用Bundle类用作携带数据，它类似于Map，用于存放key-value名值对形式的值。相对于Map，它提供了各种常用类型的putXxx()/getXxx()方法，如:putString()/getString()和putInt()/getInt()，putXxx()用于往Bundle对象放入数据，getXxx()方法用于从Bundle对象里获取数据。Bundle的内部实际上是使用了HashMap类型的变量来存放putXxx()方法放入的值：12345678910111213141516public final class Bundle implements Parcelable, Cloneable &#123; ...... Map&lt;String, Object&gt; mMap; public Bundle() &#123; mMap = new HashMap&lt;String, Object&gt;(); ...... &#125; public void putString(String key, String value) &#123; mMap.put(key, value); &#125;public String getString(String key) &#123; Object o = mMap.get(key); return (String) o; ........//类型转换失败后会返回null，这里省略了类型转换失败后的处理代码&#125;&#125; 在调用Bundle对象的getXxx()方法时，方法内部会从该变量中获取数据，然后对数据进行类型转换，转换成什么类型由方法的Xxx决定，getXxx()方法会把转换后的值返回。 3. Intent意图Android基本的设计理念是鼓励减少组件间的耦合，因此Android提供了Intent (意图) ，Intent提供了一种通用的消息系统，它允许在你的应用程序与其它的应用程序间传递Intent来执行动作和产生事件。使用Intent可以激活Android应用的三个核心组件：活动、服务和广播接收器。 Intent可以划分成显式意图和隐式意图显式意图：调用Intent.setComponent()或Intent.setClass()方法明确指定了组件名的Intent为显式意图，显式意图明确指定了Intent应该传递给哪个组件。隐式意图:没有明确指定组件名的Intent为隐式意图。 Android系统会根据隐式意图中设置的动作(action)、类别(category)、数据（URI和数据类型）找到最合适的组件来处理这个意图。12345678910&lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.CALL&quot; /&gt; &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt; &lt;data android:scheme=&quot;tel&quot; /&gt; &lt;/intent-filter&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.CALL&quot; /&gt; &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt; &lt;data android:mimeType=&quot;vnd.android.cursor.item/phone&quot; /&gt; &lt;/intent-filter&gt; 对于隐式意图，Android是怎样寻找到这个最合适的组件呢？记的前面我们在定义活动时，指定了一个intent-filter，Intent Filter（意图过滤器）其实就是用来匹配隐式Intent的，当一个意图对象被一个意图过滤器进行匹配测试时，只有三个方面会被参考到：动作、数据（URI以及数据类型）和类别。 动作测试（Action test）一个意图对象只能指定一个动作名称，而一个过滤器可能列举多个动作名称。如果意图对象或过滤器没有指定任何动作，结果将如下： 如果过滤器没有指定任何动作，那么将阻塞所有的意图，因此所有的意图都会测试失败。没有意图能够通过这个过滤器。 另一方面，只要过滤器包含至少一个动作，一个没有指定动作的意图对象自动通过这个测试 类别测试（Category test）对于一个能够通过类别匹配测试的意图，意图对象中的类别必须匹配过滤器中的类别。这个过滤器可以列举另外的类别，但它不能遗漏在这个意图中的任何类别。原则上一个没有类别的意图对象应该总能够通过匹配测试，而不管过滤器里有什么。大部分情况下这个是对的。但有一个例外，Android把所有传给startActivity()的隐式意图当作他们包含至少一个类别：”android.intent.category.DEFAULT” （CATEGORY_DEFAULT常量）。 因此，想要接收隐式意图的活动必须在它们的意图过滤器中包含”android.intent.category.DEFAULT”。（带”android.intent.action.MAIN”和”android.intent.category.LAUNCHER”设置的过滤器是例外） 数据测试（Data test）当一个意图对象中的URI被用来和一个过滤器中的URI比较时，比较的是URI的各个组成部分。例如，如果过滤器仅指定了一个scheme，所有该scheme的URIs都能够和这个过滤器相匹配；如果过滤器指定了一个scheme、主机名但没有路经部分，所有具有相同scheme和主机名的URIs都可以和这个过滤器相匹配，而不管它们的路经；如果过滤器指定了一个scheme、主机名和路经，只有具有相同scheme、主机名和路经的URIs才可以和这个过滤器相匹配。当然，一个过滤器中的路径规格可以包含通配符，这样只需要部分匹配即可。 数据测试同时比较意图对象和过滤器中指定的URI和数据类型。规则如下： 一个既不包含URI也不包含数据类型的意图对象仅在过滤器也同样没有指定任何URIs和数据类型的情况下才能通过测试。 一个包含URI但没有数据类型的意图对象仅在它的URI和一个同样没有指定数据类型的过滤器里的URI匹配时才能通过测试。这通常发生在类似于mailto:和tel：这样的URIs上：它们并不引用实际数据。 一个包含数据类型但不包含URI的意图对象仅在这个过滤器列举了同样的数据类型而且也没有指定一个URI的情况下才能通过测试。 一个同时包含URI和数据类型（或者可从URI推断出数据类型）的意图对象可以通过测试，如果它的类型和过滤器中列举的类型相匹配的话。如果它的URI和这个过滤器中的一个URI相匹配或者它有一个内容content:或者文件file: URI而且这个过滤器没有指定一个URI，那么它也能通过测试。换句话说，一个组件被假定为支持content:和file: 数据如果它的过滤器仅列举了一个数据类型。 为Intent附加数据的两种形式：第一种写法，用于批量添加数据到Intent：1234Intent intent = new Intent();Bundle bundle = new Bundle();//该类用作携带数据bundle.putString(&quot;name&quot;, &quot;华北科技&quot;);intent.putExtras(bundle);//为意图追加额外的数据，意图原来已经具有的数据不会丢失，但key同名的数据会被替换 第二种写法：这种写法的作用等价于上面的写法，只不过这种写法是把数据一个个地添加进Intent，这种写法使用起来比较方便，而且只需要编写少量的代码。12Intent intent = new Intent();intent.putExtra(&quot;name&quot;, &quot;华北科技&quot;); Intent提供了各种常用类型重载后的putExtra()方法，如： putExtra(String name, String value)、 putExtra(String name, long value)，在putExtra()方法内部会判断当前Intent对象内部是否已经存在一个Bundle对象，如果不存在就会新建Bundle对象，以后调用putExtra()方法传入的值都会存放于该Bundle对象，下面是Intent的putExtra(String name, String value)方法代码片断：123456789public class Intent implements Parcelable &#123;private Bundle mExtras;public Intent putExtra(String name, String value) &#123; if (mExtras == null) &#123; mExtras = new Bundle(); &#125; mExtras.putString(name, value); return this; &#125; 4. 生命周期Acitivity三种状态 运行：activity在屏幕最前端运行（位于当前任务栈的顶部） 暂停：当它上面有另外一个Activity，使它失去了焦点但任然对用户可见时，它处于暂停状态，在它之上的Activity没有完全覆盖屏幕或者是透明的，被暂停的Activity仍然对用户可见，并且是存活状态（它保留着所有的状态和成员信息并保持和窗口管理器的连接）。如果系统处于内存不足时，会杀死这个Activity。 停止：activity不可见，完全被覆盖，它仍然保留着所有的状态和成员信息，然而对用户是不可见的，所以它的窗口被隐藏，如果其它地方需要内存，则系统经常会杀死这个Activity。 生命周期相关方法当Activity从一种状态转变到另外一种状态时，会调用以下保护方法来通知这种变化。 onCreate：创建时调用，或者程序在暂停、停止状态下被杀死之后重新打开时也会调用 onStart：onCreate之后或者从停止状态恢复时调用 onResume：onStart之后或者从暂停状态恢复时调用，从停止状态恢复时由于调用onStart，也会调用onResume onPause：进入暂停、停止状态，或者销毁时会调用 onStop：进入停止状态，或者销毁时会调用 onDestroy：销毁时调用 onRestart：从停止状态恢复时调用这七个方法定义了Activity的完整的声明周期。 Activity的完整声明周期自第一次调用onCreate()开始，直至调用onDestroy()为止。Activity在onCreate()中设置所有“全局”状态以完成初始化，而在onDestroy()中释放所有系统资源。 Activity的可视声明周期自onStart()调用开始直到相应的onStop()调用结束，在此期间，用户可以在屏幕上看到Activity，尽管它也许并不是位于前台或者也不予用户进行交互，在这两个方法之间，可以保留用来向用户显示这个Activity所需的资源。 Activity的前台声明周期自onResume()调用起，至相应的onPause()调用为止，在此期间，Activity位于前台最上面并于用户进行交互。Activity会经常在暂停和恢复之间进行状态转换。 Activity的前台生命周期循环例子: 创建一个Activity，添加七个生命周期方法，方法内输出各个方法名称。再添加一个按钮用于打开下面新添加的Activity。 startActivity(new Intent(LifeActivity.this, CustomDialogActivity.class)); 添加一个新Activity，代码如下：123456789public class CustomDialogActivity extends Activity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); //必须在调用setContentView()之前调用requestWindowFeature() requestWindowFeature(Window.FEATURE_LEFT_ICON);//要标题栏显示图标 setContentView(R.layout.dialog_activity); getWindow().setFeatureDrawableResource(Window.FEATURE_LEFT_ICON, android.R.drawable.ic_dialog_alert);//设置图标 &#125;&#125; 在AndroidManifest.xml文件配置Activity，并且通过主题指定该Activity以对话框样式显示。12345&lt;application android:icon=&quot;@drawable/icon&quot; android:label=&quot;@string/app_name&quot;&gt; ..... &lt;activity android:name=&quot;.CustomDialogActivity&quot; android:label=&quot;对话框activity&quot; android:theme=&quot;@android:style/Theme.Dialog&quot;/&gt; &lt;/application&gt; 5. 保存信息相关方法Activity的 onSaveInstanceState() 和 onRestoreInstanceState()并不是生命周期方法，它们不同于 onCreate()、onPause()等生命周期方法，它们并不一定会被触发。当应用遇到意外情况（如：内存不足、用户直接按Home键）由系统销毁一个Activity时，onSaveInstanceState() 会被调用。但是当用户主动去销毁一个Activity时，例如在应用中按返回键，onSaveInstanceState()就不会被调用。因为在这种情况下，用户的行为决定了不需要保存Activity的状态。通常onSaveInstanceState()只适合用于保存一些临时性的状态，而onPause()适合用于数据的持久化保存。 另外，当屏幕的方向发生了改变， Activity会被摧毁并且被重新创建，如果你想在Activity被摧毁前缓存一些数据，并且在Activity被重新创建后恢复缓存的数据。可以重写Activity的 onSaveInstanceState() 和 onRestoreInstanceState()方法，如下：1234567891011public class PreferencesActivity extends Activity &#123; private String name; protected void onRestoreInstanceState(Bundle savedInstanceState) &#123; name = savedInstanceState.getString(&quot;name&quot;); //被重新创建后恢复缓存的数据 super.onRestoreInstanceState(savedInstanceState); &#125; protected void onSaveInstanceState(Bundle outState) &#123; outState.putString(&quot;name&quot;, &quot;liming&quot;);//被摧毁前缓存一些数据 super.onSaveInstanceState(outState); &#125;&#125; onSaveInstanceState()：在Activity被动的摧毁或停止的时候调用，用于保存运行数据，可以将数据存在在Bundle中。onRestoreInstanceState()：该方法在Activity被重新绘制的时候调用，例如改变屏幕方向，savedInstanceState为onSaveInstanceState保存的数据。 横竖屏幕的切换默认情况下，当“屏幕方向”或“键盘显示隐藏” 变化时都会销毁当前Activity，创建新的Activity。如果不希望重新创建Activity实例，可以按如下配置Activity：1&lt;activity android:name=&quot;.MainActivity&quot; android:configChanges=&quot;keyboardHidden|orientation&quot;&gt; 上面的android:configChanges属性指定了要捕获“屏幕方向”和“键盘显示隐藏”变化，当捕获到这些变化后会调用Activity的onConfigurationChanged()方法。默认情况下(没有配置android:configChanges属性)： 竖屏切横屏，销毁当前Activity之后，创建一个新Activity实例。 横屏切竖屏，销毁当前Activity之后，创建一个新Activity实例，新的Activity实例很快就被销毁，接着又会创建一个新Activity实例。如果只希望创建一个实例，可以配置android:configChanges=”orientation” 6. 得到新打开的Activity关闭后返回的数据如果你想在Activity中得到新打开Activity 关闭后返回的数据，你需要使用系统提供的startActivityForResult(Intent intent, int requestCode)方法打开新的Activity，新的Activity 关闭后会向前面的Activity 传回数据，为了得到传回的数据，你必须在前面的Activity中重写onActivityResult(int requestCode, int resultCode, Intent data)方法：123456789101112131415161718public class MainActivity extends Activity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; ....... Button button =(Button) this.findViewById(R.id.button); button.setOnClickListener(new View.OnClickListener()&#123;//点击该按钮会打开一个新的Activity public void onClick(View v) &#123; //第二个参数为请求码，可以根据业务需求自己编号 startActivityForResult (new Intent(MainActivity.this, NewActivity.class), 1); &#125;&#125;); &#125; //第一个参数为请求码，即调用startActivityForResult()传递过去的值 //第二个参数为结果码，结果码用于标识返回数据来自哪个新Activity @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123; String result = data.getExtras().getString(“result”));//得到新Activity 关闭后返回的数据 &#125;&#125; 当新Activity关闭后，新Activity返回的数据通过Intent进行传递，android平台会调用前面Activity 的onActivityResult()方法，把存放了返回数据的Intent作为第三个输入参数传入，在onActivityResult()方法中使用第三个输入参数可以取出新Activity返回的数据。 使用startActivityForResult(Intent intent, int requestCode)方法打开新的Activity，新Activity关闭前需要向前面的Activity返回数据需要使用系统提供的setResult(int resultCode, Intent data)方法实现：12345678910111213public class NewActivity extends Activity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; ...... button.setOnClickListener(new View.OnClickListener()&#123; public void onClick(View v) &#123; Intent intent = new Intent();//数据是使用Intent返回 intent.putExtra(“result”, “华北科技的学生很可爱”);//把返回数据存入Intent NewActivity.this.setResult(RESULT_OK, intent);//设置返回数据 NewActivity.this.finish();//关闭Activity &#125;&#125;); &#125;&#125; setResult()方法的第一个参数值可以根据业务需要自己定义，上面代码中使用到的RESULT_OK是系统Activity类定义的一个常量，值为-1，代码片断如下：12345public class android.app.Activity extends ......&#123; public static final int RESULT_CANCELED = 0; public static final int RESULT_OK = -1; public static final int RESULT_FIRST_USER = 1;&#125; 请求码的作用使用startActivityForResult(Intent intent, int requestCode)方法打开新的Activity，我们需要为startActivityForResult()方法传入一个请求码(第二个参数)。请求码的值是根据业务需要由自已设定，用于标识请求来源。 例如：一个Activity有两个按钮，点击这两个按钮都会打开同一个Activity，不管是那个按钮打开新Activity，当这个新Activity关闭后，系统都会调用前面Activity的onActivityResult(int requestCode, int resultCode, Intent data)方法。在onActivityResult()方法如果需要知道新Activity是由那个按钮打开的，并且要做出相应的业务处理，这时可以这样做：123456789101112131415161718192021 @Override public void onCreate(Bundle savedInstanceState) &#123; .... button1.setOnClickListener(new View.OnClickListener()&#123; public void onClick(View v) &#123; startActivityForResult (new Intent(MainActivity.this, NewActivity.class), 1); &#125;&#125;); button2.setOnClickListener(new View.OnClickListener()&#123; public void onClick(View v) &#123; startActivityForResult (new Intent(MainActivity.this, NewActivity.class), 2); &#125;&#125;); @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123; switch(requestCode)&#123; case 1: //来自按钮1的请求，作相应业务处理 case 2: //来自按钮2的请求，作相应业务处理 &#125; &#125;&#125; 结果码的作用在一个Activity中，可能会使用startActivityForResult()方法打开多个不同的Activity处理不同的业务，当这些新Activity关闭后，系统都会调用前面Activity的onActivityResult(int requestCode, int resultCode, Intent data)方法。为了知道返回的数据来自于哪个新Activity，在onActivityResult()方法中可以这样做(ResultActivity和NewActivity为要打开的新Activity)：1234567891011121314151617181920public class ResultActivity extends Activity &#123; ..... ResultActivity.this.setResult(1, intent); ResultActivity.this.finish();&#125;public class NewActivity extends Activity &#123; ...... NewActivity.this.setResult(2, intent); NewActivity.this.finish();&#125;public class MainActivity extends Activity &#123; // 在该Activity会打开ResultActivity和NewActivity @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123; switch(resultCode)&#123; case 1: // ResultActivity的返回数据 case 2: // NewActivity的返回数据 &#125; &#125;&#125; 7. 内存管理Android系统在运行多个进程时，如果系统资源不足，会强制结束一些进程。优先选择哪个进程来结束是有优先级的。以下顺序靠上的优先结束 空：进程中所有Activity都已销毁 后台：进程中有一个停止状态的Activity 服务：进程中一个运行中的Service 可见：进程中有一个暂停状态的Activity 前台：进程中正在运行一个Activity 8. 应用的响应性ANR在Android中，应用的响应性被活动管理器（Activity Manager）和窗口管理器（Window Manager）这两个系统服务所监视。当用户触发了输入事件（如键盘输入，点击按钮等），如果应用5秒内没有响应用户的输入事件，那么，Android会认为该应用无响应，便弹出ANR（Application No Response）对话框。 在正常情况下，Android程序会在一条单线程里运行。如果Activity要处理一件比较耗时的工作，应该交给子线程完成，否侧会因为主线程被阻塞，后面的用户输入事件因没能在5秒内响应，导致应用出现ANR对话框。 9. 姻缘属性affinities应用场景：有两个android应用程序：旅游应用.apk，天气查询.apk，在Activity中配置 android:allowTaskReparenting=”true” android:taskAffinity=”tianqi”会将两个Activity放在同一个task任务栈，可以减少上下文切换到开销，节省资源。 10.启动模式在AndroidManifest.xml中的标签中可以配置android:launchMode属性，用来控制Actvity的启动模式在Android系统中我们创建的Acitivity是以栈的形式呈现的(task 任务栈) 一个应用程序可能包涵多个activity ,这些activity都是被放置在任务栈中的。可以把一个应用程序理解成一组任务的集合,即用户看到的界面(activity) 是被放置在任务栈当中的。 standard：默认的启动模式，每次调用startActivity()启动时都会创建一个新的Activity放在栈顶 singleTop：如果启动的Activity时，指定Activity不在栈顶就创建，如在栈顶，则不再创建，去调用onNewIntent()的方法。应用场景如浏览器的书签 ( bookmark ) 采用了该启动模式，不让用 户多次退出同一书签，增强用户的操作体验, singleTask：如果启动的Activity不存在就创建，如果存在直接跳转到指定的Activity所在位置，保证了当前的task栈中只有一个任务的实例 singleInstance：如果启动的Activity不存在就创建，如果存在就将指定的Activity移动到栈顶，开启一个新的task任务栈，用来维护新打开的Activity，原来的Activity中维护对其引用； task任务栈，应用程序和进程之间关系 task任务栈：用来维护一组Activity的集合，通过设置task,可以更加合理的管理Activity; 应用程序：应用程序可以分为可见和不可见两种，可见的应用程序可以理解成一组任务的集合（Activity），不可见部分包括其它三大组件； 进程：操作系统的概念，开启的应用程序都会开启一个进程 本文链接：http://www.sguotao.com/Android基础-2011-06-27-android-basic-6.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android基础5 网络通信]]></title>
      <url>%2FAndroid%E5%9F%BA%E7%A1%80-2011-06-15-android-basic-5.html</url>
      <content type="text"><![CDATA[1. 获取网络图片 通过URL对象封装地址，打开一个HttpURLConnection 设置超时时间以及请求方式 获取相应码，如果成功返回200即可从HttpURLConnection中获取输入流读取数据 通过BitmapFactory的decodeByteArray(byte[] data, int offset, int length)方法将数据转换为图片对象 需要访问网络的权限 1234567891011121314151617URL url = new URL(&quot;http://photocdn.sohu.com/20100125/Img269812337.jpg&quot;);HttpURLConnection conn = (HttpURLConnection) url.openConnection();conn.setConnectTimeout(5* 1000);conn.setRequestMethod(&quot;GET&quot;);if (conn.getResponseCode() != 200) throw new RuntimeException(&quot;请求url失败&quot;);InputStream is = conn.getInputStream();readAsFile(is, &quot;Img269812337.jpg&quot;); public static void readAsFile(InputStream inSream, File file) throws Exception&#123; FileOutputStream outStream = new FileOutputStream(file); byte[] buffer = new byte[1024]; int len = -1; while( (len = inSream.read(buffer)) != -1 )&#123; outStream.write(buffer, 0, len); &#125; outStream.close(); inSream.close();&#125; 2. 获取HTML代码 和获取图片相同，使用URL封装路径，打开一个HttpURLConnection 设置头信息之后获取相应码，从输入流中获取数据 需要获取服务器端代码的编码 代码过长屏幕显示不全可以使用进行显示1234567891011121314151617181920URL url = new URL(&quot;http://www.sohu.com&quot;);HttpURLConnection conn = (HttpURLConnection) url.openConnection();conn.setConnectTimeout(5* 1000);//设置连接超时conn.setRequestMethod(“GET”);//以get方式发起请求if (conn.getResponseCode() != 200) throw new RuntimeException(&quot;请求url失败&quot;);InputStream is = conn.getInputStream();//得到网络返回的输入流String result = readData(is, &quot;GBK&quot;);conn.disconnect();//第一个参数为输入流,第二个参数为字符集编码public static String readData(InputStream inSream, String charsetName) throws Exception&#123; ByteArrayOutputStream outStream = new ByteArrayOutputStream(); byte[] buffer = new byte[1024]; int len = -1; while( (len = inSream.read(buffer)) != -1 )&#123; outStream.write(buffer, 0, len); &#125; byte[] data = outStream.toByteArray(); outStream.close(); inSream.close(); return new String(data, charsetName); 3. 获取XML 使用URL封装路径，打开一个HttpURLConnection 设置头信息之后获取相应码，从输入流中获取数据 使用XmlPullPaser解析 4. 获取Json 使用URL封装路径，打开一个HttpURLConnection 设置头信息之后获取相应码，从输入流中获取数据 将数据转为String，封装成JSONArray对象 遍历JSONArray对象，获取其中的JSONObject 再从JSONObject中获取每个字段的信息 5. 发送Get请求 拼接路径和参数，通过URL进行封装，打开一个HttpURLConnection，发送请求 如果参数是中文会出现乱码 URL中包含的中文参数需要使用URLEncoder进行编码 服务器端如果是TOMCAT，其默认使用ISO8859-1编码，接收时需要处理编码问题 6. 发送Post请求 通过URL打开一个HttpURLConnection 头信息中除了超时时间和请求方式之外还必须设置Content-Type和Content-Length 从HttpURLConnection获得输出流输出参数数据 服务端可以使用request对象的setCharacterEncoding方法设置编码1234567891011121314151617181920212223StringBuilder xml = new StringBuilder();xml.append(&quot;&amp;lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;utf-8\&quot; ?&amp;gt;&quot;);xml.append(&quot;&amp;lt;M1 V=10000&amp;gt;&quot;);xml.append(&quot;&amp;lt;U I=1 D=\&quot;N73\&quot;&amp;gt;中国&amp;lt;/U&amp;gt;&quot;);xml.append(&quot;&amp;lt;/M1&amp;gt;&quot;);byte[] xmlbyte = xml.toString().getBytes(&quot;UTF-8&quot;);URL url = new URL(&quot;http://localhost:8080/ncist/contanctmanage.do?method=readxml&quot;);HttpURLConnection conn = (HttpURLConnection) url.openConnection();conn.setConnectTimeout(5* 1000);conn.setDoOutput(true);//允许输出conn.setUseCaches(false);//不使用Cacheconn.setRequestMethod(&quot;POST&quot;); conn.setRequestProperty(&quot;Connection&quot;, &quot;Keep-Alive&quot;);//维持长连接conn.setRequestProperty(&quot;Charset&quot;, &quot;UTF-8&quot;);conn.setRequestProperty(&quot;Content-Length&quot;, String.valueOf(xmlbyte.length));conn.setRequestProperty(&quot;Content-Type&quot;, &quot;text/xml; charset=UTF-8&quot;);DataOutputStream outStream = new DataOutputStream(conn.getOutputStream());outStream.write(xmlbyte);//发送xml数据outStream.flush();if (conn.getResponseCode() != 200) throw new RuntimeException(&quot;请求url失败&quot;);InputStream is = conn.getInputStream();//获取返回数据String result = readAsString(is, &quot;UTF-8&quot;);outStream.close(); 7.Http协议上传文件 搭建服务器，完成上传功能 使用浏览器上传，查看请求信息 HttpURLConnection 通过URL封装路径打开一个HttpURLConnection 设置请求方式以及头字段：Content-Type、Content-Length、Host 拼接数据发送 Socket 使用HttpURLConnection发送时内部有缓存机制，如果上传较大文件会导致内存溢出 我们可以使用Socket发送TCP请求，将上传数据分段发送 8.发送Xml，访问WebService发送XML 通过URL封装路径打开一个HttpURLConnection 设置请求方式，Content-Type和Content-Length，XML文件的Content-Type为：text/xml; charset=UTF-8 使用HttpURLConnection获取输出流输出数据1234567891011121314151617181920212223StringBuilder xml = new StringBuilder();xml.append(&quot;&amp;lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;utf-8\&quot; ?&amp;gt;&quot;);xml.append(&quot;&amp;lt;M1 V=10000&amp;gt;&quot;);xml.append(&quot;&amp;lt;U I=1 D=\&quot;N73\&quot;&amp;gt;中国&amp;lt;/U&amp;gt;&quot;);xml.append(&quot;&amp;lt;/M1&amp;gt;&quot;);byte[] xmlbyte = xml.toString().getBytes(&quot;UTF-8&quot;);URL url = new URL(&quot;http://localhost:8080/ncist/contanctmanage.do?method=readxml&quot;);HttpURLConnection conn = (HttpURLConnection) url.openConnection();conn.setConnectTimeout(5* 1000);conn.setDoOutput(true);//允许输出conn.setUseCaches(false);//不使用Cacheconn.setRequestMethod(&quot;POST&quot;); conn.setRequestProperty(&quot;Connection&quot;, &quot;Keep-Alive&quot;);//维持长连接conn.setRequestProperty(&quot;Charset&quot;, &quot;UTF-8&quot;);conn.setRequestProperty(&quot;Content-Length&quot;, String.valueOf(xmlbyte.length));conn.setRequestProperty(&quot;Content-Type&quot;, &quot;text/xml; charset=UTF-8&quot;);DataOutputStream outStream = new DataOutputStream(conn.getOutputStream());outStream.write(xmlbyte);//发送xml数据outStream.flush();if (conn.getResponseCode() != 200) throw new RuntimeException(&quot;请求url失败&quot;);InputStream is = conn.getInputStream();//获取返回数据String result = readAsString(is, &quot;UTF-8&quot;);outStream.close(); WebService WebService是发布在网络上的API，可以通过发送XML调用，WebService返回结果也是XML数据 WebService没有语言限制，只要可以发送XML数据和接收XML数据即可 http://www.webxml.com.cn 网站上提供了一些WebService服务，我们可以对其进行调用 http://webservice.webxml.com.cn/WebServices/MobileCodeWS.asmx?op=getMobileCodeInfo 中提供了电话归属地查询的使用说明 9.多线程断点续传 在下载的时候多个线程并发可以占用服务器端更多资源，从而加快下载速度使用多线程下载文件可以更快完成文件的下载，多线程下载文件之所以快，是因为其抢占的服务器资源多。如：假设服务器同时最多服务100个用户，在服务器中一条线程对应一个用户，100条线程在计算机中并非并发执行，而是由CPU划分时间片轮流执行，如果A应用使用了99条线程下载文件，那么相当于占用了99个用户的资源，假设一秒内CPU分配给每条线程的平均执行时间是10ms，A应用在服务器中一秒内就得到了990ms的执行时间，而其他应用在一秒内只有10ms的执行时间。就如同一个水龙头，每秒出水量相等的情况下，放990毫秒的水肯定比放10毫秒的水要多。 手机端下载数据时难免会出现无信号断线、电量不足等情况，所以需要断点续传功能 根据下载数据长度计算每个线程下载的数据位置，程序中开启多个线程并发下载 在请求头中设置Range字段就可以获取指定位置的数据，例如：Range: bytes=100-200 在下载过程中记录每个线程已拷贝数据的数量，如果下载中断，下次启动时从记录位置继续下载 多线程下载的实现过程 首先得到下载文件的长度，然后设置本地文件的长度。 123HttpURLConnection.getContentLength();RandomAccessFile file = new RandomAccessFile(&quot;QQWubiSetup.exe&quot;,&quot;rwd&quot;);file.setLength(filesize);//设置本地文件的长度 根据文件长度和线程数计算每条线程下载的数据长度和下载位置。如：文件的长度为6M，线程数为3，那么，每条线程下载的数据长度为2M，每条线程开始下载的位置如下图所示。 使用Http的Range头字段指定每条线程从文件的什么位置开始下载，下载到什么位置为止，如：指定从文件的2M位置开始下载，下载到位置(4M-1byte)为止，代码如下： 1HttpURLConnection.setRequestProperty(&quot;Range&quot;, &quot;bytes=2097152-4194303&quot;); 保存文件，使用RandomAccessFile类指定每条线程从本地文件的什么位置开始写入数据。 12RandomAccessFile threadfile = new RandomAccessFile(&quot;QQWubiSetup.exe &quot;,&quot;rwd&quot;);threadfile.seek(2097152);//从文件的什么位置开始写入数据 多线程下载 进度条使用&lt;Progress&gt;进行配置默认为圆形进度条，水平进度条需要配置style属性，?android:attr/progressBarStyleHorizontal使用android.R.attr.progressBarStyleHorizontal作为样式 当点击下载按钮时开启多线程下载，下载过程中修改进度条进度设置最大刻度：setMax()设置当前进度：setProgress()123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778public class FileDownLoader &#123; @Test public void download() throws Exception &#123; String path = &quot;http://browse.babasport.com/QQWubiSetup.exe&quot;; URL url = new URL(path); HttpURLConnection conn = (HttpURLConnection) url.openConnection(); conn.setConnectTimeout(5*1000); conn.setRequestMethod(&quot;GET&quot;); conn.setRequestProperty(&quot;Accept&quot;, &quot;image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-shockwave-flash, application/xaml+xml, application/vnd.ms-xpsdocument, application/x-ms-xbap, application/x-ms-application, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*&quot;); conn.setRequestProperty(&quot;Accept-Language&quot;, &quot;zh-CN&quot;); conn.setRequestProperty(&quot;Charset&quot;, &quot;UTF-8&quot;); conn.setRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.2; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)&quot;); conn.setRequestProperty(&quot;Connection&quot;, &quot;Keep-Alive&quot;); System.out.println(conn.getResponseCode()); int filesize = conn.getContentLength();//得到文件大小 conn.disconnect(); int threasize = 3;//线程数 int perthreadsize = filesize / 3 + 1; RandomAccessFile file = new RandomAccessFile(&quot;102.wma&quot;,&quot;rw&quot;); file.setLength(filesize);//设置本地文件的大小 file.close(); for(int i=0; i&lt;threasize ; i++)&#123; int startpos = i * perthreadsize;//计算每条线程的下载位置 RandomAccessFile perthreadfile = new RandomAccessFile(&quot;102.wma&quot;,&quot;rw&quot;); perthreadfile.seek(startpos);//从文件的什么位置开始写入数据 new DownladerThread(i, path, startpos, perthreadsize, perthreadfile).start(); &#125; //以下代码要求用户输入q才会退出测试方法，如果没有下面代码，会因为进程结束而导致进程内的下载线程被销毁 int quit = System.in.read(); while(&apos;q&apos;!=quit)&#123; Thread.sleep(2 * 1000); &#125; &#125; private class DownladerThread extends Thread&#123; private int startpos;//从文件的什么位置开始下载 private int perthreadsize;//每条线程需要下载的文件大小 private String path; private RandomAccessFile file; private int threadid; public DownladerThread(int threadid, String path, int startpos, int perthreadsize, RandomAccessFile perthreadfile) &#123; this.path = path; this.startpos = startpos; this.perthreadsize = perthreadsize; this.file = perthreadfile; this.threadid = threadid; &#125; @Override public void run() &#123; try &#123; URL url = new URL(path); HttpURLConnection conn = (HttpURLConnection)url.openConnection(); conn.setConnectTimeout(5 * 1000); conn.setRequestMethod(&quot;GET&quot;); conn.setRequestProperty(&quot;Accept&quot;, &quot;image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-shockwave-flash, application/xaml+xml, application/vnd.ms-xpsdocument, application/x-ms-xbap, application/x-ms-application, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*&quot;); conn.setRequestProperty(&quot;Accept-Language&quot;, &quot;zh-CN&quot;); conn.setRequestProperty(&quot;Charset&quot;, &quot;UTF-8&quot;); conn.setRequestProperty(&quot;Range&quot;, &quot;bytes=&quot; + this.startpos + &quot;-&quot;); InputStream inStream = conn.getInputStream(); byte[] buffer = new byte[1024]; int len = 0; int length = 0; while(length&lt;perthreadsize &amp;&amp; (len = inStream.read(buffer))!=-1)&#123; file.write(buffer, 0, len); length += len;//累计该线程下载的总大小 &#125; file.close(); inStream.close(); System.out.println(threadid+ &quot;线程完成下载&quot;); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125; 断点续传 断点续传需要在下载过程中记录每条线程的下载进度 每次下载开始之前先读取数据库,查询是否有未完成的记录，有就继续下载，没有则创建新记录插入数据库 在每次向文件中写入数据之后，在数据库中更新下载进度 下载完成之后删除数据库中下载记录 Handler传输数据 主线程中创建的View只能在主线程中修改，其他线程只能通过和主线程通信，在主线程中改变View数据 我们使用Handler可以处理这种需求主线程中创建Handler，重写handleMessage()方法新线程中使用Handler发送消息，主线程即可收到消息，并且执行handleMessage()方法 动态生成新View 创建XML文件，将要生成的View配置好 获取系统服务LayoutInflater，用来生成新的ViewLayoutInflater inflater = (LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE); 使用inflate(int resource, ViewGroup root)方法生成新的View 调用当前页面中某个容器的addView，将新创建的View添加进来 本文链接：http://www.sguotao.com/Android基础-2011-06-15-android-basic-5.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android基础4 内容提供者（ContentProvider）]]></title>
      <url>%2FAndroid%E5%9F%BA%E7%A1%80-2011-06-14-android-basic-4.html</url>
      <content type="text"><![CDATA[1.什么是内容提供者 内容提供者是Android中的四大组件之一，可以将应用中的数据对外进行共享 内容提供者将数据的访问方式统一，不必针对不同数据类型采取不同的访问策略 内容提供者将数据封装，只暴露出我们希望提供给其他程序的数据 内容提供者中数据更改可被监听 2. 创建内容提供者定义类继承ContentProvider，根据需要重写内部方法1234567public class PersonContentProvider extends ContentProvider&#123; public boolean onCreate() public Uri insert(Uri uri, ContentValues values) public int delete(Uri uri, String selection, String[] selectionArgs) public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) public String getType(Uri uri)&#125; 在清单文件的节点下进行配置，标签中需要指定name和authorities属性，name为类名，包名从程序Package开始，以“.”开始，authorities：是访问Provider时路径，要唯一。12345&lt;manifest .... &gt; &lt;application android:icon="@drawable/icon"android:label="@string/app_name"&gt; &lt;provider android:name=".PersonContentProvider" android:authorities="cn.ncist.providers.personprovider"/&gt; &lt;/application&gt;&lt;/manifest&gt; 3.Uri介绍Uri代表了要操作的数据，Uri主要包含了两部分信息： 需要操作的ContentProvider 对ContentProvider中的什么数据进行操作，一个Uri由以下几部分组成：URI代表要操作的数据，由scheme、authorites、path三部分组成scheme：固定为content，代表访问内容提供者，authorites：节点中的authorites属性，path：程序定义的路径，可根据业务逻辑定义 4.UriMatcher类的使用UriMatcher类用于匹配Uri，它的用法如下：首先第一步把你需要匹配Uri路径全部给注册上，如下：123456789101112//常量UriMatcher.NO_MATCH表示不匹配任何路径的返回码UriMatcher sMatcher = new UriMatcher(UriMatcher.NO_MATCH);//如果match()方法匹配content://cn.ncist.provider.personprovider/person路径，返回匹配码为1sMatcher.addURI(“cn.ncist.provider.personprovider”, “person”, 1);//添加需要匹配uri，如果匹配就会返回匹配码//如果match()方法匹配content://cn.ncist.provider.personprovider/person/230路径，返回匹配码为2sMatcher.addURI(“cn.ncist.provider.personprovider”, “person/#”, 2);//#号为通配符switch (sMatcher.match(Uri.parse("content://cn.ncist.provider.personprovider/person/10"))) &#123; case 1 break; default://不匹配 break;&#125; 注册完需要匹配的Uri后，就可以使用sMatcher.match(uri)方法对输入的Uri进行匹配，如果匹配就返回匹配码，匹配码是调用addURI()方法传入的第三个参数，假设匹配content://cn.ncist.provider.personprovider/person路径，返回的匹配码为1 5.ContentUris类使用介绍ContentUris类用于获取Uri路径后面的ID部分，它有两个比较实用的方法： withAppendedId(uri, id)用于为路径加上ID部分： 123Uri uri = Uri.parse("content://cn.ncist.provider.personprovider/person")Uri resultUri = ContentUris.withAppendedId(uri, 10); //生成后的Uri为：content://cn.ncist.provider.personprovider/person/10 parseId(uri)方法用于从路径中获取ID部分： 12Uri uri = Uri.parse("content://cn.ncist.provider.personprovider/person/10")long personid = ContentUris.parseId(uri);//获取的结果为:10 6.使用ContentProvider共享数据ContentProvider类主要方法的作用：123456789101112public boolean onCreate()该方法在ContentProvider创建后就会被调用， Android开机后， ContentProvider在其它应用第一次访问它时才会被创建。public Uri insert(Uri uri, ContentValues values)该方法用于供外部应用往ContentProvider添加数据。public int delete(Uri uri, String selection, String[] selectionArgs)该方法用于供外部应用从ContentProvider删除数据。public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs)该方法用于供外部应用更新ContentProvider中的数据。public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)该方法用于供外部应用从ContentProvider中获取数据。public String getType(Uri uri)该方法用于返回当前Url所代表数据的MIME类型。 如果操作的数据属于集合类型，那么MIME类型字符串应该以vnd.android.cursor.dir/开头，例如：要得到所有person记录的Uri为content://cn.ncist.provider.personprovider/person，那么返回的MIME类型字符串应该为：“vnd.android.cursor.dir/person”。如果要操作的数据属于非集合类型数据，那么MIME类型字符串应该以vnd.android.cursor.item/开头，例如：得到id为10的person记录，Uri为content://cn.ncist.provider.personprovider/person/10，那么返回的MIME类型字符串应该为：“vnd.android.cursor.item/person”。 7.使用ContentResolver操作ContentProvider中的数据当外部应用需要对ContentProvider中的数据进行添加、删除、修改和查询操作时，可以使用ContentResolver 类来完成，要获取ContentResolver 对象，可以使用Activity提供的getContentResolver()方法。 ContentResolver 类提供了与ContentProvider类相同签名的四个方法：12345678public Uri insert(Uri uri, ContentValues values)该方法用于往ContentProvider添加数据。public int delete(Uri uri, String selection, String[] selectionArgs)该方法用于从ContentProvider删除数据。public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs)该方法用于更新ContentProvider中的数据。public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)该方法用于从ContentProvider中获取数据。 这些方法的第一个参数为Uri，代表要操作的ContentProvider和对其中的什么数据进行操作，假设给定的是： Uri.parse(“content://cn.ncist.providers.personprovider/person/10”)，那么将会对主机名为cn.ncist.providers.personprovider的ContentProvider进行操作，操作的数据为person表中id为10的记录。使用ContentResolver对ContentProvider中的数据进行添加、删除、修改和查询操作：1234567891011121314151617181920ContentResolver resolver = getContentResolver();Uri uri = Uri.parse("content://cn.ncist.provider.personprovider/person");//添加一条记录ContentValues values = new ContentValues();values.put("name", "ncist");values.put("age", 25);resolver.insert(uri, values); //获取person表中所有记录Cursor cursor = resolver.query(uri, null, null, null, "personid desc");while(cursor.moveToNext())&#123; Log.i("ContentTest", "personid="+ cursor.getInt(0)+ ",name="+ cursor.getString(1));&#125;//把id为1的记录的name字段值更新为limingContentValues updateValues = new ContentValues();updateValues.put("name", "liming");Uri updateIdUri = ContentUris.withAppendedId(uri, 2);resolver.update(updateIdUri, updateValues, null, null);//删除id为2的记录Uri deleteIdUri = ContentUris.withAppendedId(uri, 2);resolver.delete(deleteIdUri, null, null); 8.ContentObserver监听ContentProvider中数据的变化如果ContentProvider的访问者需要知道ContentProvider中的数据发生了变化，可以在ContentProvider 发生数据变化时调用getContentResolver().notifyChange(uri, null)来通知注册在此URI上的访问者，例子如下：1234public class PersonContentProvider extends ContentProvider &#123; public Uri insert(Uri uri, ContentValues values) &#123; db.insert("person", "personid", values); getContext().getContentResolver().notifyChange(uri, null);&#125;&#125; 如果ContentProvider的访问者需要得到数据变化通知，必须使用ContentObserver对数据（数据采用uri描述）进行监听，当监听到数据变化通知时，系统就会调用ContentObserver的onChange()方法：\123456789 getContentResolver().registerContentObserver(Uri.parse("content://cn.ncist.providers.personprovider/person"),true, new PersonObserver(new Handler()));public class PersonObserver extends ContentObserver&#123; public PersonObserver(Handler handler) &#123; super(handler); &#125; public void onChange(boolean selfChange) &#123; //此处可以进行相应的业务处理 &#125;&#125; 9.监听发送短信注意事项： Android系统提供了Provider对短信进行查询，当发出短信时也会发送更改通知 定义一个Observer监听”content://sms” 在onChange()方法中查询”content://sms/outbox” 短信发送数据库在 com.android.providers.telephony 需要权限android.permission.READ_SMS用户使用系统自带的短信程序发送短信，程序会通过ContentProvider把短信保存进数据库，并且发出一个数据变化通知，使用ContentObserver对数据变化进行监听，在用户发送短信时，就会被ContentObserver窃听到短信，注册监听：1getContentResolver().registerContentObserver(Uri.parse("content://sms"), true, new SmsObserver(new Handler())); 监听类：123456789101112131415private final class SmsObserver extends ContentObserver&#123; public SmsObserver(Handler handler) &#123; super(handler); &#125; public void onChange(boolean selfChange) &#123; //查询发送箱中的短信(处于正在发送状态的短信放在发送箱) Cursor cursor = getContentResolver().query(Uri.parse("content://sms/outbox"),null, null, null, null); while(cursor.moveToNext())&#123; StringBuilder sb = new StringBuilder(); sb.append("_id=").append(cursor.getInt(cursor.getColumnIndex("_id"))); sb.append(",address=").append(cursor.getString(cursor.getColumnIndex("address"))); sb.append(";body=").append(cursor.getString(cursor.getColumnIndex("body"))); sb.append(";time=").append(cursor.getLong(cursor.getColumnIndex("date"))); Log.i("ReceiveSendSMS", sb.toString()); &#125; &#125; 10.操作联系人获取所有联系人Android系统中的联系人也是通过ContentProvider来对外提供数据的，数据库路径为：1/data/data/com.android.providers.contacts/database/contacts2.db 操作联系人涉及3张表Provider的authorites为com.android.contacts, 先查询raw_contacts得到每个联系人的id，在使用id从data表中查询对应数据，根据mimetype分类数据。 通过电话号码获取联系人系统内部提供了根据电话号码获取data表数据的功能，路径为：data/phones/filter/用电话号码替换“”部分就可以查到所需数据，获取“display_name”可以获取到联系人显示名 添加联系人先向raw_contacts表插入id，路径为：raw_contacts得到id之后再向data表插入数据，路径为：data 使用事务添加联系人在添加联系人得时候是分多次访问Provider，如果在过程中出现异常，会出现数据不完整的情况，这些操作应该放在一次事务中使用ContentResolver的applyBatch(String authority,ArrayList operations) 方法可以将多个操作在一个事务中执行。文档位置:/android-sdk-windows/docs/reference/android/provider/ContactsContract.RawContacts.html 关键代码： 读取联系人信息的权限 1234&lt;uses-permission android:name="android.permission.READ_CONTACTS"/&gt;content://com.android.contacts/contacts 操作的数据是联系人信息Uricontent://com.android.contacts/data/phones 联系人电话Uricontent://com.android.contacts/data/emails 联系人Email Uri 取联系人信息 1234567891011121314151617181920212223Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null); while (cursor.moveToNext()) &#123; String contactId = cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts._ID)); String name = cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME)); Cursor phones = getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, null, ContactsContract.CommonDataKinds.Phone.CONTACT_ID +" = "+ contactId, null, null); while (phones.moveToNext()) &#123; String phoneNumber = phones.getString(phones.getColumnIndex( ContactsContract.CommonDataKinds.Phone.NUMBER)); Log.i("RongActivity", "phoneNumber="+phoneNumber); &#125; phones.close(); Cursor emails = getContentResolver().query(ContactsContract.CommonDataKinds.Email.CONTENT_URI, null, ContactsContract.CommonDataKinds.Email.CONTACT_ID + " = " + contactId, null, null); while (emails.moveToNext()) &#123; // This would allow you get several email addresses String emailAddress=emails.getString(emails.getColumnIndex(ContactsContract.CommonDataKinds.Email.DATA)); Log.i("RongActivity", "emailAddress="+ emailAddress); &#125; emails.close(); &#125; cursor.close(); 添加联系人方法一：首先向RawContacts.CONTENT_URI执行一个空值插入，目的是获取系统返回的rawContactId 这时后面插入data表的依据，只有执行空值插入，才能使插入的联系人在通讯录里面可见 1234567891011121314151617181920212223242526public void testInsert() &#123; ContentValues values = new ContentValues(); //首先向RawContacts.CONTENT_URI执行一个空值插入，目的是获取系统返回的rawContactId Uri rawContactUri = this.getContext().getContentResolver().insert(RawContacts.CONTENT_URI, values); long rawContactId = ContentUris.parseId(rawContactUri); //往data表入姓名数据 values.clear(); values.put(Data.RAW_CONTACT_ID, rawContactId); values.put(Data.MIMETYPE, StructuredName.CONTENT_ITEM_TYPE);//内容类型 values.put(StructuredName.GIVEN_NAME, "李天山"); this.getContext().getContentResolver().insert(android.provider.ContactsContract.Data.CONTENT_URI, values); //往data表入电话数据 values.clear(); values.put(Data.RAW_CONTACT_ID, rawContactId); values.put(Data.MIMETYPE, Phone.CONTENT_ITEM_TYPE); values.put(Phone.NUMBER, "13921009789"); values.put(Phone.TYPE, Phone.TYPE_MOBILE); this.getContext().getContentResolver().insert(android.provider.ContactsContract.Data.CONTENT_URI, values); //往data表入Email数据 values.clear(); values.put(Data.RAW_CONTACT_ID, rawContactId); values.put(Data.MIMETYPE, Email.CONTENT_ITEM_TYPE); values.put(Email.DATA, "liming@ncist.cn"); values.put(Email.TYPE, Email.TYPE_WORK); this.getContext().getContentResolver().insert(android.provider.ContactsContract.Data.CONTENT_URI, values); &#125; 方法二：批量添加,处于同一个事务中123456789101112131415161718192021222324252627282930313233public void testSave() throws Throwable&#123; //文档位置：reference\android\provider\ContactsContract.RawContacts.html ArrayList&lt;ContentProviderOperation&gt; ops = new ArrayList&lt;ContentProviderOperation&gt;(); int rawContactInsertIndex = 0; ops.add(ContentProviderOperation.newInsert(RawContacts.CONTENT_URI) .withValue(RawContacts.ACCOUNT_TYPE, null) .withValue(RawContacts.ACCOUNT_NAME, null) .build()); //文档位置：reference\android\provider\ContactsContract.Data.html ops.add(ContentProviderOperation.newInsert(android.provider.ContactsContract.Data.CONTENT_URI) .withValueBackReference(Data.RAW_CONTACT_ID, rawContactInsertIndex) .withValue(Data.MIMETYPE, StructuredName.CONTENT_ITEM_TYPE) .withValue(StructuredName.GIVEN_NAME, "赵薇") .build()); ops.add(ContentProviderOperation.newInsert(android.provider.ContactsContract.Data.CONTENT_URI) .withValueBackReference(Data.RAW_CONTACT_ID, rawContactInsertIndex) .withValue(Data.MIMETYPE, Phone.CONTENT_ITEM_TYPE) .withValue(Phone.NUMBER, "13671323809") .withValue(Phone.TYPE, Phone.TYPE_MOBILE) .withValue(Phone.LABEL, "手机号") .build()); ops.add(ContentProviderOperation.newInsert(android.provider.ContactsContract.Data.CONTENT_URI) .withValueBackReference(Data.RAW_CONTACT_ID, rawContactInsertIndex) .withValue(Data.MIMETYPE, Email.CONTENT_ITEM_TYPE) .withValue(Email.DATA, "liming@ncist.cn") .withValue(Email.TYPE, Email.TYPE_WORK) .build()); ContentProviderResult[] results = this.getContext().getContentResolver() .applyBatch(ContactsContract.AUTHORITY, ops); for(ContentProviderResult result : results)&#123; Log.i(TAG, result.uri.toString()); &#125; &#125; 本文链接：http://www.sguotao.com/Android基础-2011-06-14-android-basic-4.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android基础3 Android文件操作]]></title>
      <url>%2FAndroid%E5%9F%BA%E7%A1%80-2011-06-09-android-basic-3.html</url>
      <content type="text"><![CDATA[1. 读写文件1.1 写文件通过Context.openFileOutput(String name, int mode)可以获取一个文件输出流。name为文件名，mode为文件模式，有4种模式。输出流指向路径为：/data/data/包名/files/ 文件模式在Context中有定义常量 模式可以组合使用，例如：MODE_WORLD_READABLE + MODE_WORLD_WRITEABLE，文件被其它应用读和写。 文件访问的原理android有一套自己的安全模型，当应用程序(.apk)在安装时系统就会分配给他一个userid，当该应用要去访问其他资源比如文件的时候，就需要userid匹配。默认情况下，任何应用创建的文件，sharedpreferences，数据库都应该是私有的（位于/data/data//files），其他程序无法访问。除非在创建时指定了Context.MODE_WORLD_READABLE或者Context.MODE_WORLD_WRITEABLE ，只有这样其他程序才能正确访问。 查看文件通过点击Eclipse菜单“Window”-“Show View”-“Other”，在对话窗口中展开android文件夹，选择下面的File Explorer视图，然后在File Explorer视图中展开/data/data//files目录就可以看到该文件。 1.2 读文件通过Context.openFileInput(String name)可以获取一个文件输入流，该输入流可以读取 /data/data/包名/files/ 路径下的文件12FileInputStream inStream = this.getContext().openFileInput("ncist.txt");Log.i("FileTest", readInStream(inStream)); 或者直接使用文件的绝对路径：123File file = new File("/data/data/cn.ncist.action/files/ncist.txt");FileInputStream inStream = new FileInputStream(file);Log.i("FileTest", readInStream(inStream)); 注意：上面文件路径中的“cn.ncist.action”为应用所在包，当你在编写代码时应替换为你自己应用使用的包。Activity还提供了getCacheDir()和getFilesDir()方法： getCacheDir()方法用于获取/data/data//cache目录getFilesDir()方法用于获取/data/data//files目录 获取当前程序Files文件路径1ContextWrapper.getFilesDir() 1.3 写入文件到SD卡需要在清单文件中注册权限12&lt;uses-permission android:name="android.permission.MOUNT_UNMOUNT_FILESYSTEMS" /&gt;&lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" /&gt; 2.1版本以下的SDCard位置和2.2之后版本不同可以通过Environment.getExternalStorageDirectory()获取当前SDCard位置，兼容所有版本 获取SDCard状态要往SDCard存放文件，程序必须先判断手机是否装有SDCard，并且可以进行读写。通过Environment.getExternalStorageState()方法获取SDCard当前状态，常量 Environment.MEDIA_MOUNTED 为已安装。注意：访问SDCard必须在AndroidManifest.xml中加入访问SDCard的权限 1234567if(Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED))&#123; File sdCardDir = Environment.getExternalStorageDirectory();//获取SDCard目录 File saveFile = new File(sdCardDir, “ncist.txt”);FileOutputStream outStream = new FileOutputStream(saveFile);outStream.write("Android".getBytes());outStream.close();&#125; 2. XML解析2.1 Pull简介常见的XML解析方式有三种，DOM、SAX、Pull，Android系统中推荐使用PullPull解析器是一个开源的Java项目，Android系统内部解析XML文件均为此种方式，也可用于JavaEE项目。 Android SDK中已经集成了Pull解析器，无需添加任何jar文件Pull解析器运行方式与SAX类似，提供各种事件的判断跟SAX不同的是， Pull解析器产生的事件是一个数字，而非方法，因此可以使用一个switch对感兴趣的事件进行处理。当元素开始解析时，调用parser.nextText()方法可以获取下一个Text类型节点的值。 官方网站：http://xmlpull.org/ 2.2 使用Pull解析器解析XML文件12345Xml.newPullParser() 获得解析器parser.setInput(in, "UTF-8") 设置输入流以及编码parser.next() 获取下一个解析事件，得到一个事件代码XmlPullParser中定义了常量来标识各种解析事件START_DOCUMENT、END_DOCUMENT 、START_TAG 、END_TAG 、TEXT 使用XmlSerializer写出XML,使用以下方法生成XML，和XML文档顺序类似1234567891011121314151617181920212223242526public static String writeXML(List&amp;lt;Person&amp;gt; persons, Writer writer)&#123; XmlSerializer serializer = Xml.newSerializer(); try &#123; serializer.setOutput(writer); serializer.startDocument("UTF-8", true); //第一个参数为命名空间,如果不使用命名空间,可以设置为null serializer.startTag("", "persons"); for (Person person : persons)&#123; serializer.startTag("", "person"); serializer.attribute("", "id", person.getId().toString()); serializer.startTag("", "name"); serializer.text(person.getName()); serializer.endTag("", "name"); serializer.startTag("", "age"); serializer.text(person.getAge().toString()); serializer.endTag("", "age"); serializer.endTag("", "person"); &#125; serializer.endTag("", "persons"); serializer.endDocument(); return writer.toString(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return null;&#125; 3. 偏好设定（SharedPreferences）在程序中保存一些配置参数的时候我们经常使用SharedPreferences1Context.getSharedPreferences(String name,int mode) 该方法可以在/data/data//shared_pref/目录下创建一个以name命名的xml文件，mode文件为模式 3.1 存储偏好调用edit()方法可以获取一个Editor对象，对数据进行存储，存储之后需要调用commit()保存到文件。因为SharedPreferences背后是使用xml文件保存数据，getSharedPreferences(name,mode)方法的第一个参数用于指定该文件的名称，名称不用带后缀，后缀会由Android自动加上。方法的第二个参数指定文件的操作模式，共有四种操作模式，如果希望SharedPreferences背后使用的xml文件能被其他应用读和写，可以指定Context.MODE_WORLD_READABLE和Context.MODE_WORLD_WRITEABLE权限。 在Activity中获取SharedPreferences在Activity中可以调用getPreferences(int mode)方法获得一个SharedPreferences，文件名和Activity名一致 12345SharedPreferences sharedPreferences = getSharedPreferences("ncist", Context.MODE_PRIVATE);Editor editor = sharedPreferences.edit();//获取编辑器editor.putString("name", "Android");editor.putInt("age", 4);editor.commit();//提交修改 3.2 读取偏好获得SharedPreferences之后调用getString()、getInt()等方法获取其中设置的值 1234SharedPreferences sharedPreferences = getSharedPreferences("ncist", Context.MODE_PRIVATE);//getString()第二个参数为缺省值，如果preference中不存在该key，将返回缺省值String name = sharedPreferences.getString("name", "");int age = sharedPreferences.getInt("age", 1); 如果访问其他应用中的Preference，前提条件是：该preference创建时指定了Context.MODE_WORLD_READABLE或者Context.MODE_WORLD_WRITEABLE权限。如：有个为cn.ncist.action的应用使用下面语句创建了preference。 1getSharedPreferences(&quot;ncist&quot;, Context.MODE_WORLD_READABLE); 其他应用要访问上面应用的preference，首先需要创建上面应用的Context，然后通过Context 访问preference ，访问preference时会在应用所在包下的shared_prefs目录找到preference ： 1234Context otherAppsContext = createPackageContext("cn.ncist.action", Context.CONTEXT_IGNORE_SECURITY);SharedPreferences sharedPreferences = otherAppsContext.getSharedPreferences("ncist", Context.MODE_WORLD_READABLE);String name = sharedPreferences.getString("name", "");int age = sharedPreferences.getInt("age", 0); 如果不通过创建Context访问其他应用的preference，也可以以读取xml文件方式直接访问其他应用preference对应的xml文件，如： 1File xmlFile = new File(“/data/data/&lt;package name&gt;/shared_prefs/ncist.xml”);//&lt;package name&gt;应替换成应用的包名 4. 数据库（SQLite）4.1 SQLite特点Android平台中嵌入了一个关系型数据库SQLite，和其他数据库不同的是SQLite存储数据时不区分类型，例如一个字段声明为Integer类型，我们也可以将一个字符串存入，一个字段声明为布尔型，我们也可以存入浮点数。除非是主键被定义为Integer，这时只能存储64位整数创建数据库的表时可以不指定数据类型，例如： 1CREATE TABLE person(id INTEGER PRIMARY KEY, name) SQLite支持大部分标准SQL语句，增删改查语句都是通用的，分页查询语句和MySQL相同12SELECT * FROM person LIMIT 20 OFFSET 10SELECT * FROM person LIMIT 20,10 4.2 创建数据库 定义类继承SQLiteOpenHelper 声明构造函数，4个参数 重写onCreate()方法 重写upGrade()方法 为了实现对数据库版本进行管理，SQLiteOpenHelper类提供了两个重要的方法，分别是onCreate(SQLiteDatabase db)和onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)，前者用于初次使用软件时生成数据库表，后者用于升级软件时更新数据库表结构。 当调用SQLiteOpenHelper的getWritableDatabase()或者getReadableDatabase()方法获取用于操作数据库的SQLiteDatabase实例的时候，如果数据库不存在，Android系统会自动生成一个数据库，接着调用onCreate()方法，onCreate()方法在初次生成数据库时才会被调用，在onCreate()方法里可以生成数据库表结构及添加一些应用使用到的初始化数据。onUpgrade()方法在数据库的版本发生变化时会被调用，一般在软件升级时才需改变版本号，并且在onUpgrade()方法里面实现表结构的更新。当软件的版本升级次数比较多，这时在onUpgrade()方法里面可以根据原版号和目标版本号进行判断，然后作出相应的表结构及数据更新。 getWritableDatabase()和getReadableDatabase()方法都可以获取一个用于操作数据库的SQLiteDatabase实例。但getWritableDatabase() 方法以读写方式打开数据库，一旦数据库的磁盘空间满了，数据库就只能读而不能写，倘若使用getWritableDatabase()打开数据库就会出错。getReadableDatabase()方法先以读写方式打开数据库，如果数据库的磁盘空间满了，就会打开失败，当打开失败后会继续尝试以只读方式打开数据库。 123456789101112131415public class DatabaseHelper extends SQLiteOpenHelper &#123; //类没有实例化,是不能用作父类构造器的参数,必须声明为静态 private static final String name = "ncist"; //数据库名称 private static final int version = 1; //数据库版本 public DatabaseHelper(Context context) &#123;//第三个参数CursorFactory指定在执行查询时获得一个游标实例的工厂类,设置为null,代表使用系统默认的工厂类 super(context, name, null, version);&#125;public void onCreate(SQLiteDatabase db) &#123;db.execSQL("CREATE TABLE IF NOT EXISTS person (personid integer primary key autoincrement, name varchar(20), age INTEGER)"); &#125;public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123;db.execSQL(" ALTER TABLE person ADD phone VARCHAR(12) NULL "); //往表中增加一列 // DROP TABLE IF EXISTS person 删除表 &#125;&#125; 4.3 CRUD操作4.3.1 execSQL()和rawQuery()方法和JDBC访问数据库不同，操作SQLite数据库无需加载驱动，不用获取连接，直接可以使用，获取SQLiteDatabase对象之后通过该对象直接可以执行SQL语句。对SQLiteDatabase的学习，我们应该重点掌握execSQL()和rawQuery()方法。 execSQL()方法可以执行insert、delete、update和CREATE TABLE之类有更改行为的SQL语句； rawQuery()方法用于执行select语句。 123SQLiteDatabase db = ....;db.execSQL("insert into person(name, age) values(?,?)", new Object[]&#123;"Android", 4&#125;); db.close(); execSQL(String sql, Object[] bindArgs)方法的第一个参数为SQL语句，第二个参数为SQL语句中占位符参数的值，参数值在数组中的顺序要和占位符的位置对应。SQLiteDatabase的rawQuery() 用于执行select语句，使用例子如下： 123456789SQLiteDatabase db = ....;Cursor cursor = db.rawQuery(“select * from person”, null);while (cursor.moveToNext()) &#123; int personid = cursor.getInt(0); //获取第一列的值,第一列的索引从0开始 String name = cursor.getString(1);//获取第二列的值 int age = cursor.getInt(2);//获取第三列的值&#125;cursor.close();db.close(); rawQuery()方法的第一个参数为select语句；第二个参数为select语句中占位符参数的值，如果select语句没有使用占位符，该参数可以设置为null。带占位符参数的select语句使用例子如下： 1Cursor cursor = db.rawQuery("select * from person where name like ? and age=?", new String[]&#123;"%华科%", "4"&#125;); Cursor是结果集游标，用于对结果集进行随机访问，如果大家熟悉jdbc， 其实Cursor与JDBC中的ResultSet作用很相似。 4.3.2 getReadableDatabase()和getWritableDatabase()的区别查看源代码后我们发现getReadableDatabase()在通常情况下返回的就是getWritableDatabase()拿到的数据库只有在抛出异常的时候才会以只读方式打开。 数据库对象缓存 getWritableDatabase()方法最后会使用一个成员变量记住这个数据库对象，下次打开时判断是否重用SQLiteDatabase封装了insert()、delete()、update()、query()四个方法也可以对数据库进行操作。这些方法封装了部分SQL语句，通过参数进行拼接. 4.4 事务处理在使用SQLite数据库时可以使用SQLiteDatabase类中定义的相关方法控制事务123beginTransaction() 开启事务setTransactionSuccessful() 设置事务成功标记endTransaction() 结束事务 如果程序执行到endTransaction()之前调用了setTransactionSuccessful() 方法设置事务的标志为成功则提交事务，如果没有调用setTransactionSuccessful() 方法则回滚事务。使用例子如下： 1234567891011SQLiteDatabase db = ....;db.beginTransaction();//开始事务try &#123; db.execSQL("insert into person(name, age) values(?,?)", new Object[]&#123;"Android", 4&#125;); db.execSQL("update person set name=? where personid=?", new Object[]&#123;"Android", 1&#125;);db.setTransactionSuccessful();//调用此方法会在执行到endTransaction() 时提交当前事务，如果不调用此方法会回滚事务&#125; finally &#123; db.endTransaction();//由事务的标志决定是提交事务，还是回滚事务&#125; db.close(); endTransaction()需要放在finally中执行，否则事务只有到超时的时候才自动结束会降低数据库并发效率。 本文链接：http://www.sguotao.com/Android基础-2011-06-09-android-basic-3.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android基础2 布局]]></title>
      <url>%2FAndroid%E5%9F%BA%E7%A1%80-2011-06-07-android-basic-2.html</url>
      <content type="text"><![CDATA[1. 布局Android 有4种布局方式，分别是Linearlayout(线性布局)、RelativeLayout（相对布局）、TableLayout（表格布局）、FrameLayout（帧布局）。 1.1 Linearlayout(线性布局)1234&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;fill_parent&quot;android:layout_height=&quot;fill_parent&quot; android:orientation=&quot;vertical&gt; 属性“xmlns:android”指定命名空间，顶级元素必须指定命名空间，而在该命名空间中的控件的属性，要在属性前加上“android”做前缀。 属性“layout_width”指定该元素的宽度，可选值有三种，“fill_parent”、“wrap_content”、具体数字。其中，“fill_parent”代表填满其父元素，对于顶级元素来说，其父元素就是整个手机屏幕。“wrap_content”代表该元素的大小仅包裹其自身的内容，而数字则代表其占相应的px。 属性“layout_height”指定该元素的高度，可选参数值与“layout_width”的参数意义相同。 属性“orientation”指定子元素的排列方式，其中指定为“vertical”则是子元素垂直排列，每个子元素会占独立的一行。而另一个可选值为“horizontal”代表子元素水平排列，即每个子元素会占独立的一列。 1.2 RelativeLayout（相对布局）文档位置： android-sdk-windows/docs/guide/topics/ui/layout-objects.html#relativelayout 相对布局中的视图组件是按照相互之间的相对位置来确定的。 1.3 TableLayout（表格布局）文档位置：android-sdk-windows/docs/guide/topics/ui/layout-objects.html#tablelayout 1.4 FrameLayout（帧布局）文档位置：android-sdk-windows/docs/guide/topics/ui/layout-objects.html#framelayout 2. Junit 项目中添加测试类在AndroidManifest.xml清单文件中添加配置 1234&lt;uses-library android:name="android.test.runner" /&gt;&lt;instrumentation android:targetPackage="cn.ncist.junit" android:name="android.test.InstrumentationTestRunner" /&gt; 定义一个类继承AndroidTestCase，定义测试方法 在Outline视图下右键点击测试方法 – Run as – Android Junit Test 创建测试项目创建Android Test Project输入项目名，选择一个已存在的工程，Eclipse可以自动配置Junit环境 3. 日志信息调试android程序的两种手段： debug模式打断点，debug as –&gt;android application 如果程序长时间停留在waiting dubug页面 –&gt;androidmainfest.xml在application节点中增加属性debuggable = true； 输出log，看logcat的信息，android 将日志信息打印到logcat中。日志信息的级别; 在LogCat视图中我们可以看到程序的日志信息，也可以在程序中输出信息到LogCat中。程序中我们可以使用Log类来输出信息。 System.out和System.err输出的信息也会显示在LogCat中，注意System.out输出信息是Info级别，System.err是Warn级别。 本文链接：http://www.sguotao.com/Android基础-2011-06-07-android-basic-2.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android基础1 Android项目的结构]]></title>
      <url>%2FAndroid%E5%9F%BA%E7%A1%80-2011-06-01-android-basic-1.html</url>
      <content type="text"><![CDATA[1. Android系统架构图学习Android内容，总是无法绕过Android系统架构图，这张图，在以后Android开发的过程中，总是离不开它。 2. Davlik VM和JVM的区别Dalvik虚拟机是Google等厂商合作开发的Android移动设备平台的核心组成部分之一。 2.1 Dalvik 和标准 Java 虚拟机(JVM)的首要差别Dalvik 基于寄存器，而 JVM 基于栈。基于寄存器的虚拟机对于更大的程序来说，在它们编译的时候，花费的时间更短。 JVM字节码中，局部变量会被放入局部变量表中，继而被压入堆栈供操作码进行运算，当然JVM也可以只使用堆栈而不显式地将局部变量存入变量表中。Dalvik字节码中，局部变量会被赋给65536个可用的寄存器中的任何一个，Dalvik指令直接操作这些寄存器，而不是访问堆栈中的元素。 2.2 Dalvik 和 Java 字节码的区别VM字节码由.class文件组成，每个文件一个class。JVM在运行的时候为每一个类装载字节码。相反的，Dalvik程序只包含一个.dex文件，这个文件包含了程序中所有的类。Java编译器创建了JVM字节码之后，Dalvik的dx编译器删除.class文件，重新把它们编译成Dalvik字节码，然后把它们写进一个.dex文件中。这个过程包括翻译、重构、解释程序的基本元素（常量池、类定义、数据段）。常量池描述了所有的常量，包括引用、方法名、数值常量等。类定义包括了访问标志、类名等基本信息。数据段中包含各种被VM执行的函数代码以及类和函数的相关信息（例如DVM所需要的寄存器数量、局部变量表、操作数堆栈大小），还有实例变量。 2.3 Dalvik 和 Java SDK的SDK不同及运行环境的区别 Dalvik 经过优化，允许在有限的内存中同时运行多个虚拟机的实例，并且每一个Dalvik 应用作为一个独立的Linux 进程执行。独立的进程可以防止在虚拟机崩溃的时候所有程序都被关闭。 Dalvik虚拟机在android2.2之后使用JIT （Just-In-Time）技术，与传统JVM的JIT并不完全相同，Dalvik虚拟机有自己的 bytecode，并非使用 Java bytecode。 还有以下几点： Dalvik主要是完成对象生命周期管理，堆栈管理，线程管理，安全和异常管理，以及垃圾回收等等重要功能。 Dalvik负责进程隔离和线程管理，每一个Android应用在底层都会对应一个独立的Dalvik虚拟机实例，其代码在虚拟机的解释下得以执行。 不同于Java虚拟机运行java字节码，Dalvik虚拟机运行的是其专有的文件格式Dex。 dex文件格式可以减少整体文件尺寸，提高I/O操作的类查找速度。 odex是为了在运行过程中进一步提高性能，对dex文件的进一步优化。 所有的Android应用的线程都对应一个Linux线程，虚拟机因而可以更多的依赖操作系统的线程调度和管理机制。 有一个特殊的虚拟机进程Zygote，他是虚拟机实例的孵化器。它在系统启动的时候就会产生，它会完成虚拟机的初始化、库的加载、预制类库和初始化的操作。如果系统需要一个新的虚拟机实例，它会迅速复制自身，以最快的速度提供给系统。对于一些只读的系统库，所有虚拟机实例都和Zygote共享一块内存区域。 3. 常用Android设备的屏幕分辨率 4. 安装和卸载应用adb安装打开cmd命令行 – 进入SDK根目录下tools文件夹，abd install apk文件绝对路径例如：adb install D:\Ncist\Program\android\01_HelloWorld\bin\01_HelloWorld.apk adb卸载adb uninstall 包名例如：adb uninstall cn.ncist.helloworld 5. Android项目的目录结构 本文链接：http://www.sguotao.com/Android基础-2011-06-01-android-basic-1.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java IO流 序列流]]></title>
      <url>%2FJava-IO%E6%B5%81-2010-12-04-io-5.html</url>
      <content type="text"><![CDATA[在学习Java IO相关的内容时，会遇到成对出现的流，为方便日后查阅，整理以下笔记内容： Java IO流 1 IO流的介绍 Java IO流 2 字符流 Java IO流 3 字节流 Java IO流 4 File类 Java IO流 5 序列流 1. 序列流SequenceInputStream特点：可以将多个读取流合并成一个流。这样操作起来很方便。 原理：其实就是将每一个读取流对象存储到一个集合中。最后一个流对象结尾作为这个流的结尾。两个构造函数：&lt;?prettify?&gt; SequenceInputStream(InputStream in1,InputStream in2) //可以将两个读取流合并成一个流 SequenceInputStream(Enumeration &lt;? extends InputStream &gt; en) //可以将枚举中的多个流合并成一个流。 作用：可以用于多个数据的合并. 注意：因为Enumeration是Vector中特有的取出方式。而Vector被ArrayList取代。 所以要使用ArrayList集合效率更高一些。那么如何获取Enumeration呢?123456789101112131415161718192021222324ArrayList &amp;lt;FileInputStream &amp;gt;al = new ArrayList&amp;lt;FileInputStream&amp;gt;(); for(int x=1; x&lt;4; x++) al.add(new FileInputStream(x+&quot;.txt&quot;)); Iterator&amp;lt;FileInputStream&amp;gt; it = al.iterator(); Enumeration&amp;lt;FileInputStream&amp;gt; en = new Enumeration&amp;lt;FileInputStream&amp;gt;()&#123; public boolean hasMoreElements() &#123; return it.hasNext(); &#125; public FileInputStream nextElement() &#123; return it.next(); &#125; &#125;; //多个流就变成了一个流，这就是数据源。 SequenceInputStream sis = new SequenceInputStream(en); //创建数据目的。 FileOutputStream fos = new FileOutputStream(&quot;4.txt&quot;); byte[] buf = new byte[1024*4]; int len = 0; while((len=sis.read(buf))!=-1) &#123; fos.write(buf,0,len); &#125; fos.close(); sis.close();&lt;/pre&gt; 如果要一个对文件数据切割。一个读取对应多了输出。1234567891011FileInputStream fis = new FileInputStream(&quot;1.mp3&quot;); FileOutputStream fos = null; byte[] buf = new byte[1024*1024];//是一个1MB的缓冲区。 int len = 0; int count = 1; while((len=fis.read(buf))!=-1) &#123; fos = new FileOutputStream((count++)+&quot;.part); fos.write(buf,0,len); fos.close(); &#125; fis.close(); 这样就是将1.mp3文件切割成多个碎片文件。想要合并使用SequenceInputStream即可。对于切割后，合并是需要的一些源文件的信息。可以通过配置文件进行存储。该配置可以通过键=值的形式存在。然后通过Properties对象进行数据的加载和获取。 2. 对象的序列化2.1 ObjectInputStream 和ObjectOutputStream可以通过这两个流对象直接操作已有对象并将对象进行本地持久化存储。存储后的对象可以进行网络传输。 两个对象的特有方法：ObjectInputStream1Object readObject()//该方法抛出异常：ClassNotFountException。 ObjectOutputStream1void writeObject(Object)//被写入的对象必须实现一个接口:Serializable 否则会抛出：NotSerializableException Serializable：该接口其实就是一个没有方法的标记接口。 用于给类指定一个UID。该UID是通过类中的可序列化成员的数字签名运算出来的一个long 型的值。 只要是这些成员没有变化，那么该值每次运算都一样。 该值用于判断被序列化的对象和类文件是否兼容。如果被序列化的对象需要被不同的类版本所兼容。可以在类中自定义UID。定义方式：static final long serialVersionUID = 42L; 注意：对应静态的成员变量，不会被序列化。对应非静态也不想被序列化的成员而言，可以通过transient关键字修饰。 通常，这两个对象成对使用。 2.2 操作基本数据类型的流对象DataInputStreamDataInputStream(InputStream);操作基本数据类型的方法：123456int readInt():一次读取四个字节，并将其转成int 值。 boolean readBoolean():一次读取一个字节。 short readShort(); long readLong(); 剩下的数据类型一样。 String readUTF():按照utf-8修改版读取字符。注意，它只能读writeUTF()写入的字符数据 DataOutputStreamDataOutputStream(OutputStream):操作基本数据类型的方法:12345678writeInt(int)：一次写入四个字节。 注意：和write(int)不同。write(int)只将该整数的最低一个8位写入。剩余三个8位丢弃。 writeBoolean(boolean); writeShort(short); writeLong(long); 剩下是数据类型也也一样。 writeUTF(String):按照utf-8修改版将字符数据进行存储。只能通过readUTF 读取。 通常只要操作基本数据类型的数据。就需要通过DataStram进行包装。通常成对使用。 2.3 操作数组的流对象操作字节数组12345ByteArrayInputStream ByteArrayOutputStream toByteArray(); toString(); writeTo(OutputStream); 操作字符数组&lt;?prettify?&gt;12CharArrayReader CharArrayWriter 对于这些流，源是内存。目的也是内存。而且这些流并未调用系统资源。使用的就是内存中的数组。所以这些在使用的时候不需要close。操作数组的读取流在构造时，必须要明确一个数据源。所以要传入相对应的数组。 对于操作数组的写入流，在构造函数可以使用空参数。因为它内置了一个可变长度数组作为缓冲区。这几个流的出现其实就是通过流的读写思想在操作数组。类似的对象同理： StringReader，StringWriter。 3. 编码转换在io 中涉及到编码转换的流是转换流和打印流。但是打印流只有输出。在转换流中是可以指定编码表的。默认情况下，都是本机默认的码表。GBK. 这个编码表怎么来的？1System.getProperty(&quot;file.encoding&quot;); 常见码表：123456ASCII:美国标准信息交换码。使用的是1个字节的7位来表示该表中的字符。 ISO8859-1:拉丁码表。使用1个字节来表示。 GB2312:简体中文码表。 GBK：简体中文码表，比GB2312融入更多的中文文件和符号。 unicode:国际标准码表。都用两个字节表示一个字符。 UTF-8：对unicode进行优化，每一个字节都加入了标识头。 编码转换： 字符串 –&gt;字节数组 ：编码。通过getBytes(charset); 字节数组–&gt;字符串 ： 解码。通过String类的构造函数完成。String(byte[],charset); 如果编错了，没救！ 如果编对了，解错了，有可能还有救！123456String s = &quot;你好&quot;; //编码 byte[] b = s.getBytes(&quot;GBK&quot;); //解码String s1 = new String(b,&quot;iso8859-1&quot;); System.out.println(s1);//???? 想要还原。12345/* 对s1先进行一次解码码表的编码。获取原字节数据。 然后在对原字节数据进行指定编码表的解码。 */ byte[] b1 = s1.getBytes(&quot;iso8859-1&quot;); String s2 = new String(b1,&quot;gbk&quot;); System.out.println(s2);//你好 这种情况在tomcat服务器会出现。 因为tomcat服务器默认是iso8859-1的编码表。所以客户端通过浏览器向服务端通过get提交方式提交中文数据时，服务端获取到会使用ISO8859-1进行中文数据的解码。会出现乱码。 这时就必须要对获取的数据进行iso8859-1编码。然后在按照页面指定的编码表进行解码即可，而对于post提交，这种方法也通用。但是post有更好的解决方式。 request.setCharacterEncoding(“utf-8”);即可。所以建立客户端提交使用post提交方式。 本文链接：http://www.sguotao.com/Java-IO流-2010-12-04-io-5.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java IO流 File类]]></title>
      <url>%2FJava-IO%E6%B5%81-2010-12-03-io-4.html</url>
      <content type="text"><![CDATA[在学习Java IO相关的内容时，会遇到成对出现的流，为方便日后查阅，整理以下笔记内容： Java IO流 1 IO流的介绍 Java IO流 2 字符流 Java IO流 3 字节流 Java IO流 4 File类 Java IO流 5 序列流 1. File类该类的出现是对文件系统的中的文件以及文件夹进行对象的封装。 可以通过对象的思想来操作文件以及文件夹。1.构造函数123File(String filename)//将一个字符串路径(相对或者绝对)封装成File对象，该路径是可存在的，也可以是不存在。 File(String parent,String child); File(File parent,String child); 2.特别的字段：separator:跨平台的目录分隔符。1File file = new File(&quot;c:&quot;+File.separator+&quot;abc&quot;+File.separator+&quot;a.txt&quot;); 3.常见方法1) 创建：123boolean createNewFile()throws IOException//创建文件，如果被创建的文件已经存在，则不创建。 boolean mkdir()// 创建文件夹。 boolean mkdirs()//创建多级文件夹。 2) 删除：123boolean delete()//可用于删除文件或者文件夹。 注意：**对于文件夹只能删除不带内容的空文件夹，对于带有内容的文件夹，不可以直接删除，必须要从里往外删除**。 void deleteOnExit()//删除动作交给系统完成。无论是否反生异常，系统在退出时执行删除动作。 3) 判断：1234567boolean canExecute()boolean canWrite()boolean canRead()boolean exists()//判断文件或者文件夹是否存在。 boolean isFile()//判断File对象中封装的是否是文件。 boolean isDirectory()//判断File对象中封装的是否是文件夹。 boolean isHidden()//判断文件或者文件夹是否隐藏。在获取硬盘文件或者文件夹时，对于系统目录中的文件，java是无法访问的，所以在遍历，可以避免遍历隐藏文件。 4) 获取：1234567891011getName()//获取文件或者文件夹的名称。 getPath()//File对象中封装的路径是什么，获取的就是什么。 getAbsolutePath()//无论File对象中封装的路径是什么，获取的都是绝对路径。 getParent()//获取File对象封装文件或者文件夹的父目录。 注意：**如果封装的是相对路径，那么返回的是null.**long length()//获取文件大小。 long lastModified()//获取文件或者文件最后一次修改的时间。 static File[] listRoots()//获取的是被系统中有效的盘符。 String[] list()//获取指定目录下当前的文件以及文件夹名称。 String[] list(Filenamefilter)//可以根据指定的过滤器，过滤后的文件及文件夹名称。 File[] listFiles()//获取指定目录下的文件以及文件夹对象。 5) 重命名：1234renameTo(File): File f1 = new File(&quot;c:\\a.txt&quot;); File f2 = new File(&quot;c:\\b.txt&quot;); f1.renameTo(f2);//将c盘下的a.txt文件改名为b.txt文件。 2. 递归其实就是在使用一个功能过程中，又对该功能有需求。就出现了函数自身调用自身。注意： 一定要限定条件，否则内存溢出。 使用递归时，调用次数不要过多，否则也会出现内存溢出。 需求：想要列出指定目录下的文件以及文件夹中的文件(子文件)。列出指定目录下的当前的文件或者文件夹。想要列出当前目录下的文件夹中的文件，其实就是在重新使用该功能 。1234567891011public void listDir(File dir,int level) &#123; System.out.println(getLevel(level)+dir.getName()); level++; File[] files = dir.listFiles(); for(int x =0; x&lt;files.length; x++) &#123; if(files[x].isDirecotry())//如果遍历到的是目录。 listDir(files[x],level);//那么就行该功能的重复使用递归。 else System.out.println(getLevel(level)+files[x].getName()); &#125; &#125; 想要对列出的目录有一些层次关系。12345678public String getLevel(int level) &#123; StringBuilder sb = new StringBuilder(); sb.append(&quot;|--&quot;); for(int x=0; x&lt;level; x++) &#123; sb.insert(0,&quot;| &quot;); &#125; return sb.toString(); &#125; 需求：删除一个带内容的目录。原理：从里往外删除，所以需要使用递归完成。12345678910public void deleteAll(File dir) &#123; File[] files = dir.listFiles(); for(int x=0; x&lt;files.length; x++) &#123; if(files[x].isDirectory()) deleteAll(files[x]); else files[x].delete(); &#125; dir.delete(); &#125; 3. IO 包中的常见对象和其它对象1.IO 包中的常见对象 字节流： FileInputStream FileOutputStream BufferedInputStream BufferedOutputStream 字符流: FileReader FileWriter BufferedReader BufferedWriter 转换流: InputStreamReader OutputStreamWriter 文件对象: File 所有的带File的流对象都可以直接操作File对象。 打印流： PrintStream PrintWriter 2.IO 包中的其他对象 打印流：PrintStream PrintWriterPrintStream： 是一个字节打印流，System.out对应的类型就是PrintStream。它的构造函数可以接收三种数 据类型的值。 字符串路径。 File对象。 OutputStream。 PrintWriter： 是一个字符打印流。构造函数可以接收四种类型的值。 字符串路径。 File对象,对于1，2类型的数据，还可以指定编码表。也就是字符集. OutputStream Writer 对于3，4类型的数据，可以指定自动刷新。 注意：该自动刷新值为true 时，只有三个方法可以用：println,printf,format.123456//如果想要既有自动刷新，又可执行编码。如何完成流对象的包装？ PrintWrter pw = new PrintWriter(new OutputSteamWriter(new FileOutputStream(&quot;a.txt&quot;),&quot;utf-8&quot;),true); //如果想要提高效率。还要使用打印方法。 PrintWrter pw = new PrintWriter(new BufferdWriter(new OutputSteamWriter(new FileOutputStream(&quot;a.txt&quot;),&quot;utf-8&quot;)),true); 3.管道流PipedInputStream PipedOutputStream特点：读取管道流和写入管道流可以进行连接。 连接方式： 通过两个流对象的构造函数。 通过两个对象的connect方法。通常两个流在使用时，需要加入多线程技术，也就是让读写同时运行。注意：对于read方法。该方法是阻塞式的，也就是没有数据的情况，该方法会等待。 4.RandomAccessFile该对象并不是流体系中的一员。该对象中封装了字节流，同时还封装了一个缓冲区(字节数组)，通过内部的指针来操作数组中的数据。该对象可以读数据，可以写入数据，如果写入位置已有数据，会发生数据覆盖。也就是可以对数据进行修改。在使用该对象时，建议数据都是有规则的。或者是分段的。注意；该对象在实例化时，如果要操作的文件不存在，会自动建立。如果要操作的文件存在，则不会建立，如果存在的文件有数据。那么在没有指定指针位置的情况下，写入数据，会将文件开头的数据覆盖。 可以用于多线程的下载，也就是通过多线程往一个文件中同时存储数据。 该对象特点： 该对象只能操作文件，所以构造函数接收两种类型的参数。 字符串路径。 File对象。 该对象既可以对文件进行读取，也可以写入。 在进行对象实例化时，必须要指定的该对象的操作模式，r rw等。 该对象中有可以直接操作基本数据类型的方法。 该对象最有特点的方法123skipBytes()//跳过指定的字节数。 seek()//指定指针的位置。 getFilePointer()//获取指针的位置。 通过这些方法，就可以完成对一个文件数据的随机的访问。 本文链接：http://www.sguotao.com/Java-IO流-2010-12-03-io-4.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java IO流 字节流]]></title>
      <url>%2FJava-IO%E6%B5%81-2010-12-02-io-3.html</url>
      <content type="text"><![CDATA[在学习Java IO相关的内容时，会遇到成对出现的流，为方便日后查阅，整理以下笔记内容： Java IO流 1 IO流的介绍 Java IO流 2 字符流 Java IO流 3 字节流 Java IO流 4 File类 Java IO流 5 序列流 1. 字节流抽象基类：InputStream，OutputStream。字节流可以操作任何数据。注意：字符流使用的数组是字符数组。char [] chs字节流使用的数组是字节数组。byte [] bt 12345FileOutputStream fos = new FileOutputStream(&quot;a.txt&quot;); fos.write(&quot;abcde&quot;);//直接将数据写入到了目的地。 fos.close();//只关闭资源。 FileInputStream fis = new FileInputStream(&quot;a.txt&quot;); //fis.available();//获取关联的文件的字节数。 如果文件体积不是很大，可以这样操作。1byte[] buf = new byte[fis.available()];//创建一个刚刚好的缓冲区。 但是这有一个弊端，就是文件过大，大小超出jvm 的内容空间时，会内存溢出。12345678910111213fis.read(buf); System.out.println(new String(buf)); /** *copy一个图片 */BufferedInputStream bufis = new BufferedInputStream(new FileInputStream(&quot;1.jpg&quot;)); BufferedOutputStream bufos = new BufferedOutputStream(new FileOutptStream(&quot;2.jpg&quot;)); int by = 0; while((by=bufis.read())!=-1)&#123; bufos.write(by); &#125; bufos.close(); bufis.close(); 2. 字节流&amp;字符流小结字符流 FileReader. FileWriter. BufferedReader BufferedWriter. 字节流 FileInputStream FileOutputStream BufferedInputStream BufferedOutputStream 字节流的read()方法读取一个字节。为什么返回的不是byte类型，而是int 类型呢？因为read方法读到末尾时返回的是-1。而在所操作的数据中的很容易出现连续多个1的情况，而连续读到8个1，就是-1。导致读取会提前停止。所以将读到的一个字节给提升为一个int 类型的数值，但是只保留原字节，并在剩余二进制位补0。 具体操作是：byte&amp;255 or byte&amp;0xff 。对于write方法，可以一次写入一个字节，但接收的是一个int 类型数值。只写入该int 类型的数值的最低一个字节（8位）。简单说:read方法对读到的数据进行提升。write对操作的数据进行转换。 2. 转换流1.转换流特点 是字节流和字符流之间的桥梁。 该流对象中可以对读取到的字节数据进行指定编码表的编码转换。 2.什么时候使用呢? 当字节和字符之间有转换动作时。 流操作的数据需要进行编码表的指定时。 3 具体的对象体现 InputStreamReader：字节到字符的桥梁。 OutputStreamWriter：字符到字节的桥梁。 这两个流对象是字符流体系中的成员。那么它们有转换作用，而本身又是字符流。所以在构造的时候，需要传入字节流对象进来。构造函数：123InputStreamReader(InputStream)://通过该构造函数初始化，使用的是本系统默认的编码表GBK。 InputStreamReader(InputStream,String charSet)://通过该构造函数初始化，可以指定编码表。 OutputStreamWriter(OutputStream)://通过该构造函数初始化，使用的是本系统默认的编码表GBK。 OutputStreamWriter(OutputStream,String charSet)://通过该构造函数初始化，可以指定编码表。 4.操作文件的字符流对象是转换流的子类Reader&nbsp;&nbsp;|–InputStreamReader&nbsp;&nbsp;&nbsp;&nbsp;|–FileReader Writer&nbsp;&nbsp;|–OutputStreamWriter&nbsp;&nbsp;&nbsp;&nbsp;|–FileWriter 转换流中的read方法。已经融入了编码表，在底层调用字节流的read方法时将获取的一个或者多个字节数据进行临时存储，并去查指定的编码表，如果编码表没有指定，查的是默认码表。那么转流的read方法就可以返回一个字符比如中文。转换流已经完成了编码转换的动作，对于直接操作的文本文件的FileReaer而言，就不用在重新定义了，只要继承该转换流，获取其方法，就可以直接操作文本文件中的字符数据了。 注意： 在使用FileReader操作文本数据时，该对象使用的是默认的编码表。如果要使用指定编码表时，必须使用转换流。1FileReader fr = new FileReader(&quot;a.txt&quot;);//操作a.txt的中的数据使用的本系统默认的GBK。 操作a.txt中的数据使用的也是本系统默认的GBK。1InputStreamReader isr = new InputStreamReader(new FileInputStream(&quot;a.txt&quot;)); 这两句的代码的意义相同。如果a.txt中的文件中的字符数据是通过utf-8的形式编码。那么在读取时，就必须指定编码表。那么转换流必须使用。1InputStreamReader isr = new InputStreamReader(new FileInputStream(&quot;a.txt&quot;),&quot;utf-8&quot;); 5.流操作的基本规律 明确数据源和数据汇（数据目的）。其实是为了明确输入流还是输出流。 明确操作的数据是否是纯文本数据。其实是为了明确字符流还是字节流。 6.数据源与数据汇 数据源：键盘System.in,硬盘File开头的流对象，内存(数组)。 数据汇：控制台System.out,硬盘File开头的流对象，内存(数组)。 7.需求：将键盘录入的数据存储到一个文件中。数据源：System.in 既然是源，使用的就是输入流，可用的体系有InputStream，Reader。 因为键盘录入进来的一定是纯文本数据，所以可以使用专门操作字符数据的Reader。发现System.in对应的流是字节读取流。所以要将其进行转换，将字节转成字符即可。所以要使用Reader体系中：InputStreamReader接下来，是否需要提高效率呢？如果需要，那么就加入字符流的缓冲区：1BufferedReader bur = new BufferedReader(new InputStreamReader(System.in)); 数据汇：一个文件，硬盘。既然是数据汇，那么一定是输出流，可以用的OutputStream,Writer。往文件中存储的都是文本数据，那么可以使用字符流较为方便:Writer。因为操作的是一个文件。所以使用Writer中的FileWriter。是否要提高效率呢？是，那就使用BufferedWriter。1BufferedWriter bufr = new BufferedWriter(new FileWriter(&quot;a.txt&quot;)); 8.附加需求：希望将这些文本数据按照指定的编码表存入文件中。既然是文本数据，而是还是写入到文件中，那么使用的体系还是Writer。因为要指定编码表，所以要使用Writer中的转换流，OutputStreamWriter。是否要提高效率，是，选择BufferedWriter。注意：虽然是最终是文件，但是不可以选择FileWriter。因为该对象是使用默认编码表。 输出转换流要接收一个字节输出流进来，所以要是用OutputStram体系，而最终输出到一个文件中，那么就要使用OutputStream体系中可以操作的文件的字节流对象FileOutputStream。：1234//String charSet = System.getProperty(&quot;file.encoding&quot;); String charSet = &quot;utf-8&quot;; BufferedWriter bufw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(&quot;a.txt&quot;),charSet); 3. 可以和流相关联的集合对象PropertiesMap&nbsp;&nbsp;|–Hashtable&nbsp;&nbsp;&nbsp;&nbsp;|–Properties Properties:该集合不需要泛型，因为该集合中的键值对都是String类型。 存入键值对：setProperty(key,value); 获取指定键对应的值：value getProperty(key); 获取集合中所有键元素：Enumeration propertyNames(); 在jdk1.6 版本给该类提供一个新的方法：Set stringPropertyNames(); 列出该集合中的所有键值对，可以通过参数打印流指定列出到的目的地。list(PrintStream); list(PrintWriter);例：list(System.out):将集合中的键值对打印到控制台。 1list(new PrintStream(&quot;prop.txt&quot;));//将集合中的键值对存储到prop.txt文件中。 可以将流中的规则数据加载进行集合，并称为键值对。 1load(InputStream): //jdk1.6 版本。提供了新的方法。 load(Reader): 注意：流中的数据要是 “键=值” 的规则数据。 可以将集合中的数据进行指定目的的存储。 12store(OutputStram,String comment)方法。 //jdk1.6 版本。提供了新的方法。 store(Writer ,String comment): 使用该方法存储时，会带着当时存储的时间。 本文链接：http://www.sguotao.com/Java-IO流-2010-12-02-io-3.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java IO流 字符流]]></title>
      <url>%2FJava-IO%E6%B5%81-2010-12-01-io-2.html</url>
      <content type="text"><![CDATA[在学习Java IO相关的内容时，会遇到成对出现的流，为方便日后查阅，整理以下笔记内容： Java IO流 1 IO流的介绍 Java IO流 2 字符流 Java IO流 3 字节流 Java IO流 4 File类 Java IO流 5 序列流 1. 字符流介绍 Reader&nbsp;&nbsp;|–InputStreamReader&nbsp;&nbsp;&nbsp;&nbsp;|–FileReader:专门用于处理文件的字符读取流对象。 Writer&nbsp;&nbsp;|–OutputStreamWriter&nbsp;&nbsp;&nbsp;&nbsp;|–FileWriter:专门用于处理文件的字符写入流对象。 2. Writer 和 ReaderReader中的常见的方法 int read()： 读取一个字符。返回的是读到的那个字符。如果读到流的末尾，返回-1。 int read(char[])： 将读到的字符存入指定的数组中，返回的是读到的字符个数，也就是往数组里装的元素的个数。如果读到流的末尾，返回-1。 close(): 读取字符其实用的是window系统的功能，就希望使用完毕后，进行资源的释放。 Writer中的常见的方法 write(ch): 将一个字符写入到流中。 write(char[]): 将一个字符数组写入到流中。 write(String): 将一个字符串写入到流中。 flush():刷新流，将流中的数据刷新到目的地中，流还存在。 close():关闭资源：在关闭前会先调用flush()，刷新流中的数据去目的地。然后流关闭。 3. FileWriter和FileReader3.1 FileWriter该类没有特有的方法。只有自己的构造函数。该类特点在于， 用于处理文本文件。 该类中有默认的编码表， 该类中有临时缓冲。 构造函数：在写入流对象初始化时，必须要有一个存储数据的目的地。1FileWriter(String filename) 该构造函数做了什么事情呢？ 调用系统资源。 在指定位置，创建一个文件。 注意：如果该文件已存在，将会被覆盖.1FileWriter(String filename,boolean append) 该构造函数：当传入的boolean类型值为true时，会在指定文件末尾处进行数据的续写。 3.2 FileReader 用于读取文本文件的流对象。 用于关联文本文件。 构造函数：在读取流对象初始化的时候，必须要指定一个被读取的文件。 如果该文件不存在会发生FileNotFoundException.12345678910111213FileReader(String filename); /** *将文本数据存储到一个文件中 */ class Demo &#123; public static void main(String[] args) throws IOException &#123; FileWriter fw = new FileWrier(&quot;demo.txt&quot;); fw.write(&quot;abcdec&quot;); fw.flush(); fw.write(&quot;kkkk&quot;); fw.close(); &#125; &#125; 对于读取或者写入流对象的构造函数，以及读写方法，还有刷新关闭功能都会抛出IOException 或其子类。 所以都要进行处理。或者throws抛出，或者try ……catch处理。1234567891011121314151617181920212223/** *完整的异常处理方式 */ class Demo &#123; public static void main(String[] args) &#123; FileWriter fw = null; try &#123; fw = new FileWrier(&quot;z:\\demo.txt&quot;); fw.write(&quot;abcdec&quot;); fw.flush(); fw.write(&quot;kkkk&quot;); &#125; catch(IOException e) &#123; System.out.println(e.toString()); &#125; finally&#123; if(fw!=null) try &#123; fw.close(); &#125; catch(IOException e) &#123; System.out.println(&quot;close:&quot;+e.toString()); &#125; &#125; &#125; &#125; 另一个小细节，当指定绝对路径时，定义目录分隔符有两种方式： 反斜线 但是一定要写两个。\ new FileWriter(“c:\demo.txt”); 斜线 / 写一个即可。 new FileWriter(“c:/demo.txt”); 1234567891011121314151617181920212223242526272829303132333435363738394041/** *读取一个已有的文本文件，将文本数据打印出来 *一次读一个字符就打印出来，效率不高。 */class Demo &#123; public static void main(String[] args) throws IOException &#123; FileReader fr = new FileReader(&quot;demo.txt&quot;); int ch = 0; //一次读一个字符 while((ch=fr.read())!=-1) &#123; System.out.print((char)ch); &#125; fr.close(); &#125; &#125; /** *读一个字符就存入字符数组里，读完1Kb再打印 */ class Demo &#123; public static void main(String[] args) &#123; FileReader fr = null; try &#123; fr = new FileReader(&quot;demo.txt&quot;); char[] buf = new char[1024];//该长度通常都是1024的整数倍 int len = 0; while((len=fr.read(buf))!=-1) &#123; System.out.println(new String(buf,0,len)); &#125; &#125; catch(IOException e) &#123; System.out.println(e.toString()); &#125; finally &#123; if(fr!=null) try&#123; fr.close(); &#125; catch(IOException e)&#123; System.out.println(&quot;close:&quot;+e.toString()); &#125; &#125; &#125; &#125; 4. BufferedWriter和BufferedReader缓冲区的出现提高了对流的操作效率。原理：其实就是将数组进行封装。 对应的对象： BufferedWriter特有方法： newLine()：跨平台的换行符 对应的对象：BufferedReader：特有方法： readLine():一次读一行，到行标记时，将行标记之前的字符数据作为字符串返回。当读到末尾时，返回null。 在使用缓冲区对象时，要明确，缓冲的存在是为了增强流的功能而存在，所以在建立缓冲区对象时，要先有流对象存在。其实缓冲内部就是在使用流对象的方法，只不过加入了数组对数据进行了临时存储。为了提高操作数据的效率。代码上的体现： 写入缓冲区对象。12345 //建立缓冲区对象必须把流对象作为参数传递给缓冲区的构造函数BufferedWriter bufw = new BufferedWriter(new FileWriter(&quot;buf.txt&quot;)); bufw.write(&quot;abce&quot;);//将数据写入到了缓冲区bufw.flush();//对缓冲区的数据进行刷新。将数据刷到目的地中bufw.close();//关闭缓冲区，其实关闭的是被包装在内部的流对象 读取缓冲区对象。123456BufferedReader bufr = new BufferedReader(new FileReader(&quot;buf.txt&quot;)); String line = null; //按照行的形式取出数据。取出的每一个行数据不包含回车符while((line=bufr.readLine())!=null) &#123; System.out.println(line); &#125; bufr.close(); 通过缓冲区的形式，对文本文件进行拷贝。123456789101112public static void main(String[] args) &#123; BufferedReader bufr = new BufferedReader(new FileReader(&quot;a.txt&quot;)); BufferedWriter bufw = new BufferedWriter(new FileWriter(&quot;b.txt&quot;)); String line = null; while((line=bufr.readLine())!=null) &#123; bufw.write(line); bufw.newLine(); bufw.flush(); &#125; bufw.close(); bufr.close(); &#125; 5. readLine()方法的原理其实缓冲区中的该方法，用的还是与缓冲区关联的流对象的read方法。只不过，每一次读到一个字符，先不进行具体操作，先进行临时存储。当读取到回车标记时，将临时容器中存储的数据一次性返回。既然明确了原理，我们也可以实现一个类似功能的方法。123456789101112131415161718192021222324252627282930313233class MyBufferedReader &#123; private Reader r; MyBufferedReader(Reader r) &#123; this.r = r; &#125; public String myReadLine()throws IOException &#123; //1,创建临时容器 StringBuilder sb = new StringBuilder(); //2,循环的使用read方法不断读取字符 int ch = 0; while((ch=r.read())!=-1) &#123; if(ch==&apos;\r&apos;) continue; if(ch==&apos;\n&apos;) return sb.toString(); else sb.append((char)ch); &#125; if(sb.length()!=0) return sb.toString(); return null; &#125; public void myClose()throws IOException &#123; r.close(); &#125; &#125; main() &#123; MyBufferedReader myBufr = new MyBufferedReader(new FileReader(&quot;a.txt&quot;)); String line = null; while((line=myBufr.myReadLine())!=null) &#123; System.out.println(line); &#125; &#125; 6. 装饰设计模式字符流缓冲区的出现基于流并增强了流的功能。这也是一种设计模式的体现：装饰设计模式。 实现了对一组对象进行功能的增强。该模式和继承有什么区别呢？它比继承有更好的灵活性。通常装饰类和被装饰类都同属与一个父类或者接口。 Writer&nbsp;&nbsp;|–MediaWriter&nbsp;&nbsp;&nbsp;&nbsp;|–TextWriter 注：MediaWriter与TextWtiter两个类在JDK 中并不存在，为了更形象的举例说明而“创建”的，不要误解 需求：想要对数据的操作提高效率，就用到了缓冲技术通过所学习的继承特性。可以建立子类复写父类中的write方法即可。 Writer：注：不要误解，以下两个对象不存在，只为举例.&nbsp;&nbsp;|–MediaWriter&nbsp;&nbsp;&nbsp;&nbsp;|–BufferedMediaWriter&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|–TextWriter&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|–BufferedTextWriter 当Writer中子类对象过多，那么为了提高每一个对象效率，每一个对象都有一个自己的子类Buffered。虽然可以实现，但是继承体系变的很臃肿。那么是否可以对其进行一下优化呢？其实子类都是在使用缓冲技术。可不可以对缓冲技术进行描述，将需要增强的对象传递给缓冲区即可。1234class BufferdWriter &#123; BufferedWriter(MediaWriter mw) &#123; &#125; BufferedWriter(TextWriter mw) &#123; &#125; &#125; 该类虽然完成了对已有两个对象的增强。但是当有新的对象出现时，还要继续在该类中添加构造函数。这样不利于扩展和维护。将对这些对象父类型进行操作即可。这就是多态，提高了程序的扩展性。同时BufferedWriter中一样具体write方法，只不过是增强后的write。所以BuferedWriter也应该是Writer中的一个子类。123456class BufferedWriter extends Writer &#123; private Writer w; BufferedWriter(Writer w)&#123; this.w = w; &#125; &#125; Writer&nbsp;&nbsp;|–MediaWriter&nbsp;&nbsp;&nbsp;&nbsp;|–TextWriter&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|–BufferedWriter 这样就会发现装饰设计模式，优化增强功能的部分。比继承要灵活很多。可以在读一行的基础上添加一个行号。12345678910111213141516class MyLineNumberReader extends MyBufferedReader &#123; private int number; MyLineNumberReader(Reader r) &#123; super(r); &#125; public String myReadLine()&#123; number++; return super.myReadLine(); &#125; public void setNumber(int number)&#123; this.number = number; &#125; public int getNumber()&#123; return number; &#125; &#125; 本文链接：http://www.sguotao.com/Java-IO流-2010-12-01-io-2.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java IO流 IO流的介绍]]></title>
      <url>%2FJava-IO%E6%B5%81-2010-11-30-io-1.html</url>
      <content type="text"><![CDATA[在学习Java IO相关的内容时，会遇到成对出现的流，为方便日后查阅，整理以下笔记内容： Java IO流 1 IO流的介绍 Java IO流 2 字符流 Java IO流 3 字节流 Java IO流 4 File类 Java IO流 5 序列流 1. IO流对象的继承关系 2. 常用与流有关的对象 3. IO流 IO 流用于处理设备上的数据设备：硬盘，内存，键盘录入。 IO 有具体的分类根据处理的数据类型不同：字节流和字符流。根据流向不同：输入流和输出流。 字符流的由来因为文件编码的不同，而有了对字符进行高效操作的字符流对象。原理：其实就是基于字节流读取字节时，去查了指定的码表。 字节流和字符流的区别 字节流读取的时候，读到一个字节就返回一个字节。字符流使用了字节流读到一个或多个字节(中文对应的字节数是两个，在UTF-8 码表中是3个字节)时先去查指定的编码表，将查到的字符返回。 字节流可以处理所有类型数据，如图片，mp3，avi。 而字符流只能处理字符数据。 结论：只要是处理纯文本数据，就要优先考虑使用字符流。除此之外都用字节流。 IO的体系。所具备的基本功能就有两个：读 和 写 字节流InputStream（读）,OutputStream（写）。 字符流：Reader（读），Writer（写）。 基本的读写操作方式因为数据通常都以文件形式存在。所以就要找到IO 体系中可以用于操作文件的流对象。 通过名称可以更容易获取该对象。 因为IO 体系中的子类名后缀绝大部分是父类名称。而前缀都是体现子类功能的名字。 本文链接：http://www.sguotao.com/Java-IO流-2010-11-30-io-1.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[集合框架篇5 Set]]></title>
      <url>%2FJava-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-2012-11-26-java-collections-5.html</url>
      <content type="text"><![CDATA[1. 概述Java -中的Set和正好和数学上直观的集（set）的概念是相同的。Set最大的特性就是不允许在其中存放的元素是重复的。根据这个特点，我们就可以使用Set 这个接口来实现前面提到的关于商品种类的存储需求。Set 可以被用来过滤在其他集合中存放的元素，从而得到一个没有包含重复新的集合。 2. 常用方法按照定义，Set 接口继承 Collection 接口，而且它不允许集合中存在重复项。所有原始方法都是现成的，没有引入新方法。具体的 Set 实现类依赖添加的对象的 equals() 方法来检查等同性。我们简单的描述一下各个方法的作用：1234567891011121314public int size() ：返回set中元素的数目，如果set包含的元素数大于 Integer.MAX_VALUE，返回Integer.MAX_VALUE public boolean isEmpty() ：如果set中不含元素，返回true public boolean contains(Object o) ：如果set包含指定元素，返回true public Iterator iterator() ：返回set中元素的迭代器，元素返回没有特定的顺序，除非set是提高了该保证的某些类的实例 public Object[] toArray() ：返回包含set中所有元素的数组 public Object[] toArray(Object[] a) ：返回包含set中所有元素的数组，返回数组的运行时类型是指定数组的运行时类型 public boolean add(Object o) ：如果set中不存在指定元素，则向set加入public boolean remove(Object o) ：如果set中存在指定元素，则从set中删除 public boolean removeAll(Collection c) ：如果set包含指定集合，则从set中删除指定集合的所有元素 public boolean containsAll(Collection c) ：如果set包含指定集合的所有元素，返回 true。如果指定集合也是一个set，只有是当前set的子集时，方法返回true public boolean addAll(Collection c) ：如果set中中不存在指定集合的元素，则向set中加入所有元素 public boolean retainAll(Collection c) ：只保留set中所含的指定集合的元素（可选操作）。换言之，从set中删除所有指定集合不包含的元素。 如果指定集合也是一个 set，那么该操作修改set的效果是使它的值为两个set的交集 public boolean removeAll(Collection c) ：如果set包含指定集合，则从set中删除指定集合的所有元素 public void clear() ：从set中删除所有元素 “集合框架” 支持 Set 接口两种普通的实现：HashSet 和 TreeSet以及LinkedHashSet。下表中是Set的常用实现类的描述： 在更多情况下，您会使用 HashSet 存储重复自由的集合。同时HashSet中也是采用了Hash算法的方式进行存取对象元素的。所以添加到 HashSet 的对象对应的类也需要采用恰当方式来实现 hashCode() 方法。虽然大多数系统类覆盖了 Object 中缺省的 hashCode() 实现，但创建您自己的要添加到 HashSet 的类时，别忘了覆盖 hashCode()。 对于Set的使用，我们先以一个简单的例子来说明：12345678910111213141516171819202122232425262728293031323334353637import java.util.*;public class HashSetDemo &#123; public static void main(String[] args) &#123; Set set1 = new HashSet(); if (set1.add(&quot;a&quot;)) &#123;//添加成功 System.out.println(&quot;1 add true&quot;); &#125; if (set1.add(&quot;a&quot;)) &#123;//添加失败 System.out.println(&quot;2 add true&quot;); &#125; set1.add(&quot;000&quot;);//添加对象到Set集合中 set1.add(&quot;111&quot;); set1.add(&quot;222&quot;); System.out.println(&quot;集合set1的大小：&quot;+set1.size()); System.out.println(&quot;集合set1的内容：&quot;+set1); set1.remove(&quot;000&quot;);//从集合set1中移除掉 &quot;000&quot; 这个对象 System.out.println(&quot;集合set1移除 000 后的内容：&quot;+set1); System.out.println(&quot;集合set1中是否包含000 ：&quot;+set1.contains(&quot;000&quot;)); System.out.println(&quot;集合set1中是否包含111 ：&quot;+set1.contains(&quot;111&quot;)); Set set2=new HashSet(); set2.add(&quot;111&quot;); set2.addAll(set1);//将set1 集合中的元素全部都加到set2中 System.out.println(&quot;集合set2的内容：&quot;+set2); set2.clear();//清空集合 set1 中的元素 System.out.println(&quot;集合set2是否为空 ：&quot;+set2.isEmpty()); Iterator iterator = set1.iterator();//得到一个迭代器 while (iterator.hasNext()) &#123;//遍历 Object element = iterator.next(); System.out.println(&quot;iterator = &quot; + element); &#125; //将集合set1转化为数组 Object s[]= set1.toArray(); for(int i=0;i&lt;s.length;i++)&#123; System.out.println(s[i]); &#125; &#125;&#125; 程序执行的结果为：12345678910111213141 add true集合set1的大小：4集合set1的内容：[222, a, 000, 111]集合set1移除 000 后的内容：[222, a, 111]集合set1中是否包含000 ：false集合set1中是否包含111 ：true集合set2的内容：[222, a, 111]集合set2是否为空 ：trueiterator = 222iterator = aiterator = 111222a111 从上面的这个简单的例子中，我们可以发现，Set中的方法与直接使用Collection中的方法一样。唯一需要注意的就是Set中存放的元素不能重复。 我们再看一个例子，来了解一下其它的Set的实现类的特性：1234567891011121314151617181920package c08;import java.util.*;public class SetSortExample &#123; public static void main(String args[]) &#123; Set set1 = new HashSet(); Set set2 = new LinkedHashSet(); for(int i=0;i&lt;5;i++)&#123; //产生一个随机数，并将其放入Set中 int s=(int) (Math.random()*100); set1.add(new Integer( s)); set2.add(new Integer( s)); System.out.println(&quot;第 &quot;+i+&quot; 次随机数产生为：&quot;+s); &#125; System.out.println(&quot;未排序前HashSet：&quot;+set1); System.out.println(&quot;未排序前LinkedHashSet：&quot;+set2); //使用TreeSet来对另外的Set进行重构和排序 Set sortedSet = new TreeSet(set1); System.out.println(&quot;排序后 TreeSet ：&quot;+sortedSet); &#125;&#125; 该程序的一次执行结果为：12345678第 0 次随机数产生为：96第 1 次随机数产生为：64第 2 次随机数产生为：14第 3 次随机数产生为：95第 4 次随机数产生为：57未排序前HashSet：[64, 96, 95, 57, 14]未排序前LinkedHashSet：[96, 64, 14, 95, 57]排序后 TreeSet ：[14, 57, 64, 95, 96] 从这个例子中，我们可以知道HashSet的元素存放顺序和我们添加进去时候的顺序没有任何关系，而LinkedHashSet 则保持元素的添加顺序。TreeSet则是对我们的Set中的元素进行排序存放。 一般来说，当您要从集合中以有序的方式抽取元素时，TreeSet 实现就会有用处。为了能顺利进行，添加到 TreeSet 的元素必须是可排序的。 而您同样需要对添加到TreeSet中的类对象实现 Comparable 接口的支持。对于Comparable接口的实现，在前一小节的Map中已经简单的介绍了一下。我们暂且假定一棵树知道如何保持 java.lang 包装程序器类元素的有序状态。一般说来，先把元素添加到 HashSet，再把集合转换为 TreeSet 来进行有序遍历会更快。这点和HashMap的使用非常的类似。 其实Set的实现原理是基于Map上面的。通过下面我们对Set的进一步分析大家就能更加清楚的了解这点了。 3. 实现原理Java中Set的概念和数学中的集合(set)一致，都表示一个集内可以存放的元素是不能重复的。前面我们会发现，Set中很多实现类和Map中的一些实现类的使用上非常的相似。而且前面再讲解Map的时候，我们也提到：Map中的“键值对”，其中的“键”是不能重复的。这个和Set中的元素不能重复一致。我们以HashSet为例来分析一下，会发现其实Set利用的就是Map中“键”不能重复的特性来实现的。 先看看HashSet中的有哪些属性,再结合构造函数来看看： 通过这些方法，我们可以发现，其实HashSet的实现，全部的操作都是基于HashMap来进行的。我们看看是如何通过HashMap来保证我们的HashSet的元素不重复性的： 看到这个操作我们可以发现HashSet的巧妙实现：就是建立一个“键值对”，“键”就是我们要存入的对象，“值”则是一个常量。这样可以确保，我们所需要的存储的信息之是“键”。而“键”在Map中是不能重复的，这就保证了我们存入Set中的所有的元素都不重复。而判断是否添加元素成功，则是通过判断我们向Map中存入的“键值对”是否已经存在，如果存在的话，那么返回值肯定是常量：PRESENT ，表示添加失败。如果不存在，返回值就为null 表示添加成功。我们再看看其他的方法实现： 了解了这些后，我们就不难理解，为什么HashMap中需要注意的地方，在HashSet中也同样的需要注意。其他的Set的实现类也是差不多的原理。至此对于Set我们就应该能够比较好的理解了。 4. 总结用“集合框架”设计软件时，记住该框架四个基本接口的下列层次结构关系会有用处： Collection 接口是一组允许重复的对象。 Set 接口继承 Collection，但不允许重复。 List 接口继承 Collection，允许重复，并引入位置下标。 Map 接口既不继承 Set 也不继承 Collection, 存取的是键值对 本文链接：http://www.sguotao.com/Java-集合框架-2012-11-26-java-collections-5.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[集合框架篇4 Map]]></title>
      <url>%2FJava-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-2012-11-25-java-collection-4-map.html</url>
      <content type="text"><![CDATA[1. 概述数学中的映射关系在Java中就是通过Map来实现的。它表示，里面存储的元素是一个对（pair）,我们通过一个对象，可以在这个映射关系中找到另外一个和这个对象相关的东西。前面提到的我们对于根据帐号名得到对应的人员的信息，就属于这种情况的应用。我们讲一个人员的帐户名和这人员的信息作了一个映射关系，也就是说，我们把帐户名和人员信息当成了一个“键值对”，“键”就是帐户名，“值”就是人员信息。下面我们先看看Map 接口的常用方法。 2. 常用方法Map 接口不是 Collection 接口的继承。而是从自己的用于维护键-值关联的接口层次结构入手。按定义，该接口描述了从不重复的键到值的映射。我们可以把这个接口方法分成三组操作：改变、查询和提供可选视图。改变操作允许您从映射中添加和除去键-值对。键和值都可以为 null。但是，您不能把 Map 作为一个键或值添加给自身。123456789Object put(Object key,Object value)：//用来存放一个键-值对Map中Object remove(Object key)：//根据key(键)，移除一个键-值对，并将值返回void putAll(Map mapping) ：//将另外一个Map中的元素存入当前的Map中void clear() ：//清空当前Map中的元素，查询操作允许您检查映射内容：Object get(Object key) ：//根据key(键)取得对应的值boolean containsKey(Object key) ：//判断Map中是否存在某键（key）boolean containsValue(Object value)://判断Map中是否存在某值(value)int size()://返回Map中 键-值对的个数boolean isEmpty() ：//判断当前Map是否为空 最后一组方法允许您把键或值的组作为集合来处理。123public Set keySet() ：//返回所有的键（key），并使用Set容器存放public Collection values() ：//返回所有的值（Value），并使用Collection存放public Set entrySet() ：//返回一个实现 Map.Entry 接口的元素 Set 因为映射中键的集合必须是唯一的，就使用 Set 来支持。因为映射中值的集合可能不唯一，就使用Collection 来支持。最后一个方法返回一个实现 Map.Entry 接口的元素 Set。我们看看Map的常用实现类的比较，如下表： 下面我们看一个简单的例子：12345678910111213141516171819202122232425import java.util.*; public class MapTest &#123;public static void main(String[] args) &#123; Map map1 = new HashMap(); Map map2 = new HashMap(); map1.put(&quot;1&quot;,&quot;aaa1&quot;); map1.put(&quot;2&quot;,&quot;bbb2&quot;); map2.put(&quot;10&quot;,&quot;aaaa10&quot;); map2.put(&quot;11&quot;,&quot;bbbb11&quot;);//根据键 &quot;1&quot; 取得值：&quot;aaa1&quot; System.out.println(&quot;map1.get(\&quot;1\&quot;)=&quot;+map1.get(&quot;1&quot;)); // 根据键 &quot;1&quot; 移除键值对&quot;1&quot;-&quot;aaa1&quot;System.out.println(&quot;map1.remove(\&quot;1\&quot;)=&quot;+map1.remove(&quot;1&quot;)); System.out.println(&quot;map1.get(\&quot;1\&quot;)=&quot;+map1.get(&quot;1&quot;)); map1.putAll(map2);//将map2全部元素放入map1中 map2.clear();//清空map2 System.out.println(&quot;map1 IsEmpty?=&quot;+map1.isEmpty()); System.out.println(&quot;map2 IsEmpty?=&quot;+map2.isEmpty()); System.out.println(&quot;map1 中的键值对的个数size = &quot;+map1.size()); System.out.println(&quot;KeySet=&quot;+map1.keySet());//set System.out.println(&quot;values=&quot;+map1.values());//Collection System.out.println(&quot;entrySet=&quot;+map1.entrySet()); System.out.println(&quot;map1 是否包含键：11 = &quot;+map1.containsKey(&quot;11&quot;)); System.out.println(&quot;map1 是否包含值：aaa1 = &quot;+map1.containsValue(&quot;aaa1&quot;)); &#125;&#125; 运行输出结果为：1234567891011map1.get(&quot;1&quot;)=aaa1map1.remove(&quot;1&quot;)=aaa1map1.get(&quot;1&quot;)=nullmap1 IsEmpty?=falsemap2 IsEmpty?=truemap1 中的键值对的个数size = 3KeySet=[10, 2, 11]values=[aaaa10, bbb2, bbbb11]entrySet=[10=aaaa10, 2=bbb2, 11=bbbb11]map1 是否包含键：11 = truemap1 是否包含值：aaa1 = false 在该例子中，我们创建一个HashMap，并使用了一下Map接口中的各个方法。其中Map中的entrySet()方法先提一下，该方法返回一个实现 Map.Entry 接口的对象集合。集合中每个对象都是底层 Map 中一个特定的键-值对。 Map.Entry 接口是Map 接口中的一个内部接口，该内部接口的实现类存放的是键值对。在下面的实现原理中，我们会对这方面再作介绍，现在我们先不管这个它的具体实现。 我们再看看排序的Map是如何使用：123456789101112131415161718import java.util.*;public class MapSortExample &#123; public static void main(String args[]) &#123; Map map1 = new HashMap(); Map map2 = new LinkedHashMap(); for(int i=0;i&lt;10;i++)&#123; double s=Math.random()*100;//产生一个随机数，并将其放入Map中 map1.put(new Integer((int) s),&quot;第 &quot;+i+&quot; 个放入的元素：&quot;+s+&quot;\n&quot;); map2.put(new Integer((int) s),&quot;第 &quot;+i+&quot; 个放入的元素：&quot;+s+&quot;\n&quot;); &#125; System.out.println(&quot;未排序前HashMap：&quot;+map1); System.out.println(&quot;未排序前LinkedHashMap：&quot;+map2); //使用TreeMap来对另外的Map进行重构和排序 Map sortedMap = new TreeMap(map1); System.out.println(&quot;排序后：&quot;+sortedMap); System.out.println(&quot;排序后：&quot;+new TreeMap(map2)); &#125;&#125; 该程序的一次运行结果为：1234567891011121314151617181920212223242526272829303132333435363738394041424344未排序前HashMap：&#123;64=第 1 个放入的元素：64.05341725531845, 15=第 9 个放入的元素：15.249165766266382, 2=第 4 个放入的元素：2.66794706854534, 77=第 0 个放入的元素：77.28814965781416, 97=第 5 个放入的元素：97.32893518378948, 99=第 2 个放入的元素：99.99412014935982, 60=第 8 个放入的元素：60.91451419025399, 6=第 3 个放入的元素：6.286974058646977, 1=第 7 个放入的元素：1.8261658496439903, 48=第 6 个放入的元素：48.736039522423106&#125;未排序前LinkedHashMap：&#123;77=第 0 个放入的元素：77.28814965781416, 64=第 1 个放入的元素：64.05341725531845, 99=第 2 个放入的元素：99.99412014935982, 6=第 3 个放入的元素：6.286974058646977, 2=第 4 个放入的元素：2.66794706854534, 97=第 5 个放入的元素：97.32893518378948, 48=第 6 个放入的元素：48.736039522423106, 1=第 7 个放入的元素：1.8261658496439903, 60=第 8 个放入的元素：60.91451419025399, 15=第 9 个放入的元素：15.249165766266382&#125;排序后：&#123;1=第 7 个放入的元素：1.8261658496439903, 2=第 4 个放入的元素：2.66794706854534, 6=第 3 个放入的元素：6.286974058646977, 15=第 9 个放入的元素：15.249165766266382, 48=第 6 个放入的元素：48.736039522423106, 60=第 8 个放入的元素：60.91451419025399, 64=第 1 个放入的元素：64.05341725531845, 77=第 0 个放入的元素：77.28814965781416, 97=第 5 个放入的元素：97.32893518378948, 99=第 2 个放入的元素：99.99412014935982&#125;排序后：&#123;1=第 7 个放入的元素：1.8261658496439903, 2=第 4 个放入的元素：2.66794706854534, 6=第 3 个放入的元素：6.286974058646977, 15=第 9 个放入的元素：15.249165766266382, 48=第 6 个放入的元素：48.736039522423106, 60=第 8 个放入的元素：60.91451419025399, 64=第 1 个放入的元素：64.05341725531845, 77=第 0 个放入的元素：77.28814965781416, 97=第 5 个放入的元素：97.32893518378948, 99=第 2 个放入的元素：99.99412014935982&#125; 从运行结果，我们可以看出，HashMap的存入顺序和输出顺序无关。而LinkedHashMap 则保留了键值对的存入顺序。TreeMap则是对Map中的元素进行排序。在实际的使用中我们也经常这样做：使用HashMap或者LinkedHashMap 来存放元素，当所有的元素都存放完成后，如果使用则是需要一个经过排序的Map的话，我们再使用TreeMap来重构原来的Map对象。这样做的好处是：因为HashMap和LinkedHashMap 存储数据的速度比直接使用TreeMap 要快，存取效率要高。当完成了所有的元素的存放后，我们再对整个的Map中的元素进行排序。这样可以提高整个程序的运行的效率，缩短执行时间。 这里需要注意的是，TreeMap中是根据键（Key）进行排序的。而如果我们要使用TreeMap来进行正常的排序的话，Key 中存放的对象必须实现Comparable 接口。我们简单介绍一下这个接口： 3. Comparable 接口在 java.lang 包中，Comparable 接口适用于一个类有自然顺序的时候。假定对象集合是同一类型，该接口允许您把集合排序成自然顺序。 它只有一个方法：compareTo() 方法，用来比较当前实例和作为参数传入的元素。如果排序过程中当前实例出现在参数前（当前实例比参数大），就返回某个负值。如果当前实例出现在参数后（当前实例比参数小），则返回正值。否则，返回零。如果这里不要求零返回值表示元素相等。零返回值可以只是表示两个对象在排序的时候排在同一个位置。 上面例子中的整形的包装类：Integer 就实现了该接口。我们可以看一下这个类的源码：可以看到compareTo 方法里面通过判断当前的Integer对象的值是否大于传入的参数的值来得到返回值的。在 Java 2 SDK，版本 1.2 中有十四个类实现 Comparable 接口。下表展示了它们的自然排序。虽然一些类共享同一种自然排序，但只有相互可比的类才能排序。 这里只是简单的介绍一下排序接口，如果要详细的了解排序部分内容的话，可以参考文章最后的附录部分对于排序的更加详细的描述。我们再回到Map中来，Java提高的API中除了上面介绍的几种Map比较常用以为还有一些Map，大家可以了解一下： WeakHashMap： WeakHashMap 是 Map 的一个特殊实现，它只用于存储对键的弱引用。当映射的某个键在 WeakHashMap 的外部不再被引用时，就允许垃圾收集器收集映射中相应的键值对。使用 WeakHashMap 有益于保持类似注册表的数据结构，其中条目的键不再能被任何线程访问时，此条目就没用了。 IdentifyHashMap： Map的一种特性实现，关键属性的hash码不是由hashCode()方法计算，而是由 System.identityHashCode 方法计算，使用==进行比较而不是equals()方法。 通过简单的对与Map中各个常用实现类的使用，为了更好的理解Map，下面我们再来了解一下Map的实现原理。 4.实现原理有的人可能会认为 Map 会继承 Collection。在数学中，映射只是对（pair）的集合。但是，在“集合框架”中，接口 Map 和 Collection 在层次结构没有任何亲缘关系，它们是截然不同的。这种差别的原因与 Set 和 Map 在 Java 库中使用的方法有关。Map 的典型应用是访问按关键字存储的值。它支持一系列集合操作的全部，但操作的是键-值对，而不是单个独立的元素。因此 Map 需要支持 get() 和 put() 的基本操作，而 Set 不需要。此外，还有返回 Map 对象的 Set 视图的方法：1Set set = aMap.keySet(); 下面我们以HashMap为例，对Map的实现机制作一下更加深入一点的理解。 因为HashMap里面使用Hash算法，所以在理解HashMap之前，我们需要先了解一下Hash算法和Hash表。 Hash，一般翻译做“散列”，也有直接音译为”哈希”的，就是把任意长度的输入（又叫做 预映射， pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能 会散列成相同的输出，而不可能从散列值来唯一的确定输入值。 说的通俗一点，Hash算法的意义在于提供了一种快速存取数据的方法,它用一种算法建立键值与真实值之间的对应关系,(每一个真实值只能有一个键值,但是一个键值可以对应多个真实值),这样可以快速在数组等里面存取数据。 我们建立一个HashTable（哈希表），该表的长度为N，然后我们分别在该表中的格子中存放不同的元素。每个格子下面存放的元素又是以链表的方式存放元素。 当添加一个新的元素Entry 的时候，首先我们通过一个Hash函数计算出这个Entry元素的Hash值hashcode。通过该hashcode值，就可以直接定位出我们应该把这个Entry元素存入到Hash表的哪个格子中，如果该格子中已经存在元素了，那么只要把新的Entry元存放到这个链表中即可。 如果要查找一个元素Entry的时候，也同样的方式，通过Hash函数计算出这个Entry元素的Hash值hashcode。然后通过该hashcode值，就可以直接找到这个Entry是存放到哪个格子中的。接下来就对该格子存放的链表元素进行逐个的比较查找就可以了。 举一个比较简单的例子来说明这个算法的运算方式：假定我们有一个长度为8的Hash表（可以理解为一个长度为8的数组）。在这个Hash表中存放数字：如下表 假定我们的Hash函数为：Hashcode = X%8 ——– 对8 取余数其中X是我们需要放入Hash表中的数字，而这个函数返回的Hashcode就是Hash码。假定我们有下面10个数字需要依次存入到这个Hash表中：11 , 23 , 44 , 9 , 6 , 32 , 12 , 45 , 57 , 89通过上面的Hash函数，我们可以得到分别对应的Hash码：11――3 ; 23――7 ；44――4 ；9――1；6――6；32――0；12――4；45――5；57――1；89――1；计算出来的Hash码分别代表，该数字应该存放到Hash表中的哪个对应数字的格子中。如果改格子中已经有数字存在了，那么就以链表的方式将数字依次存放在该格子中，如下表： Hash表和Hash算法的特点就是它的存取速度比数组差一些，但是比起单纯的链表，在查找和存储方面却要好很多。同时数组也不利于数据的重构而排序等方面的要求。 更具体的说明，读者可以参考数据结构相关方面的书籍。 简单的了解了一下Hash算法后，我们就来看看HashMap的属性有哪些：里面最重要的3个属性： transient Entry[] table: 用来存放键值对的对象Entry数组，也就是Hash表 transient int size：当前Map中存放的键值对的个数 final float loadFactor：负载因子，用来决定什么情况下应该对Entry进行扩容 我们Entry 对象是Map接口中的一个内部接口。即是使用它来保存我们的键值对的。 我们看看这个Entry 内部接口在HashMap中的实现：通过查看源码，我们可以看到Entry类有点类似一个单向链表。其中： final Object key 和 Object value;存放的就是我们放入Map中的键值对。而属性Entry next;表示当前键值对的下一个键值对是哪个Entry。 接下来，我们看看HashMap的主要的构造函数：我们主要看看 public HashMap(int initialCapacity, float loadFactor)因为，另外两个构造函数实行也是同样的方式进行构建一个HashMap 的。该构造函数： 首先是判断参数int initialCapacity和float loadFactor是否合法 然后确定Hash表的初始化长度。确定的策略是：通过传进来的参数initialCapacity 来找出第一个大于它的2的次方的数。比如说我们传了18这样的一个initialCapacity 参数，那么真实的table数组的长度为2的5次方，即32。之所以采用这种策略来构建Hash表的长度，是因为2的次方的运算对于现代的处理器来说，可以通过一些方法得到更加好的执行效率。 接下来就是得到重构因子（threshold）了，这个属性也是HashMap中的一个比较重要的属性，它表示，当Hash表中的元素被存放了多少个之后，我们就需要对该Hash表进行重构。 最后就是使用得到的初始化参数capacity 来构建Hash表：Entry[] table。 下面我们看看一个键值对是如何添加到HashMap中的。该put方法是用来添加一个键值对（key-value）到Map中，如果Map中已经存在相同的键的键值对的话，那么就把新的值覆盖老的值，并把老的值返回给方法的调用者。如果不存在一样的键，那么就返回null 。我们看看方法的具体实现： 首先我们判断如果key为null则使用一个常量来代替该key值，该行为在方法maskNull（）终将key替换为一个非null 的对象k。 计算key值的Hash码：hash 通过使用Hash码来定位，我们应该把当前的键值对存放到Hash表中的哪个格子中。indexFor()方法计算出的结果：i 就是Hash表（table）中的下标。 然后遍历当前的Hash表中table[i]格中的链表。从中判断已否已经存在一样的键(Key)的键值对。如果存在一样的key的键，那么就用新的value覆写老的value，并把老的value返回 如果遍历后发现没有存在同样的键值对，那么就增加当前键值对到Hash表中的第i个格子中的链表中。并返回null 。 最后我们看看一个键值对是如何添加到各个格子中的链表中的：我们先看void addEntry(int hash, Object key, Object value, int bucketIndex)方法，该方法的作用就用来添加一个键值对到Hash表的第bucketIndex个格子中的链表中去。这个方法作的工作就是： 创建一个Entry对象用来存放键值对。 添加该键值对 —- Entry对象到链表中 最后在size属性加一，并判断是否需要对当前的Hash表进行重构。如果需要就在 void resize(int newCapacity)方法中进行重构。之所以需要重构，也是基于性能考虑。大家可以考虑这样一种情况，假定我们的Hash表只有4个格子，那么我们所有的数据都是放到这4个格子中。如果存储的数据量比较大的话，例如100。这个时候，我们就会发现，在这个Hash表中的4个格子存放的4个长长的链表。而我们每次查找元素的时候，其实相当于就是遍历链表了。这种情况下，我们用这个Hash表来存取数据的性能实际上和使用链表差不多了。 但是如果我们对这个Hash表进行重构，换为使用Hash表长度为200的表来存储这100个数据，那么平均2个格子里面才会存放一个数据。这个时候我们查找的数据的速度就会非常的快。因为基本上每个格子中存放的链表都不会很长，所以我们遍历链表的次数也就很少，这样也就加快了查找速度。但是这个时候又存在了另外的一个问题。我们使用了至少200个数据的空间来存放100个数据，这样就造成至少100个数据空间的浪费。 在速度和空间上面，我们需要找到一个适合自己的中间值。在HashMap中我们通过负载因子（loadFactor）来决定应该什么时候应该重构我们的Hash表，以达到比较好的性能状态。 我们再看看重构Hash表的方法：void resize(int newCapacity)是如何实现的,它的实现方式比较简单： 首先判断如果Hash表的长度已经达到最大值，那么就不进行重构了。因为这个时候Hash表的长度已经达到上限，已经没有必要重构了。 然后就是构建新的Hash表 把老的Hash表中的对象数据全部转移到新的Hash表newTable中，并设置新的重构因子threshold 对于HashMap中的实现原理，我们就分析到这里。大家可能会发现，HashCode的计算，是用来定位我们的键值对应该放到Hash表中哪个格子中的关键属性。而这个HashCode的计算方法是调用的各个对象自己的实现的hashCode()方法。而这个方法是在Object对象中定义的，所以我们自己定义的类如果要在集合中使用的话，就需要正确的覆写hashCode() 方法。下面就介绍一下应该如何正确覆写hashCode()方法。 5. 覆写hashCode()在明白了HashMap具有哪些功能，以及实现原理后，了解如何写一个hashCode()方法就更有意义了。当然，在HashMap中存取一个键值对涉及到的另外一个方法为equals ()，因为该方法的覆写在高级特性已经讲解了。这里就不做过多的描述。 设计hashCode（）时最重要的因素就是：无论何时，对同一个对象调用hashCode()都应该生成同样的值。如果在将一个对象用put（）方法添加进HashMap时产生一个hashCode()值，而用get()取出时却产生了另外一个hashCode()值，那么就无法重新取得该对象了。所以，如果你的hashCode()方法依赖于对象中易变的数据，那用户就要小心了，因为此数据发生变化时，hashCode()就会产生一个不同的hash码，相当于产生了一个不同的“键”。 此外，也不应该使hashCode()依赖于具有唯一性的对象信息，尤其是使用this的值，这只能产生很糟糕的hashCode()。因为这样做无法生成一个新的“键”，使之与put()种原始的“键值对”中的“键”相同。例如，如果我们不覆写Object的hashCode()方法，那么调用该方法的时候，就会调用Object的hashCode()方法的默认实现。Object的hashCode（）方法，返回的是当前对象的内存地址。下次如果我们需要取一个一样的“键”对应的键值对的时候，我们就无法得到一样的hashCode值了。因为我们后来创建的“键”对象已经不是存入HashMap中的那个内存地址的对象了。 我们看一个简单的例子，就能更加清楚的理解上面的意思。假定我们写了一个类： Person （人），我们判断一个对象“人”是否指向同一个人，只要知道这个人的身份证号一直就可以了。先看我们没有实现hashCode的情况：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758package c08.hashEx;import java.util.*;//身份证类class Code&#123; final int id;//身份证号码已经确认,不能改变 Code(int i)&#123; id=i; &#125; //身份号号码相同，则身份证相同 public boolean equals(Object anObject) &#123; if (anObject instanceof Code)&#123; Code other=(Code) anObject; return this.id==other.id; &#125;return false; &#125; public String toString() &#123; return &quot;身份证:&quot;+id; &#125; &#125;//人员信息类class Person &#123; Code id;// 身份证 String name;// 姓名 public Person(String name, Code id) &#123; this.id=id; this.name=name; &#125; //如果身份证号相同，就表示两个人是同一个人 public boolean equals(Object anObject) &#123; if (anObject instanceof Person)&#123; Person other=(Person) anObject; return this.id.equals(other.id); &#125; return false; &#125; public String toString() &#123; return &quot;姓名:&quot;+name+&quot; 身份证:&quot;+id.id+&quot;\n&quot;; &#125;&#125;public class HashCodeEx &#123; public static void main(String[] args) &#123; HashMap map=new HashMap(); Person p1=new Person(&quot;张三&quot;,new Code(123)); map.put(p1.id,p1);//我们根据身份证来作为key值存放到Map中 Person p2=new Person(&quot;李四&quot;,new Code(456)); map.put(p2.id,p2); Person p3=new Person(&quot;王二&quot;,new Code(789)); map.put(p3.id,p3); System.out.println(&quot;HashMap 中存放的人员信息:\n&quot;+map); // 张三 改名为：张山 但是还是同一个人。 Person p4=new Person(&quot;张山&quot;,new Code(123));map.put(p4.id,p4); System.out.println(&quot;张三改名后 HashMap 中存放的人员信息:\n&quot;+map); //查找身份证为：123 的人员信息 System.out.println(&quot;查找身份证为：123 的人员信息:&quot;+map.get(new Code(123))); &#125;&#125; 运行结果为：123456789101112HashMap 中存放的人员信息:&#123;身份证:456=姓名:李四 身份证:456, 身份证:123=姓名:张三 身份证:123, 身份证:789=姓名:王二 身份证:789&#125;张三改名后 HashMap 中存放的人员信息:&#123;身份证:456=姓名:李四 身份证:456, 身份证:123=姓名:张三 身份证:123, 身份证:123=姓名:张山 身份证:123, 身份证:789=姓名:王二 身份证:789&#125;查找身份证为：123 的人员信息:null 上面的例子的演示的是，我们在一个HashMap中存放了一些人员的信息。并以这些人员的身份证最为人员的“键”。当有的人员的姓名修改了的情况下，我们需要更新这个HashMap。同时假如我们知道某个身份证号，想了解这个身份证号对应的人员信息如何，我们也可以根据这个身份证号在HashMap中得到对应的信息。 而例子的输出结果表示，我们所做的更新和查找操作都失败了。失败的原因就是我们的身份证类：Code 没有覆写hashCode()方法。这个时候，当查找一样的身份证号码的键值对的时候，使用的是默认的对象的内存地址来进行定位。这样，后面的所有的身份证号对象new Code(123) 产生的hashCode()值都是不一样的。所以导致操作失败。 下面，我们给Code类加上hashCode（）方法，然后再运行一下程序看看：12345678910111213141516171819202122//身份证类class Code&#123; final int id;//身份证号码已经确认,不能改变 Code(int i)&#123; id=i; &#125; //身份号号码相同，则身份证相同 public boolean equals(Object anObject) &#123;if (anObject instanceof Code)&#123; Code other=(Code) anObject; return this.id==other.id; &#125; return false; &#125; public String toString() &#123; return &quot;身份证:&quot;+id; &#125; //覆写hashCode方法，并使用身份证号作为hash值 public int hashCode()&#123; return id; &#125;&#125; 再次执行上面的HashCodeEx 的结果就为：1234567891011HashMap 中存放的人员信息:&#123;身份证:456=姓名:李四 身份证:456, 身份证:789=姓名:王二 身份证:789, 身份证:123=姓名:张三 身份证:123&#125;张三改名后 HashMap 中存放的人员信息:&#123;身份证:456=姓名:李四 身份证:456, 身份证:789=姓名:王二 身份证:789, 身份证:123=姓名:张山 身份证:123&#125;查找身份证为：123 的人员信息:姓名:张山 身份证:123 这个时候，我们发现。我们想要做的更新和查找操作都成功了。 对于Map部分的使用和实现，主要就是需要注意存放“键值对”中的对象的equals()方法和hashCode()方法的覆写。如果需要使用到排序的话，那么还需要实现Comparable 接口中的compareTo() 方法。我们需要注意Map中的“键”是不能重复的，而是否重复的判断，是通过调用“键”对象的equals（）方法来决定的。而在HashMap中查找和存取“键值对”是同时使用hashCode（）方法和equals（）方法来决定的。 本文链接：http://www.sguotao.com/Java-集合框架-2012-11-25-java-collection-4-map.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[集合框架篇3 List]]></title>
      <url>%2FJava-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-2012-11-24-java-collection-3.html</url>
      <content type="text"><![CDATA[1. 概述前面我们讲述的Collection接口实际上并没有直接的实现类。而List是容器的一种，表示列表的意思。当我们不知道存储的数据有多少的情况，我们就可以使用List 来完成存储数据的工作。例如前面提到的一种场景。我们想要在保存一个应用系统当前的在线用户的信息。我们就可以使用一个List来存储。因为List的最大的特点就是能够自动的根据插入的数据量来动态改变容器的大小。下面我们先看看List接口的一些常用方法。 2. 常用方法List 就是列表的意思，它是Collection 的一种，即继承了 Collection 接口，以定义一个允许重复项的有序集合。该接口不但能够对列表的一部分进行处理，还添加了面向位置的操作。List 是按对象的进入顺序进行保存对象，而不做排序或编辑操作。它除了拥有Collection接口的所有的方法外还拥有一些其他的方法。 面向位置的操作包括插入某个元素或 Collection 的功能，还包括获取、删除或更改元素的功能。在 List 中搜索元素可以从列表的头部或尾部开始，如果找到元素，还将报告元素所在的位置。1234567void add(int index, Object element): //添加对象element到位置index上 boolean addAll(int index, Collection collection) ：//在index位置后添加容器collection中所有的元素 Object get(int index) ：//取出下标为index的位置的元素 int indexOf(Object element) ：//查找对象element 在List中第一次出现的位置 int lastIndexOf(Object element) ：//查找对象element 在List中最后出现的位置 Object remove(int index) ：//删除index位置上的元素 Object set(int index, Object element) ：//将index位置上的对象替换为 element 并返回老的元素。 3. List的实现先看一下下面表格： 在“集合框架”中有两种常规的 List 实现：ArrayList 和 LinkedList。使用两种 List 实现的哪一种取决于您特定的需要。如果要支持随机访问，而不必在除尾部的任何位置插入或除去元素，那么，ArrayList 提供了可选的集合。但如果，您要频繁的从列表的中间位置添加和除去元素，而只要顺序的访问列表元素，那么，LinkedList 实现更好。 我们以ArrayList 为例，先看一个简单的例子：例子中，我们把12个月份存放到ArrayList 中，然后用一个循环，并使用get（）方法将列表中的对象都取出来。而LinkedList 添加了一些处理列表两端元素的方法（下图只显示了新方法）：使用这些新方法，您就可以轻松的把 LinkedList 当作一个堆栈、队列或其它面向端点的数据结构。我们再来看另外一个使用LinkedList 来实现一个简单的队列的例子：123456789101112131415import java.util.*;public class ListExample &#123; public static void main(String args[]) &#123; LinkedList queue = new LinkedList(); queue.addFirst(&quot;Bernadine&quot;); queue.addFirst(&quot;Elizabeth&quot;); queue.addFirst(&quot;Gene&quot;); queue.addFirst(&quot;Elizabeth&quot;); queue.addFirst(&quot;Clara&quot;); System.out.println(queue); queue.removeLast(); queue.removeLast(); System.out.println(queue); &#125;&#125; 运行程序产生了以下输出。请注意，与 Set 不同的是 List 允许重复。12【Clara, Elizabeth, Gene, Elizabeth, Bernadine】【Clara, Elizabeth, Gene】 该的程序演示了具体 List 类的使用。第一部分，创建一个由 ArrayList 支持的 List。填充完列表以后，特定条目就得到了。示例的 LinkedList 部分把 LinkedList 当作一个队列，从队列头部添加东西，从尾部除去。List 接口不但以位置友好的方式遍历整个列表，还能处理集合的子集：123ListIterator listIterator() //返回一个ListIterator 跌代器，默认开始位置为０ListIterator listIterator(int startIndex)//返回一个ListIterator 跌代器，开始startIndexList subList(int fromIndex, int toIndex) //返回一个子列表List ,元素存放fromIndex 到toIndex之前的一个元素。 处理 subList() 时，位于 fromIndex 的元素在子列表中，而位于 toIndex 的元素则不是，提醒这一点很重要。以下 for-loop 测试案例大致反映了这一点：123for (int i=fromIndex; i&lt;toIndex; i++) &#123; // process element at position i&#125; 此外，我们还应该提醒的是：对子列表的更改（如 add()、remove() 和 set() 调用）对底层 List 也有影响。 4.ListIterator 接口ListIterator 接口继承 Iterator 接口以支持添加或更改底层集合中的元素，还支持双向访问。以下源代码演示了列表中的反向循环。请注意 ListIterator 最初位于列表尾之后（list.size()），因为第一个元素的下标是0。12345List list = ...;ListIterator iterator = list.listIterator(list.size());while (iterator.hasPrevious()) &#123; Object element = iterator.previous(); // Process element&#125; 正常情况下，不用 ListIterator 改变某次遍历集合元素的方向 — 向前或者向后。虽然在技术上可能实现时，但在 previous() 后立刻调用 next()，返回的是同一个元素。把调用 next() 和 previous() 的顺序颠倒一下，结果相同。我们看一个List的例子：1234567891011121314151617181920212223242526272829import java.util.*;public class ListIteratorTest &#123; public static void main(String[] args) &#123; List list = new ArrayList(); list.add(&quot;aaa&quot;); list.add(&quot;bbb&quot;); list.add(&quot;ccc&quot;); list.add(&quot;ddd&quot;); System.out.println(&quot;下标0开始：&quot;+list.listIterator(0).next());//next() System.out.println(&quot;下标1开始:&quot;+list.listIterator(1).next());System.out.println(&quot;子List 1-3:&quot;+list.subList(1,3)); //子列表 ListIterator it = list.listIterator(); //默认从下标0开始 //隐式光标属性add操作 ,插入到当前的下标的前面 it.add(&quot;sss&quot;); while(it.hasNext())&#123; System.out.println(&quot;next Index=&quot;+it.nextIndex()+&quot;,Object=&quot;+it.next()); &#125; //set属性 ListIterator it1 = list.listIterator(); it1.next();it1.set(&quot;ooo&quot;);ListIterator it2 = list.listIterator(list.size());//下标 while(it2.hasPrevious())&#123; System.out.println(&quot;previous Index=&quot;+it2.previousIndex()+&quot;,Object=&quot;+it2.previous()); &#125; &#125;&#125; 程序的执行结果为：123456789101112下标0开始：aaa下标1开始:bbb子List 1-3:[bbb, ccc]next Index=1,Object=aaanext Index=2,Object=bbbnext Index=3,Object=cccnext Index=4,Object=dddprevious Index=4,Object=dddprevious Index=3,Object=cccprevious Index=2,Object=bbbprevious Index=1,Object=aaaprevious Index=0,Object=ooo 我们还需要稍微再解释一下 add() 操作。添加一个元素会导致新元素立刻被添加到隐式光标的前面。因此，添加元素后调用 previous() 会返回新元素，而调用 next() 则不起作用，返回添加操作之前的下一个元素。下标的显示方式，如下图所示：对于List 的基本用法我们学会了，下面我们来进一步了解一下List的实现原理，以便价升我们对于集合的理解。 5.实现原理前面已经提了一下Collection的实现基础都是基于数组的。下面我们就已ArrayList 为例，简单分析一下ArrayList 列表的实现方式。首先，先看下它的构造函数。下列表格是在SUN提供的API中的描述：123ArrayList() //Constructs an empty list with an initial capacity of ten.ArrayList(Collection c) //Constructs a list containing the elements of the specified collection, in the order they are returned by the collection&apos;s iterator.ArrayList(int initialCapacity) //Constructs an empty list with the specified initial capacity. 其中第一个构造函数ArrayList()和第二构造函数ArrayList(Collection c) 是按照Collection 接口文档所述，所应该提供两个构造函数，一个无参数，一个接受另一个 Collection。第3个构造函数：ArrayList(int initialCapacity) 是ArrayList实现的比较重要的构造函数，虽然，我们不常用它，但是某认的构造函数正是调用的该带参数：initialCapacity 的构造函数来实现的。 其中参数：initialCapacity 表示我们构造的这个ArrayList列表的初始化容量是多大。如果调用默认的构造函数，则表示默认调用该参数为initialCapacity =10 的方式，来进行构建一个ArrayList列表对象。为了更好的理解这个initialCapacity 参数的概念，我们先看看ArrayList在Sun 提供的源码中的实现方式。先看一下它的属性有哪些：ArrayList 继承了AbstractList 我们主要看看ArrayList中的属性就可以了。ArrayList中主要包含2个属性：12private transient Object elementData[];private int size; 其中数组:：elementData[] 是列表的实现核心属性：数组。 我们使用该数组来进行存放集合中的数据。而我们的初始化参数就是该数组构建时候的长度，即该数组的length属性就是initialCapacity 参数。Keys：transient 表示被修饰的属性不是对象持久状态的一部分，不会自动的序列化。第2个属性：size表示列表中真实数据的存放个数。我们再来看一下ArrayList的构造函数,加深一下ArrayList是基于数组的理解。从源码中可以看到默认的构造函数调用的就是带参数的构造函数：1public ArrayList(int initialCapacity) 不过参数initialCapacity＝10 。我们主要看ArrayList(int initialCapacity) 这个构造函数。可以看到：1this.elementData = new Object[initialCapacity]; 我们就是使用的initialCapacity 这个参数来创建一个Object数组。而我们所有的往该集合对象中存放的数据，就是存放到了这个Object数组中去了。我们在看看另外一个构造函数的源码：这里，我们先看size() 方法的实现形式。它的作用即是返回size属性值的大小。然后我们再看另外一个构造函数public ArrayList(Collection c) ，该构造函数的作用是把另外一个容器对象中的元素存放到当前的List 对象中。 可以看到，首先，我们是通过调用另外一个容器对象C 的方法size()来设置当前的List对象的size属性的长度大小。 接下来，就是对elementData 数组进行初始化，初始化的大小为原先容器大小的1.1倍。最后，就是通过使用容器接口中的Object[] toArray(Object[] a) 方法来把当前容器中的对象都存放到新的数组elementData 中。这样就完成了一个ArrayList 的建立。可能大家会存在一个问题，那就是，我们建立的这个ArrayList 是使用数组来实现的，但是数组的长度一旦被定下来，就不能改变了。而我们在给ArrayList对象中添加元素的时候，却没有长度限制。这个时候，ArrayList 中的elementData 属性就必须存在一个需要动态的扩充容量的机制。我们看下面的代码，它描述了这个扩充机制： 这个方法的作用就是用来判断当前的数组是否需要扩容，应该扩容多少。其中属性 modCount是继承自父类，它表示当前的对象对elementData数组进行了多少次扩容，清空，移除等操作。该属性相当于是一个对于当前List 对象的一个操作记录日志号。 我们主要看下面的代码实现： 首先得到当前elementData 属性的长度oldCapacity。 然后通过判断oldCapacity和minCapacity参数谁大来决定是否需要扩容。 如果minCapacity大于oldCapacity，那么我们就对当前的List对象进行扩容。扩容的的策略为：取(oldCapacity * 3)/2 + 1和minCapacity之间更大的那个。然后使用数组拷贝的方法，把以前存放的数据转移到新的数组对象中。 如果minCapacity不大于oldCapacity那么就不进行扩容。 下面我们看看上的那个ensureCapacity方法的是如何使用的:上的两个ａｄｄ方法都是往List 中添加元素。每次在添加元素的时候，我们就需要判断一下，是否需要对于当前的数组进行扩容。 我们主要看看 public boolean add(Object o)方法，可以发现在添加一个元素到容器中的时候，首先我们会判断是否需要扩容。因为只增加一个元素，所以扩容的大小判断也就为当前的size+1来进行判断。然后，就把新添加的元素放到数组elementData中。 第二个方法public boolean addAll(Collection c)也是同样的原理。将新的元素放到elementData数组之后。同时改变当前List 对象的size属性。 类似的List 中的其他的方法也都是基于数组进行操作的。大家有兴趣可以看看源码中的更多的实现方式。最后我们再看看如何判断在集合中是否已经存在某一个对象的： 由源码中我们可以看到，public boolean contains(Object elem)方法是通过调用public int indexOf(Object elem)方法来判断是否在集合中存在某个对象elem。我们看看indexOf方法的具体实现。 首先我们判断一下elem 对象是否为null ，如果为null的话，那么遍历数组elementData 把第一个出现null的位置返回。 如果elem不为null 的话，我们也是遍历数组elementData ，并通过调用elem对象的equals()方法来得到第一个相等的元素的位置。 这里我们可以发现，ArrayList中用来判断是否包含一个对象，调用的是各个对象自己实现的equals()方法。在前面的高级特性里面，我们可以知道：如果要判断一个类的一个实例对象是否等于另外一个对象，那么我们就需要自己覆写Object类的public boolean equals(Object obj) 方法。如果不覆写该方法的话，那么就会调用Object的equals()方法来进行判断。这就相当于比较两个对象的内存应用地址是否相等了。在集合框架中，不仅仅是List，所有的集合类，如果需要判断里面是否存放了的某个对象，都是调用该对象的equals()方法来进行处理的。 本文链接：http://www.sguotao.com/Java-集合框架-2012-11-24-java-collection-3.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[集合框架篇2 Collection]]></title>
      <url>%2FJava-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-2012-11-23-java-collection-2.html</url>
      <content type="text"><![CDATA[1.常用方法Collection 接口用于表示任何对象或元素组。想要尽可能以常规方式处理一组元素时，就使用这一接口。Collection 在前面的大图也可以看出，它是List和Set 的父类。并且它本身也是一个接口。它定义了作为集合所应该拥有的一些方法。如下：注意:集合必须只有对象，集合中的元素不能是基本数据类型。 1.1 添加和删除操作Collection接口支持如添加和删除等基本操作。设法除去一个元素时，如果这个元素存在，除去的仅仅是集合中此元素的一个实例。12boolean add(Object element) boolean remove(Object element) 1.2 查询操作Collection 接口还支持查询操作：1234int size() boolean isEmpty() boolean contains(Object element) Iterator iterator() 1.3 组操作组操作 ：Collection 接口支持的其它操作，要么是作用于元素组的任务，要么是同时作用于整个集合的任务。12345boolean containsAll(Collection collection) boolean addAll(Collection collection) void clear() void removeAll(Collection collection) void retainAll(Collection collection) containsAll() 方法允许您查找当前集合是否包含了另一个集合的所有元素，即另一个集合是否是当前集合的子集。其余方法是可选的，因为特定的集合可能不支持集合更改。 addAll() 方法确保另一个集合中的所有元素都被添加到当前的集合中，通常称为并。 clear() 方法从当前集合中除去所有元素。 removeAll() 方法类似于 clear() ，但只除去了元素的一个子集。 retainAll() 方法类似于 removeAll() 方法，不过可能感到它所做的与前面正好相反：它从当前集合中除去不属于另一个集合的元素，即交。 我们看一个简单的例子，来了解一下集合类的基本方法的使用： 1234567891011121314151617181920212223242526import java.util.*; public class CollectionToArray &#123; public static void main(String[] args) &#123; Collection collection1=new ArrayList();//创建一个集合对象 collection1.add(&quot;000&quot;);//添加对象到Collection集合中 collection1.add(&quot;111&quot;); collection1.add(&quot;222&quot;); System.out.println(&quot;集合collection1的大小：&quot;+collection1.size()); System.out.println(&quot;集合collection1的内容：&quot;+collection1); collection1.remove(&quot;000&quot;);//从集合collection1中移除掉 &quot;000&quot; 这个对象 System.out.println(&quot;集合collection1移除 000 后的内容：&quot;+collection1); System.out.println(&quot;集合collection1中是否包含000 ：&quot;+collection1.contains(&quot;000&quot;)); System.out.println(&quot;集合collection1中是否包含111 ：&quot;+collection1.contains(&quot;111&quot;)); Collection collection2=new ArrayList(); collection2.addAll(collection1);//将collection1 集合中的元素全部都加到collection2中 System.out.println(&quot;集合collection2的内容：&quot;+collection2); collection2.clear();//清空集合 collection1 中的元素 System.out.println(&quot;集合collection2是否为空 ：&quot;+collection2.isEmpty()); //将集合collection1转化为数组 Object s[]= collection1.toArray(); for(int i=0;i&lt;s.length;i++)&#123; System.out.println(s[i]); &#125; &#125; &#125; &lt;/pre&gt; 运行结果为：123456789集合collection1的大小：3 集合collection1的内容：[000, 111, 222] 集合collection1移除 000 后的内容：[111, 222] 集合collection1中是否包含000 ：false 集合collection1中是否包含111 ：true 集合collection2的内容：[111, 222] 集合collection2是否为空 ：true 111 222 这里需要注意的是，Collection 它仅仅只是一个接口，而我们真正使用的时候，确是创建该接口的一个实现类。做为集合的接口，它定义了所有属于集合的类所都应该具有的一些方法。而ArrayList （列表）类是集合类的一种实现方式。这里需要一提的是，因为Collection的实现基础是数组，所以有转换为Object数组的方法：12Object[] toArray() Object[] toArray(Object[] a) 其中第二个方法Object[]toArray(Object[] a) 的参数 a 应该是集合中所有存放的对象的类的父类。 2. 迭代器任何容器类，都必须有某种方式可以将东西放进去，然后由某种方式将东西取出来。毕竟，存放事物是容器最基本的工作。对于ArrayList，add（）是插入对象的方法，而get()是取出元素的方式之一。ArrayList很灵活，可以随时选取任意的元素，或使用不同的下标一次选取多个元素。 如果从更高层的角度思考，会发现这里有一个缺点：要使用容器，必须知道其中元素的确切类型。初看起来这没有什么不好的，但是考虑如下情况：如果原本是ArrayList ，但是后来考虑到容器的特点，你想换用Set ，应该怎么做？或者你打算写通用的代码，它们只是使用容器，不知道或者说不关心容器的类型，那么如何才能不重写代码就可以应用于不同类型的容器？ 所以迭代器(Iterator)的概念，也是出于一种设计模式就是为达成此目的而形成的。所以Collection不提供get()方法。如果要遍历Collectin中的元素，就必须用Iterator。 迭代器（Iterator）本身就是一个对象，它的工作就是遍历并选择集合序列中的对象，而客户端的程序员不必知道或关心该序列底层的结构。此外，迭代器通常被称为“轻量级”对象，创建它的代价小。但是，它也有一些限制，例如，某些迭代器只能单向移动。 Collection 接口的 iterator() 方法返回一个 Iterator。Iterator 和您可能已经熟悉的 Enumeration 接口类似。使用 Iterator 接口方法，您可以从头至尾遍历集合，并安全的从底层 Collection 中除去元素。 下面，我们看一个对于迭代器的简单使用：123456789101112131415161718192021222324252627282930313233import java.util.ArrayList; import java.util.Collection; import java.util.Iterator; public class IteratorDemo &#123; public static void main(String[] args) &#123; Collection collection = new ArrayList(); collection.add(&quot;s1&quot;); collection.add(&quot;s2&quot;); collection.add(&quot;s3&quot;); Iterator iterator = collection.iterator();//得到一个迭代器 while (iterator.hasNext()) &#123;//遍历 Object element = iterator.next(); System.out.println(&quot;iterator = &quot; + element); &#125; if(collection.isEmpty()) System.out.println(&quot;collection is Empty!&quot;); else System.out.println(&quot;collection is not Empty! size=&quot;+collection.size()); Iterator iterator2 = collection.iterator(); while (iterator2.hasNext()) &#123;//移除元素 Object element = iterator2.next(); System.out.println(&quot;remove: &quot;+element); iterator2.remove(); &#125; Iterator iterator3 = collection.iterator(); if (!iterator3.hasNext()) &#123;//察看是否还有元素 System.out.println(&quot;还有元素&quot;); &#125; if(collection.isEmpty()) System.out.println(&quot;collection is Empty!&quot;); //使用collection.isEmpty()方法来判断 &#125; &#125; 程序的运行结果为：123456789iterator = s1 iterator = s2 iterator = s3 collection is not Empty! size=3 remove: s1 remove: s2 remove: s3 还有元素 collection is Empty! 可以看到，Java的Collection的Iterator 能够用来： 使用方法 iterator() 要求容器返回一个Iterator .第一次调用Iterator 的next() 方法时，它返回集合序列的第一个元素。 使用next() 获得集合序列的中的下一个元素。 使用hasNext()检查序列中是否元素。 使用remove()将迭代器新返回的元素删除。 需要注意的是,方法删除由next方法返回的最后一个元素，在每次调用next时，remove方法只能被调用一次。 Java 实现的这个迭代器的使用就是如此的简单。Iterator（跌代器）虽然功能简单，但仍然可以帮助我们解决许多问题，同时针对List 还有一个更复杂更高级ListIterator。您可以在下面的List讲解中得到进一步的介绍。 本文链接：http://www.sguotao.com/Java-集合框架-2012-11-23-java-collection-2.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[集合框架篇1 容器简介]]></title>
      <url>%2FJava-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-2012-11-22-java-collection-1.html</url>
      <content type="text"><![CDATA[1.容器集合Java里面最重要，最常用也就是集合(Collection, List, Set,Map)一部分了。能够用好集合和理解好集合对于做Java程序的开发拥有无比的好处。本文详细解释了关于Java中的集合是如何实现的，以及他们的实现原理。 到目前为止，我们已经学习了如何创建多个不同的对象，定义了这些对象以后，我们就可以利用它们来做一些有意义的事情。 举例来说，假设要存储许多雇员，不同的雇员的区别仅在于雇员的身份证号。我们可以通过身份证号来顺序存储每个雇员，但是在内存中实现呢？是不是要准备足够的内存来存储1000个雇员，然后再将这些雇员逐一插入？如果已经插入了500条记录，这时需要插入一个身份证号较低的新雇员，该怎么办呢？是在内存中将500条记录全部下移后，再从开头插入新的记录? 还是创建一个映射来记住每个对象的位置？当决定如何存储对象的集合时，必须考虑如下问题。 对于对象集合，必须执行的操作主要以下三种： 添加新的对象 删除对象 查找对象 我们必须确定如何将新的对象添加到集合中。可以将对象添加到集合的末尾、开头或者中间的某个逻辑位置。 从集合中删除一个对象后，对象集合中现有对象会有什么影响呢？可能必须将内存移来移去，或者就在现有对象所驻留的内存位置下一个“洞”。 在内存中建立对象集合后，必须确定如何定位特定对象。可建立一种机制，利用该机制可根据某些搜索条件（例如身份证号）直接定位到目标对象；否则，便需要遍历集合中的每个对象，直到找到要查找的对象为止。 数组的作用是可以存取一组数据。但是它却存在一些缺点，使得无法使用它来比较方便快捷的完成上述应用场景的要求。 首先，在很多数情况下面，我们需要能够存储一组数据的容器，这一点虽然数组可以实现，但是如果我们需要存储的数据的个数多少并不确定。比如说：我们需要在容器里面存储某个应用系统的当前的所有的在线用户信息，而当前的在线用户信息是时刻都可能在变化的。 也就是说，我们需要一种存储数据的容器，它能够自动的改变这个容器的所能存放的数据数量的大小。这一点上，如果使用数组来存储的话，就显得十分的笨拙。 我们再假设这样一种场景：假定一个购物网站，经过一段时间的运行，我们已经存储了一系列的购物清单了，购物清单中有商品信息。如果我们想要知道这段时间里面有多少种商品被销售出去了。那么我们就需要一个容器能够自动的过滤掉购物清单中的关于商品的重复信息。如果使用数组，这也是很难实现的。 最后再想想，我们经常会遇到这种情况，我知道某个人的帐号名称，希望能够进一步了解这个人的其他的一些信息。也就是说，我们在一个地方存放一些用户信息，我们希望能够通过用户的帐号来查找到对应的该用户的其他的一些信息。再举个查字典例子：假设我们希望使用一个容器来存放单词以及对于这个单词的解释，而当我们想要查找某个单词的意思的时候，能够根据提供的单词在这个容器中找到对应的单词的解释。如果使用数组来实现的话，就更加的困难了。 为解决这些问题，Java里面就设计了容器集合，不同容器集合以不同的格式保存对象。 2. 数学背景在常见用法中，集合（collection）和数学上直观的集（set）的概念是相同的。集是一个唯一项组，也就是说组中没有重复项。实际上，“集合框架”包含了一个 Set 接口和许多具体的 Set 类。但正式的集概念却比 Java 技术提前了一个世纪，那时英国数学家 George Boole 按逻辑正式的定义了集的概念。大部分人在小学时通过我们熟悉的维恩图引入的“集的交”和“集的并”学到过一些集的理论。 集的基本属性如下： 集内只包含每项的一个实例 集可以是有限的，也可以是无限的 可以定义抽象概念 集不仅是逻辑学、数学和计算机科学的基础，对于商业和系统的日常应用来说，它也很实用。“连接池”这一概念就是数据库服务器的一个开放连接集。Web 服务器必须管理客户机和连接集。文件描述符提供了操作系统中另一个集的示例。 映射是一种特别的集。它是一种对（pair）集，每个对表示一个元素到另一元素的单向映射。一些映射示例有： IP 地址到域名（DNS）的映射 关键字到数据库记录的映射 字典（词到含义的映射） 2 进制到 10 进制转换的映射 就像集一样，映射背后的思想比 Java 编程语言早的多，甚至比计算机科学还早。而Java中的Map 就是映射的一种表现形式。 3. 容器的分类既然您已经具备了一些集的理论，您应该能够更轻松的理解“集合框架”。 “集合框架”由一组用来操作对象的接口组成。不同接口描述不同类型的组。在很大程度上，一旦您理解了接口，您就理解了框架。虽然您总要创建接口特定的实现，但访问实际集合的方法应该限制在接口方法的使用上；因此，允许您更改基本的数据结构而不必改变其它代码。 Java容器类类库的用途是“保存对象”，并将其划分为两个不同的概念： Collection一组对立的元素，通常这些元素都服从某种规则。List必须保持元素特定的顺序，而Set 不能有重复元素。Map 一组成对的“键值对”对象。初看起来这似乎应该是一个Collection ，其元素是成对的对象，但是这样的设计实现起来太笨拙了，于是我们将Map明确的提取出来形成一个独立的概念。 另一方面，如果使用Collection 表示Map的部分内容，会便于查看此部分内容。因此Map一样容易扩展成多维Map ，无需增加新的概念，只要让Map中的键值对的每个“值”也是一个Map即可。 Collection和Map的区别在于容器中每个位置保存的元素个数。Collection 每个位置只能保存一个元素（对象）。此类容器包括：List ，它以特定的顺序保存一组元素；Set 则是元素不能重复。Map保存的是“键值对”，就像一个小型数据库。我们可以通过“键”找到该键对应的“值”。 Collection – 对象之间没有指定的顺序，允许重复元素。 Set – 对象之间没有指定的顺序，不允许重复元素 List– 对象之间有指定的顺序，允许重复元素,并引入位置下标。 Map – 接口用于保存关键字（Key）和数值（Value）的集合，集合中的每个对象加入时都提供数值和关键字。Map 接口既不继承 Set 也不继承 Collection。 List、Set、Map共同的实现基础是Object数组除了四个历史集合类外，Java 2 框架还引入了六个集合实现，如下表所示。 这里没有 Collection 接口的实现，接下来看一下下面的这张关于集合框架的大图： 这张图看起来有点吓人，熟悉之后就会发现其实只有三种容器：Map，List和Set ，它们各自有两个三个实现版本。常用的容器用黑色粗线框表示。 点线方框代表“接口”，虚线方框代表抽象类，而实线方框代表普通类（即具体类，而非抽象类）。虚线箭头指出一个特定的类实现了一个接口（在抽象类的情况下，则是“部分”实现了那个接口）。实线箭头指出一个类可生成箭头指向的那个类的对象。例如任何集合( Collection )都能产生一个迭代器( Iterator )，而一个List 除了能生成一个ListIterator （列表迭代器）外,还能生成一个普通迭代器,因为List 正是从集合继承来的。 本文链接：http://www.sguotao.com/Java-集合框架-2012-11-22-java-collection-1.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[多线程 6 线程组]]></title>
      <url>%2FJava-%E5%A4%9A%E7%BA%BF%E7%A8%8B-2010-10-6-multi-thread-6.html</url>
      <content type="text"><![CDATA[在学习Java多线程的过程中，Java 线程工具和 API 看似简单，但是，编写有效使用线程的复杂程序并不容易。做如下整理，方便日后查阅。 多线程 1 线程与线程类多线程 2 线程的创建多线程 3 线程的状态与调度多线程 4 线程状态的改变多线程 5 线程的同步与共享多线程 6 线程组 所有Java线程都属于某个线程组(thread group)。线程组提供了一个将多个线程组织成一个线程组对象来管理的机制，如可以通过一个方法调用来启动线程组中的所有线程。 1. 创建线程组线程组是由java.lang包中的ThreadGroup类实现的。它的构造方法如下：12public ThreadGroup(String name)public ThreadGroup(ThreadGroup parent, String name) name为线程组名，parent为线程组的父线程组，若无该参数则新建线程组的父线程组为当前运行的线程的线程组。当一个线程被创建时，运行时系统都将其放入一个线程组。创建线程时可以明确指定新建线程属于哪个线程组，若没有明确指定则放入缺省线程组中。一旦线程被指定属于哪个线程组，便不能改变，不能删除。 2. 缺省线程组如果在创建线程时没有在构造方法中指定所属线程组，运行时系统会自动将该线程放入创建该线程的线程所属的线程组中。那么当我们创建线程时没有指定线程组，它属于哪个线程组呢? 当Java应用程序启动时，Java运行时系统创建一个名main的ThreadGroup对象。除非另外指定，否则所有新建线程都属于main线程组的成员。 在一个线程组内可以创建多个线程，也可以创建其它的线程组。一个程序中的线程组和线程构成一个树型结构，如图6所示. 如果在Applet中创建线程，新线程组可能不是main线程组，它依赖于使用的浏览器或Applet查看器。创建属于某个线程组的线程可以通过下面构造方法实现123public Thread(ThreadGroup group, Runnable target)public Thread(ThreadGroup group, String name)public Thread(ThreadGroup group, Runnable target, String name) 如下面代码创建的myThread线程属于myThreadGroup线程组。12ThreadGroup myGroup = new ThreadGroup(&quot;My Group of Threads&quot;);Thread myThread = new Thread(myGroup, &quot;a thread for my group&quot;); 为了得到线程所属的线程组可以调用Thread的getThreadGroup()方法，该方法返回ThreadGroup对象。可以通过下面方法获得线程所属线程组名。1myThread.getThreadGroup().getName() 一旦得到了线程组对象，就可查询线程组的有关信息，如线程组中其他线程、也可仅通过调用一个方法就可实现修改线程组中的线程，如挂起、恢复或停止线程。 3. 线程组操作方法线程组类提供了有关方法可以对线程组操作。12345678public final String getName() 返回线程组名。public final ThreadGroup getParent() 返回线程组的父线程组对象。public final void setMaxPriority(int pri) 设置线程组的最大优先级。线程组中的线程不能超过该优先级。public final int getMaxPriority() 返回线程组的最大优先级。public boolean isDestroyed() 测试该线程组对象是否已被销毁。public int activeCount() 返回该线程组中活动线程的估计数。public int activeGroupCount() 返回该线程组中活动线程组的估计数。public final void destroy() 销毁该线程组及其子线程组对象。当前线程组的所有线程必须已经停止。 Java语言内在支持多线程的程序设计。线程是进程中的一个单个的顺序控制流，多线程是指单个程序内可以同时运行多个线程。 在Java程序中创建多线程的程序有两种方法。一种是继承Thread类并覆盖其run()方法，另一种是实现Runnable接口并实现其run()方法。 线程从创建、运行到结束总是处于下面五个状态之一：新建状态、就绪状态、运行状态、阻塞状态及死亡状态。Java的每个线程都有一个优先级，当有多个线程处于就绪状态时，线程调度程序根据线程的优先级调度线程运行。 线程都是独立的、异步执行的线程，但在很多情况下，多个线程需要共享数据资源，这就涉及到线程的同步与资源共享的问题。 所有Java线程都属于某个线程组。线程组提供了一个将多个线程组织成一个线程组对象来管理的机制，如可以通过一个方法调用来启动线程组中的所有线程。 本文链接：http://www.sguotao.com/Java-多线程-2010-10-6-multi-thread-6.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[多线程 4 线程状态的改变]]></title>
      <url>%2FJava-%E5%A4%9A%E7%BA%BF%E7%A8%8B-2010-10-4-multi-thread-4.html</url>
      <content type="text"><![CDATA[在学习Java多线程的过程中，Java 线程工具和 API 看似简单，但是，编写有效使用线程的复杂程序并不容易。做如下整理，方便日后查阅。 多线程 1 线程与线程类多线程 2 线程的创建多线程 3 线程的状态与调度多线程 4 线程状态的改变多线程 5 线程的同步与共享多线程 6 线程组 1. 线程的状态一个线程在其生命周期中可以从一种状态改变到另一种状态，线程状态的变迁如图5所示： 2. 控制线程的启动和结束当一个新建的线程调用它的start()方法后即进入就绪状态，处于就绪状态的线程被线程调度程序选中就可以获得CPU时间，进入运行状态，该线程就开始运行run()方法。 控制线程的结束稍微复杂一点。如果线程的run()方法是一个确定次数的循环，则循环结束后，线程运行就结束了，线程对象即进入死亡状态。如果run()方法是一个不确定循环，早期的方法是调用线程对象的stop()方法，然而由于该方法可能导致线程死锁，因此从1.1版开始，不推荐使用该方法结束线程。一般是通过设置一个标志变量，在程序中改变标志变量的值实现结束线程。请看下面的例子：1234567891011121314151617181920212223242526272829import java.util.*;class Timer implements Runnable&#123; boolean flag=true; public void run()&#123; while(flag)&#123; System.out.print(&quot;\r\t&quot;+new Date()+&quot;...&quot;); try&#123; Thread.sleep(1000); &#125;catch(InterruptedException e)&#123;&#125; &#125; System.out.println(&quot;\n&quot;+Thread.currentThread().getName()+&quot; Stop&quot;); &#125; public void stopRun()&#123; flag = false; &#125;&#125;public class ThreadStop&#123; public static void main(String args[])&#123; Timer timer = new Timer(); Thread thread = new Thread(timer); thread.setName(&quot;Timer&quot;); thread.start(); for(int i=0;i&lt;100;i++)&#123; System.out.print(&quot;\r&quot;+i); try&#123; Thread.sleep(100); &#125;catch(InterruptedException e)&#123;&#125; &#125; timer.stopRun();&#125;&#125; 该程序在Timer类中定义了一个布而变量flag，同时定义了一个stopRun()方法，在其中将该变量设置为false。在主程序中通过调用该方法，从而改变该变量的值，使得run()方法的while循环条件不满足，从而实现结束线程的运行。 在Thread类中除了stop()方法被标注为不推荐(deprecated) 使用外，suspend()方法和resume()方法也被标明不推荐使用，这两个方法原来用作线程的挂起和恢复。 3. 线程阻塞条件处于运行状态的线程除了可以进入死亡状态外，还可能进入就绪状态和阻塞状态。下面分别讨论这两种情况： 3.1 运行状态到就绪状态处于运行状态的线程如果调用了yield()方法，那么它将放弃CPU时间，使当前正在运行的线程进入就绪状态。这时有几种可能的情况：如果没有其他的线程处于就绪状态等待运行，该线程会立即继续运行；如果有等待的线程，此时线程回到就绪状态状态与其他线程竞争CPU时间，当有比该线程优先级高的线程时，高优先级的线程进入运行状态，当没有比该线程优先级高的线程时，但有同优先级的线程，则由线程调度程序来决定哪个线程进入运行状态，因此线程调用yield()方法只能将CPU时间让给具有同优先级的或高优先级的线程而不能让给低优先级的线程。一般来说，在调用线程的yield()方法可以使耗时的线程暂停执行一段时间，使其他线程有执行的机会。 3.2 运行状态到阻塞状态有多种原因可使当前运行的线程进入阻塞状态，进入阻塞状态的线程当相应的事件结束或条件满足时进入就绪状态。使线程进入阻塞状态可能有多种原因： 线程调用了sleep()方法，线程进入睡眠状态，此时该线程停止执行一段时间。当时间到时该线程回到就绪状态，与其他线程竞争CPU时间。Thread类中定义了一个interrupt()方法。一个处于睡眠中的线程若调用了interrupt()方法，该线程立即结束睡眠进入就绪状态。 如果一个线程的运行需要进行I/O操作，比如从键盘接收数据，这时程序可能需要等待用户的输入，这时如果该线程一直占用CPU，其他线程就得不到运行。这种情况称为I/O阻塞。这时该线程就会离开运行状态而进入阻塞状态。Java语言的所有I/O方法都具有这种行为。 有时要求当前线程的执行在另一个线程执行结束后再继续执行，这时可以调用join()方法实现，join()方法有下面三种格式：123public void join() throws InterruptedException 使当前线程暂停执行，等待调用该方法的线程结束后再执行当前线程。public void join(long millis) throws InterruptedException 最多等待millis毫秒后，当前线程继续执行。public void join(long millis, int nanos) throws InterruptedException 可以指定多少毫秒、多少纳秒后继续执行当前线程。 上述方法使当前线程暂停执行，进入阻塞状态，当调用线程结束或指定的时间过后，当前线程线程进入就绪状态，例如执行下面代码：1t.join(); 将使当前线程进入阻塞状态，当线程t执行结束后，当前线程才能继续执行。 线程调用了wait()方法，等待某个条件变量，此时该线程进入阻塞状态。直到被通知(调用了notify()或notifyAll()方法)结束等待后，线程回到就绪状态。 另外如果线程不能获得对象锁，也进入就绪状态。后两种情况在下一节讨论。 本文链接：http://www.sguotao.com/Java-多线程-2010-10-4-multi-thread-4.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[多线程 5 线程的同步与共享]]></title>
      <url>%2FJava-%E5%A4%9A%E7%BA%BF%E7%A8%8B-2010-10-5-multi-thread-5.html</url>
      <content type="text"><![CDATA[在学习Java多线程的过程中，Java 线程工具和 API 看似简单，但是，编写有效使用线程的复杂程序并不容易。做如下整理，方便日后查阅。 多线程 1 线程与线程类多线程 2 线程的创建多线程 3 线程的状态与调度多线程 4 线程状态的改变多线程 5 线程的同步与共享多线程 6 线程组 前面程序中的线程都是独立的、异步执行的线程。但在很多情况下，多个线程需要共享数据资源，这就涉及到线程的同步与资源共享的问题。 1. 资源冲突下面的例子说明，多个线程共享资源，如果不加以控制可能会产生冲突。12345678910111213141516171819202122232425262728293031323334353637class Num&#123; private int x=0; private int y=0; void increase()&#123; x++; y++; &#125; void testEqual()&#123; System.out.println(x+&quot;,&quot;+y+&quot;:&quot;+(x==y)); &#125;&#125;class Counter extends Thread&#123;private Num num;Counter(Num num)&#123; this.num=num; &#125;public void run()&#123;while(true)&#123; num.increase();&#125;&#125;&#125;public class CounterTest&#123;public static void main(String[] args)&#123; Num num = new Num(); Thread count1 = new Counter(num); Thread count2 = new Counter(num); count1.start(); count2.start(); for(int i=0;i&lt;100;i++)&#123; num.testEqual(); try&#123; Thread.sleep(100); &#125;catch(InterruptedException e)&#123; &#125; &#125; &#125;&#125; 上述程序在CounterTest类的main()方法中创建了两个线程类Counter的对象count1和count2，这两个对象共享一个Num类的对象num。两个线程对象开始运行后，都调用同一个对象num的increase()方法来增加num对象的x和y的值。在main()方法的for()循环中输出num对象的x和y的值。程序输出结果有些x、y的值相等，大部分x、y的值不相等。 出现上述情况的原因是：两个线程对象同时操作一个num对象的同一段代码，通常将这段代码段称为临界区(critical sections)。在线程执行时，可能一个线程执行了x++语句而尚未执行y++语句时，系统调度另一个线程对象执行x++和y++，这时在主线程中调用testEqual()方法输出x、y的值不相等。这里可能出现x的值小于y的值的情况，为什么？ 2. 对象锁的实现上述程序的运行结果说明了多个线程访问同一个对象出现了冲突，为了保证运行结果正确(x、y的值总相等)，可以使用Java语言的synchronized关键字，用该关键字修饰方法。用synchronized关键字修饰的方法称为同步方法，Java平台为每个具有synchronized代码段的对象关联一个对象锁(object lock)。这样任何线程在访问对象的同步方法时，首先必须获得对象锁，然后才能进入synchronized方法，这时其他线程就不能再同时访问该对象的同步方法了(包括其他的同步方法)。 通常有两种方法实现对象锁： 在方法的声明中使用synchronized关键字，表明该方法为同步方法。对于上面的程序我们可以在定义Num类的increase()和testEqual()方法时，在它们前面加上synchronized关键字，如下所示：1234567synchronized void increase()&#123; x++; y++;&#125;synchronized void testEqual()&#123; System.out.println(x+&quot;,&quot;+y+&quot;:&quot;+(x==y)+&quot;:&quot;+(x&lt;y));&#125; 一个方法使用synchronized关键字修饰后，当一个线程调用该方法时，必须先获得对象锁，只有在获得对象锁以后才能进入synchronized方法。一个时刻对象锁只能被一个线程持有。如果对象锁正在被一个线程持有，其他线程就不能获得该对象锁，其他线程就必须等待持有该对象锁的线程释放锁。 如果类的方法使用了synchronized关键字修饰，则称该类对象是线程安全的，否则是线程不安全的。如果只为increase()方法添加synchronized 关键字，结果还会出现x、y的值不相等的情况，请考虑为什么？ 前面实现对象锁是在方法前加上synchronized 关键字，这对于我们自己定义的类很容易实现，但如果使用类库中的类或别人定义的类在调用一个没有使用synchronized关键字修饰的方法时，又要获得对象锁，可以使用下面的格式：123synchronized(object)&#123; //方法调用&#125; 假如Num类的increase()方法没有使用synchronized 关键字，我们在定义Counter类的run()方法时可以按如下方法使用synchronized为部分代码加锁。123456public void run()&#123; while(true)&#123;synchronized (num)&#123; num.increase(); &#125; &#125;&#125; 同时在main()方法中调用testEqual()方法也用synchronized关键字修饰，这样得到的结果相同。123synchronized(num)&#123; num.testEqual();&#125; 对象锁的获得和释放是由Java运行时系统自动完成的。每个类也可以有类锁。类锁控制对类的synchronized static代码的访问。请看下面的例子：123456public class X&#123; static int x, y; static synchronized void foo()&#123; x++;y++;&#125;&#125; 当foo()方法被调用时(如，使用X.foo())，调用线程必须获得X类的类锁。 3. 线程间的同步控制在多线程的程序中，除了要防止资源冲突外，有时还要保证线程的同步。下面通过生产者-消费者模型来说明线程的同步与资源共享的问题。 假设有一个生产者(Producer)，一个消费者(Consumer)。生产者产生0~9的整数，将它们存储在仓库(CubbyHole)的对象中并打印出这些数来；消费者从仓库中取出这些整数并将其也打印出来。同时要求生产者产生一个数字，消费者取得一个数字，这就涉及到两个线程的同步问题。 这个问题就可以通过两个线程实现生产者和消费者，它们共享CubbyHole一个对象。如果不加控制就得不到预期的结果。 3.1 不同步设计首先我们设计用于存储数据的类，该类的定义如下：123456789class CubbyHole&#123; private int content ;public synchronized void put(int value)&#123;content = value;&#125; public synchronized int get()&#123;return content ;&#125; &#125; CubbyHole类使用一个私有成员变量content用来存放整数，put()方法和get()方法用来设置变量content的值。CubbyHole对象为共享资源，所以用synchronized关键字修饰。当put()方法或get()方法被调用时，线程即获得了对象锁，从而可以避免资源冲突。 这样当Producer对象调用put()方法是，它锁定了该对象，Consumer对象就不能调用get()方法。当put()方法返回时，Producer对象释放了CubbyHole的锁。类似地，当Consumer对象调用CubbyHole的get()方法时，它也锁定该对象，防止Producer对象调用put()方法。 接下来我们看Producer和Consumer的定义，这两个类的定义如下：1234567891011121314151617public class Producer extends Thread &#123; private CubbyHole cubbyhole; private int number; public Producer(CubbyHole c, int number) &#123; cubbyhole = c; this.number = number; &#125; public void run() &#123; for (int i = 0; i &lt; 10; i++) &#123; cubbyhole.put(i); System.out.println(&quot;Producer #&quot; + this.number + &quot; put: &quot; + i); try &#123; sleep((int)(Math.random() * 100)); &#125; catch (InterruptedException e) &#123; &#125; &#125; &#125;&#125; Producer类中定义了一个CubbyHole类型的成员变量cubbyhole，它用来存储产生的整数，另一个成员变量number用来记录线程号。这两个变量通过构造方法传递得到。在该类的run()方法中，通过一个循环产生10个整数，每次产生一个整数，调用cubbyhole对象的put()方法将其存入该对象中，同时输出该数。下面是Consumer类的定义：123456789101112131415public class Consumer extends Thread &#123; private CubbyHole cubbyhole; private int number; public Consumer(CubbyHole c, int number) &#123; cubbyhole = c; this.number = number; &#125; public void run() &#123; int value = 0; for (int i = 0; i &lt; 10; i++) &#123; value = cubbyhole.get(); System.out.println(&quot;Consumer #&quot; + this.number + &quot; got: &quot; + value); &#125; &#125;&#125; 在Consumer类的run()方法中也是一个循环，每次调用cubbyhole的get()方法返回当前存储的整数，然后输出。 下面是主程序，在该程序的main()方法中创建一个CubbyHole对象c，一个Producer对象p1，一个Consumer对象c1，然后启动两个线程。123456789public class ProducerConsumerTest &#123; public static void main(String[] args) &#123; CubbyHole c = new CubbyHole(); Producer p1 = new Producer(c, 1); Consumer c1 = new Consumer(c, 1); p1.start(); c1.start(); &#125;&#125; 该程序中对CubbyHole类的设计，尽管使用了synchronized关键字实现了对象锁，但这还不够。程序运行可能出现下面两种情况： 如果生产者的速度比消费者快，那么在消费者来不及取前一个数据之前，生产者又产生了新的数据，于是消费者很可能会跳过前一个数据，这样就会产生下面的结果：12345Consumer: 3Producer: 4Producer: 5Consumer: 5… 反之，如果消费者比生产者快，消费者可能两次取同一个数据，可能产生下面的结果：12345Producer: 4Consumer: 4Consumer: 4Producer: 5… 3.2 监视器模型为了避免上述情况发生，就必须使生产者线程向CubbyHole对象中存储数据与消费者线程从CubbyHole对象中取得数据同步起来。为了达到这一目的，在程序中可以采用监视器(monitor)模型，同时通过调用对象的wait()方法和notify()方法实现同步。下面是修改后的CubbyHole类的定义：123456789101112131415161718192021222324class CubbyHole&#123; private int content ; private boolean available=false;public synchronized void put(int value)&#123; while(available==true)&#123; try&#123;wait();&#125;catch(InterruptedException e)&#123;&#125;&#125; content =value;available=true;notifyAll();&#125; public synchronized int get()&#123; while(available==false)&#123; try&#123;wait();&#125;catch(InterruptedException e)&#123;&#125; &#125;available=false;notifyAll();return content;&#125; &#125; 这里有一个boolean型的私有成员变量available用来指示内容是否可取。当available为true时表示数据已经产生还没被取走，当available为false时表示数据已被取走还没有存放新的数据。 当生产者线程进入put()方法时，首先检查available的值，若其为false，才可执行put()方法，若其为true，说明数据还没有被取走，该线程必须等待。因此在put()方法中调用CubbyHole对象的wait()方法等待。调用对象的wait()方法使线程进入等待状态，同时释放对象锁。直到另一个线程对象调用了notify()或notifyAll()方法，该线程才可恢复运行。 类似地，当消费者线程进入get()方法时，也是先检查available的值，若其为true，才可执行get()方法，若其为false，说明还没有数据，该线程必须等待。因此在get()方法中调用CubbyHole对象的wait()方法等待。调用对象的wait()方法使线程进入等待状态，同时释放对象锁。 上述过程就是监视器模型，其中CubbyHole对象为监视器。通过监视器模型可以保证生产者线程和消费者线程同步，结果正确。 特别注意：wait()、notify()和notifyAll()方法是Object类定义的方法，并且这些方法只能用在synchronized代码段中。它们的定义格式如下：123public final void wait()public final void wait(long timeout)public final void wait(long timeout, int nanos) 当前线程必须具有对象监视器的锁，当调用该方法时线程释放监视器的锁。调用这些方法使当前线程进入等待(阻塞)状态，直到另一个线程调用了该对象的notify()方法或notifyAll()方法，该线程重新进入运行状态，恢复执行。 timeout和nanos为等待的时间的毫秒和纳秒，当时间到或其他对象调用了该对象的notify()方法或notifyAll()方法，该线程重新进入运行状态，恢复执行。 wait()的声明抛出了InterruptedException，因此程序中必须捕获或声明抛出该异常。12public final void notify()public final void notifyAll() 唤醒处于等待该对象锁的一个或所有的线程继续执行，通常使用notifyAll()方法。 在生产者/消费者的例子中，CubbyHole类的put和get方法就是临界区。当生产者修改它时，消费者不能问CubbyHole对象；当消费者取得值时，生产者也不能修改它。 本文链接：http://www.sguotao.com/Java-多线程-2010-10-5-multi-thread-5.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[多线程 3 线程的状态与调度]]></title>
      <url>%2FJava-%E5%A4%9A%E7%BA%BF%E7%A8%8B-2010-10-3-multi-thread-3.html</url>
      <content type="text"><![CDATA[在学习Java多线程的过程中，Java 线程工具和 API 看似简单，但是，编写有效使用线程的复杂程序并不容易。做如下整理，方便日后查阅。 多线程 1 线程与线程类多线程 2 线程的创建多线程 3 线程的状态与调度多线程 4 线程状态的改变多线程 5 线程的同步与共享多线程 6 线程组 1. 线程的生命周期线程从创建、运行到结束总是处于下面五个状态之一：新建状态、就绪状态、运行状态、阻塞状态及死亡状态。线程的状态如图4所示： 下面以前面的Java小程序为例说明线程的状态： 1.1 新建状态 NewThread当Applet启动时调用Applet的start()方法，此时小应用程序就创建一个Thread对象clockThread。1234public void start() &#123; if (clockThread == null) &#123; clockThread = new Thread(cp, &quot;Clock&quot;); clockThread.start(); &#125; &#125; 当该语句执行后clockThread就处于新建状态。处于该状态的线程仅仅是空的线程对象，并没有为其分配系统资源。当线程处于该状态，你仅能启动线程，调用任何其他方法是无意义的且会引发IllegalThreadStateException异常(实际上，当调用线程的状态所不允许的任何方法时，运行时系统都会引发IllegalThreadStateException异常)。 注意cp作为线程构造方法的第一个参数，该参数必须是实现了Runnable接口的对象并提供线程运行的run()方法，第二个参数是线程名。 1.2 就绪状态 Runnable一个新创建的线程并不自动开始运行，要执行线程，必须调用线程的start()方法。当线程对象调用start()方法即启动了线程，如clockThread.start(); 语句就是启动clockThread线程。start()方法创建线程运行的系统资源，并调度线程运行run()方法。当start()方法返回后，线程就处于就绪状态。 处于就绪状态的线程并不一定立即运行run()方法，线程还必须同其他线程竞争CPU时间，只有获得CPU时间才可以运行线程。因为在单CPU的计算机系统中，不可能同时运行多个线程，一个时刻仅有一个线程处于运行状态。因此此时可能有多个线程处于就绪状态。对多个处于就绪状态的线程是由Java运行时系统的线程调度程序(thread scheduler)来调度的。 1.3 运行状态 Running当线程获得CPU时间后，它才进入运行状态，真正开始执行run()方法，这里run()方法中是一个循环，循环条件是true。12345public void run() &#123; while (true) &#123; repaint(); try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e)&#123;&#125; &#125; 1.4 阻塞状态 Blocked线程运行过程中，可能由于各种原因进入阻塞状态。所谓阻塞状态是正在运行的线程没有运行结束，暂时让出CPU，这时其他处于就绪状态的线程就可以获得CPU时间，进入运行状态。有关阻塞状态在后面详细讨论。 1.5 死亡状态 Dead线程的正常结束，即run()方法返回，线程运行就结束了，此时线程就处于死亡状态。本例子中，线程运行结束的条件是clockThread为null，而在小应用程序的stop()方法中，将clockThread赋值为null。即当用户离开含有该小应用程序的页面时，浏览器调用stop()方法，将clockThread赋值为null，这样在run()的while循环时条件就为false，这样线程运行就结束了。如果再重新访问该页面，小应用程序的start()方法又会重新被调用，重新创建并启动一个新的线程。12public void stop() &#123; clockThread = null; &#125; 程序不能像终止小应用程序那样通过调用一个方法来结束线程(小应用程序通过调用stop()方法结束小应用程序的运行)。线程必须通过run()方法的自然结束而结束。通常在run()方法中是一个循环，要么是循环结束，要么是循环的条件不满足，这两种情况都可以使线程正常结束，进入死亡状态。例如，下面一段代码是一个循环：12345public void run()&#123; int i = 0; while(i&lt;100)&#123; i++; System.out.println(&quot;i = &quot; + i );&#125;&#125; 当该段代码循环结束后，线程就自然结束了。注意一个处于死亡状态的线程不能再调用该线程的任何方法。 2. 线程的优先级和调度Java的每个线程都有一个优先级，当有多个线程处于就绪状态时，线程调度程序根据线程的优先级调度线程运行。可以用下面方法设置和返回线程的优先级。12public final void setPriority(int newPriority) 设置线程的优先级。public final int getPriority() 返回线程的优先级。 newPriority为线程的优先级，其取值为1到10之间的整数，也可以使用Thread类定义的常量来设置线程的优先级，这些常量分别为：Thread.MIN_PRIORITY、Thread.NORM_PRIORITY、Thread.MAX_PRIORITY，它们分别对应于线程优先级的1、5和10，数值越大优先级越高。当创建Java线程时，如果没有指定它的优先级，则它从创建该线程那里继承优先级。 一般来说，只有在当前线程停止或由于某种原因被阻塞，较低优先级的线程才有机会运行。前面说过多个线程可并发运行，然而实际上并不总是这样。由于很多计算机都是单CPU的，所以一个时刻只能有一个线程运行，多个线程的并发运行只是幻觉。在单CPU机器上多个线程的执行是按照某种顺序执行的，这称为线程的调度(scheduling)。 大多数计算机仅有一个CPU，所以线程必须与其他线程共享CPU。多个线程在单个CPU是按照某种顺序执行的。实际的调度策略随系统的不同而不同，通常线程调度可以采用两种策略调度处于就绪状态的线程。 2.1 抢占式调度策略Java运行时系统的线程调度算法是抢占式的 (preemptive)。Java运行时系统支持一种简单的固定优先级的调度算法。如果一个优先级比其他任何处于可运行状态的线程都高的线程进入就绪状态，那么运行时系统就会选择该线程运行。新的优先级较高的线程抢占(preempt)了其他线程。但是Java运行时系统并不抢占同优先级的线程。换句话说，Java运行时系统不是分时的(time-slice)。然而，基于Java Thread类的实现系统可能是支持分时的，因此编写代码时不要依赖分时。当系统中的处于就绪状态的线程都具有相同优先级时，线程调度程序采用一种简单的、非抢占式的轮转的调度顺序。 2.2 时间片轮转调度策略有些系统的线程调度采用时间片轮转(round-robin)调度策略。这种调度策略是从所有处于就绪状态的线程中选择优先级最高的线程分配一定的CPU时间运行。该时间过后再选择其他线程运行。只有当线程运行结束、放弃(yield)CPU或由于某种原因进入阻塞状态，低优先级的线程才有机会执行。如果有两个优先级相同的线程都在等待CPU，则调度程序以轮转的方式选择运行的线程。 本文链接：http://www.sguotao.com/Java-多线程-2010-10-3-multi-thread-3.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[多线程 2 线程的创建]]></title>
      <url>%2FJava-%E5%A4%9A%E7%BA%BF%E7%A8%8B-2010-10-2-multi-thread-2.html</url>
      <content type="text"><![CDATA[在学习Java多线程的过程中，Java 线程工具和 API 看似简单，但是，编写有效使用线程的复杂程序并不容易。做如下整理，方便日后查阅。 多线程 1 线程与线程类多线程 2 线程的创建多线程 3 线程的状态与调度多线程 4 线程状态的改变多线程 5 线程的同步与共享多线程 6 线程组 如何创建和运行线程的两种方法。线程运行的代码就是实现了Runnable接口的类的run()方法或者是Thread类的子类的run()方法，因此构造线程体就有两种方法： 继承Thread类并覆盖它的run()方法； 实现Runnable接口并实现它的run()方法。 1. 继承Thread类创建线程通过继承Thread类，并覆盖run()方法，这时就可以用该类的实例作为线程的目标对象。下面的程序定义了SimpleThread类，它继承了Thread类并覆盖了run()方法。1234567891011121314public class SimpleThread extends Thread&#123; public SimpleThread(String str)&#123; super(str);&#125;public void run()&#123; for(int i=0; i&lt;100; i++)&#123; System.out.println(getName()+&quot; = &quot;+ i); try&#123; sleep((int)(Math.random()*100)); &#125;catch(InterruptedException e)&#123;&#125; &#125; System.out.println(getName()+ &quot; DONE&quot;);&#125;&#125; SimpleThread类继承了Thread类，并覆盖了run()方法，该方法就是线程体。12345678public class ThreadTest&#123; public static void main(String args[])&#123; Thread t1 = new SimpleThread(&quot;Runner A&quot;); Thread t2 = new SimpleThread(&quot;Runner B&quot;); t1.start();t2.start(); &#125;&#125; 在ThreadTest类的main()方法中创建了两个SimpleThread类的线程对象并调用线程类的start()方法启动线程。构造线程时没有指定目标对象，所以线程启动后执行本类的run()方法。 注意，实际上ThreadTest程序中有三个线程同时运行。请试着将下段代码加到main()方法中，分析程序运行结果。1234567for(int i=0; i&lt;100; i++)&#123; System.out.println(Thread.currentThread().getName()+&quot;=&quot;+ i); try&#123; Thread.sleep((int)(Math.random()*500)); &#125;catch(InterruptedException e)&#123;&#125;System.out.println(Thread.currentThread().getName()+ &quot; DONE&quot;); &#125; 从上述代码执行结果可以看到，在应用程序的main()方法启动时，JVM就创建一个主线程，在主线程中可以创建其他线程。再看下面的程序：123456789public class MainThreadDemo&#123; public static void main(String args[])&#123; Thread t = Thread.currentThread(); t.setName(&quot;MyThread&quot;); System.out.println(t); System.out.println(t.getName()); System.out.println(t.getThreadGroup().getName()); &#125;&#125; 该程序输出结果为：123Thread[MyThread, 5, main]MyThreadmain 上述程序在main()方法中声明了一个Thread对象t，然后调用Thread类的静态方法currentThread()获得当前线程对象。然后重新设置该线程对象的名称，最后输出线程对象、线程组对象名和线程对象名。 2. 实现Runnable接口创建线程可以定义一个类实现Runnable接口，然后将该类对象作为线程的目标对象。实现Runnable接口就是实现run()方法。下面程序通过实现Runnable接口构造线程体。1234567891011121314151617181920class T1 implements Runnable&#123; public void run()&#123; for(int i=0;i&lt;15;i++) System.out.println(&quot;Runner A=&quot;+i); &#125;&#125;class T2 implements Runnable&#123; public void run()&#123; for(int j=0;j&lt;15;j++) System.out.println(&quot;Runner B=&quot;+j); &#125;&#125;public class ThreadTest&#123; public static void main(String args[])&#123; Thread t1=new Thread(new T1(),&quot;Thread A&quot;); Thread t2=new Thread(new T2(),&quot;Thread B&quot;); t1.start(); t2.start(); &#125;&#125; 下面是一个小应用程序，利用线程对象在其中显示当前时间。123456789101112131415161718192021222324252627282930313233343536373839import java.awt.*;import java.util.*;import javax.swing.*;import java.text.DateFormat;public class ClockDemo extends JApplet&#123; private Thread clockThread = null; private ClockPanel cp=new ClockPanel(); public void init()&#123; getContentPane().add(cp); &#125; public void start() &#123; if (clockThread == null) &#123; clockThread = new Thread(cp, &quot;Clock&quot;); clockThread.start(); &#125;&#125; public void stop() &#123; clockThread = null; &#125;&#125;class ClockPanel extends JPanel implements Runnable&#123; public void paintComponent(Graphics g) &#123;super.paintComponent(g); Calendar cal = Calendar.getInstance(); Date date = cal.getTime(); DateFormat dateFormatter = DateFormat.getTimeInstance(); g.setColor(Color.BLUE); g.setFont(new Font(&quot;TimesNewRoman&quot;,Font.BOLD,36)); g.drawString(dateFormatter.format(date), 50, 50); &#125; public void run() &#123; while (true) &#123; repaint(); try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e)&#123; &#125; &#125;&#125;&#125; 该小应用程序的运行结果如图3所示： 本文链接：http://www.sguotao.com/Java-多线程-2010-10-2-multi-thread-2.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[多线程 1 线程与线程类]]></title>
      <url>%2FJava-%E5%A4%9A%E7%BA%BF%E7%A8%8B-2010-10-1-multi-thread-1.html</url>
      <content type="text"><![CDATA[在学习Java多线程的过程中，Java 线程工具和 API 看似简单，但是，编写有效使用线程的复杂程序并不容易。做如下整理，方便日后查阅。 多线程 1 线程与线程类多线程 2 线程的创建多线程 3 线程的状态与调度多线程 4 线程状态的改变多线程 5 线程的同步与共享多线程 6 线程组 Java语言的一个重要特点是内在支持多线程的程序设计。多线程是指在单个的程序内可以同时运行多个不同的线程完成不同的任务。多线程的程序设计具有广泛的应用。本章主要讲授线程的概念、如何创建多线程的程序、线程的生存周期与状态的改变、线程的同步与互斥等内容。 1. 线程的概念 线程的概念来源于计算机的操作系统的进程的概念。进程是一个程序关于某个数据集的一次运行。也就是说，进程是运行中的程序，是程序的一次运行活动。 线程和进程的相似之处在于，线程和运行的程序都是单个顺序控制流。有些教材将线程称为轻量级进程(light weight process)。线程被看作是轻量级进程是因为它运行在一个程序的上下文内，并利用分配给程序的资源和环境。 作为单个顺序控制流，线程必须在运行的程序中得到自己运行的资源，如必须有自己的执行栈和程序计数器。线程内运行的代码只能在该上下文内。因此还有些教程将执行上下文(execution context)作为线程的同义词。 所有的程序员都熟悉顺序程序的编写，如我们编写的名称排序和求素数的程序就是顺序程序。顺序程序都有开始、执行序列和结束，在程序执行的任何时刻，只有一个执行点。线程（thread）则是进程中的一个单个的顺序控制流。单线程的概念很简单，如图1所示。 多线程（multi-thread）是指在单个的程序内可以同时运行多个不同的线程完成不同的任务，图2说明了一个程序中同时有两个线程运行。 有些程序中需要多个控制流并行执行。例如，1234for(int i = 0; i &lt; 100; i++) System.out.println(&quot;Runner A = &quot; + i);for(int j = 0; j &lt; 100; j++ ) System.out.println(&quot;Runner B = &quot;+j); 上面的代码段中，在只支持单线程的语言中，前一个循环不执行完不可能执行第二个循环。要使两个循环同时执行，需要编写多线程的程序。 很多应用程序是用多线程实现的，如Hot Java Web浏览器就是多线程应用的例子。在Hot Java 浏览器中，你可以一边滚动屏幕，一边下载Applet或图像，可以同时播放动画和声音等。 2. Thread类和Runnable接口多线程是一个程序中可以有多段代码同时运行，那么这些代码写在哪里，如何创建线程对象呢?首先，我们来看Java语言实现多线程编程的类和接口。在java.lang包中定义了Runnable接口和Thread类。Runnable接口中只定义了一个方法，它的格式为：1public abstract void run() 这个方法要由实现了Runnable接口的类实现。Runnable对象称为可运行对象，一个线程的运行就是执行该对象的run()方法。 Thread类实现了Runnable接口，因此Thread对象也是可运行对象。同时Thread类也是线程类，该类的构造方法如下：1234567public Thread() public Thread(Runnable target)public Thread(String name)public Thread(Runnable target, String name)public Thread(ThreadGroup group, Runnable target)public Thread(ThreadGroup group, String name)public Thread(ThreadGroup group, Runnable target, String name) target为线程运行的目标对象，即线程调用start()方法启动后运行那个对象的run()方法，该对象的类型为Runnable，若没有指定目标对象，则以当前类对象为目标对象；name为线程名，group指定线程属于哪个线程组（有关线程组的概念请参考第6节）。Thread类的常用方法有:12345public static Thread currentThread() 返回当前正在执行的线程对象的引用。public void setName(String name) 设置线程名。public String getName() 返回线程名。public static void sleep(long millis) throws InterruptedExceptionpublic static void sleep(long millis, int nanos) throws InterruptedException 使当前正在执行的线程暂时停止执行指定的毫秒时间。指定时间过后，线程继续执行。该方法抛出InterruptedException异常，必须捕获。12345678public void run() 线程的线程体。public void start() 由JVM调用线程的run()方法，启动线程开始执行。public void setDaemon(boolean on) 设置线程为Daemon线程。public boolean isDaemon() 返回线程是否为Daemon线程。public static void yield() 使当前执行的线程暂停执行，允许其他线程执行。public ThreadGroup getThreadGroup() 返回该线程所属的线程组对象。public void interrupt() 中断当前线程。public boolean isAlive() 返回指定线程是否处于活动状态。 本文链接：http://www.sguotao.com/Java-多线程-2010-10-1-multi-thread-1.html]]></content>
    </entry>

    
  
  
</search>
