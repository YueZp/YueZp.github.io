<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Scott&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.sguotao.com/"/>
  <updated>2017-06-23T11:06:23.000Z</updated>
  <id>http://www.sguotao.com/</id>
  
  <author>
    <name>Scott</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Kotlin笔记】Kotlin的前世今生</title>
    <link href="http://www.sguotao.com/Kotlin-2017-06-09-Kotlin-note1.html"/>
    <id>http://www.sguotao.com/Kotlin-2017-06-09-Kotlin-note1.html</id>
    <published>2017-06-09T02:30:37.000Z</published>
    <updated>2017-06-23T11:06:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>三周前的Google IO大会上，官方宣布将Kotlin作为除Java、C++外的官方编程语言，在最新一期的TIOBE排行榜中，Kotlin就首次挤进编程语言TOP50。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/201706091496976207210.jpg" alt="201706091496976207210.jpg"><br>Kotlin是怎样的编程语言？Google为何将Kotlin作为官方的编程语言？Kotlin与其它语言(尤其是Java)相比，有哪些特点呢？带着这些问题，来了解Kotlin。</p>
<h2 id="Kotlin是什么？"><a href="#Kotlin是什么？" class="headerlink" title="Kotlin是什么？"></a>Kotlin是什么？</h2><blockquote>
<p>Kotlin是一种在Java虚拟机上运行的静态类型编程语言，它也可以被编译成为JavaScript源代码。它主要是由俄罗斯圣彼得堡的JetBrains开发团队所发展出来的编程语言，其名称来自于圣彼得堡附近的科特林岛。[2]2012年1月，著名期刊《Dr. Dobb’s Journal》中Kotlin被认定为该月的最佳语言。[3]虽然与Java语法并不兼容，但Kotlin被设计成可以和Java代码相互运作，并可以重复使用如Java集合框架等的现有Java类库。</p>
</blockquote>
<p>这是wikipedia给出的解释，总结一下:</p>
<ol>
<li>起源自有背书的JetBrains开发团队；</li>
<li>一种基于JVM的静态类型编程语言。</li>
</ol>
<h2 id="为什么是Kotlin"><a href="#为什么是Kotlin" class="headerlink" title="为什么是Kotlin?"></a>为什么是Kotlin?</h2><p>为什么Google选择了Kotlin，除了一些与Oracle众所周知的原因外，更多的是Kotlin本身的一些特点：</p>
<ol>
<li>开源，Apache许可证版本2.0下发布；</li>
<li>简洁，与Java相比，节约了大概40%的代码；</li>
<li>容易，如果会Java，很容易上手Kotlin；</li>
<li>安全，避免了空引用；</li>
<li>工具友好，由JetBrains开发，一家创造开发工具而闻名的公司；</li>
<li>互操作，与Java和Android 100%互操作；</li>
</ol>
<h2 id="与Java相比优势是什么？"><a href="#与Java相比优势是什么？" class="headerlink" title="与Java相比优势是什么？"></a>与Java相比优势是什么？</h2><p>由于Android 应用使用了JVM，这意味着可以使用任何语言去编写app，只要能够编译成被JVM识别的字节码文件就可以了，同样编译字节码Kotlin与Java相比的优势：</p>
<ol>
<li><p>更加易表现，这个重要的特点意味着可以少些很多代码，比如定义一个数据类，只需要进行如下定义，Kotlin会自动生成所有属性和他们的访问器，以及一些常用的方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">data class Person(</div><div class="line">        var id: Long,</div><div class="line">        var name: String,</div><div class="line">        var gender: Int,</div><div class="line">        var address: String</div><div class="line">        )</div></pre></td></tr></table></figure>
</li>
<li><p>更加安全，Kotlin是空安全的，即在编译期间处理了各种null的场景，避免了运行时异常。在Java开发中，需要通过判断是否为null来避免NullPointerException,在Kotlin中通过一个安全调用操作符(?)来明确地指定一个对象是否为空。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var person:Person ?=null //person可以是null</div><div class="line">person.speak() //编译不过,person可能是null</div><div class="line">person?.speak() //person不为null,调用speak()</div></pre></td></tr></table></figure>
</li>
<li><p>函数式，Kotlin是基于面向对象语言，使用了很多函数式编程的概念，主要是Lambda，Java8中也支持Lambda表达式。</p>
</li>
<li><p>可以扩展函数，可以扩展类的更多特性，甚至是一些没有权限访问类的代码；如给fragment添加一个显示toast的函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fun Fragment.toast(message: CharSequence, duration:Int = Toast.LENGTH_LONG)&#123;</div><div class="line">    Toast.makeText(getActivity(),message,duration).show()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>高度互操作，可以使用所有用Java写的代码和第三方库，因为Kotlin和Java之间的相互操作是完美的，甚至可以在项目中进行混合编程。</p>
</li>
</ol>
<h2 id="一点感想"><a href="#一点感想" class="headerlink" title="一点感想"></a>一点感想</h2><p>Android程序员和其它程序员相比，甚至是其它职业相比，<strong>竞争力在本质上还是体现在解决问题的能力上</strong>。想要提升这种能力，核心还是建立在扎实的基础和对问题技术的准确认识程度上。编程语言本质上只是一种工具，一个顺手的工具能带来更高的效率，但是如何用好这个工具，将效率和质量提升到最高，还是依赖于开发者的能力。选用一个趁手的工具，夯实基础，加强对事物本质透彻的分析和认识，才是真正回归到提升竞争力的本质上来。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.tiobe.com/tiobe-index/" target="_blank" rel="external">TIOBE 编程语言社区</a><br><a href="https://kotlinlang.org/docs/tutorials/koans.html" target="_blank" rel="external">kotlin-koans</a></p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/Kotlin-2017-06-09-Kotlin-note1.html">http://www.sguotao.com/Kotlin-2017-06-09-Kotlin-note1.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;三周前的Google IO大会上，官方宣布将Kotlin作为除Java、C++外的官方编程语言，在最新一期的TIOBE排行榜中，Kotlin就首次挤进编程语言TOP50。&lt;br&gt;&lt;img src=&quot;http://7u2np3.com1.z0.glb.clouddn.com/
    
    </summary>
    
      <category term="Kotlin" scheme="http://www.sguotao.com/categories/Kotlin/"/>
    
    
      <category term="Android" scheme="http://www.sguotao.com/tags/Android/"/>
    
      <category term="Kotlin" scheme="http://www.sguotao.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>【Kotlin笔记】Hello Kotlin</title>
    <link href="http://www.sguotao.com/Kotlin-2017-06-10-Kotlin-note2.html"/>
    <id>http://www.sguotao.com/Kotlin-2017-06-10-Kotlin-note2.html</id>
    <published>2017-06-09T02:30:37.000Z</published>
    <updated>2017-06-23T11:06:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇 <em><a href="/Kotlin-2017-06-09-Kotlin-note1.html">Kotlin的前世今生</a></em> 中介绍了Kotlin的一些特点，下面记录一下Kotlin开发环境的配置，并且完成“Hello Kotlin”的打印输出。</p>
<h2 id="AndroidStudio"><a href="#AndroidStudio" class="headerlink" title="AndroidStudio"></a>AndroidStudio</h2><p>由于AndroidStudio是基于Intllij Idead的插件实现，Intellij Idea也是JetBrains开发的，所有AndroidStudio就与Kotlin天生有一层紧密的联系，在AndroidStudio的预览版中已经将Kotlin作为了一个基础插件进行了集成，官方最新的2.3版本还暂时没有集成Kotlin插件，需要手动进行安装，安装的过程也非常的简单，具体路径Preferences–&gt;Plugin,选择Kotlin，安装，重启编译器。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170622149812368551731.png" alt="20170622149812368551731.png"><br>Eclipse编译器同样需要手动安装插件，从Intellij 15开始，Kotlin也默认是安装的。</p>
<h2 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><p>使用gradle构建Kotlin项目时，需要添加kotlin的依赖，对不同的项目，gradle文件也有所不同。</p>
<h3 id="Java项目"><a href="#Java项目" class="headerlink" title="Java项目"></a>Java项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    ext.kotlin_version = &apos;1.1.2&apos;</div><div class="line"></div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: &apos;java&apos;</div><div class="line">apply plugin: &apos;kotlin&apos;</div><div class="line"></div><div class="line">sourceCompatibility = 1.7</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile &quot;org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version&quot;</div><div class="line">    testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.12&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="JavaScript项目"><a href="#JavaScript项目" class="headerlink" title="JavaScript项目"></a>JavaScript项目</h3><p>JavaScript使用不同的插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: &quot;kotlin2js&quot;</div></pre></td></tr></table></figure></p>
<h3 id="Android项目"><a href="#Android项目" class="headerlink" title="Android项目"></a>Android项目</h3><p>如果通过编译器新建Kotlin项目工程，Gradle文件是默认生成的，如果要手动修改，需要手动添加Kotlin的引用包。在工程的gradle文件中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    ext.kotlin_version = &apos;1.1.0&apos; //使用的kotlin版本</div><div class="line"></div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dependencies &#123;</div><div class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建一个变量来保存当前使用的kotlin的版本号，在每个module的gradle文件中，都会用到这个变量，当使用高版本的kotlin时，直接修改这个变量即可。</p>
<h2 id="Hello-Kotlin"><a href="#Hello-Kotlin" class="headerlink" title="Hello Kotlin"></a>Hello Kotlin</h2><p>打开IntelliJ，新建project，选中Kotlin。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170622149812594181308.png" alt="20170622149812594181308.png"><br>输入GroupID（项目组织唯一的标识符，建议对应JAVA的包的结构）和 ArtifactID（项目的唯一的标识符，建议对应项目的名称），一路Next。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170622149812620532141.png" alt="20170622149812620532141.png"><br>新建的工程中，是没有src文件的，需要手动添加，新建directory，名称src/main/kotlin。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170622149812643655117.png" alt="20170622149812643655117.png"><br>新建一个package，创建HelloKotlin.kt。<br> <img src="http://7u2np3.com1.z0.glb.clouddn.com/2017062214981267486665.png" alt="2017062214981267486665.png"><br>添加一个main方法，输出“Hello Kotlin”。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170622149812693961350.png" alt="20170622149812693961350.png"><br>至此，完成了“Hello Kotlin”的输出。</p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/Kotlin-2017-06-10-Kotlin-note2.html">http://www.sguotao.com/Kotlin-2017-06-10-Kotlin-note2.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一篇 &lt;em&gt;&lt;a href=&quot;/Kotlin-2017-06-09-Kotlin-note1.html&quot;&gt;Kotlin的前世今生&lt;/a&gt;&lt;/em&gt; 中介绍了Kotlin的一些特点，下面记录一下Kotlin开发环境的配置，并且完成“Hello Kotlin”的打印输出。
    
    </summary>
    
      <category term="Kotlin" scheme="http://www.sguotao.com/categories/Kotlin/"/>
    
    
      <category term="Android" scheme="http://www.sguotao.com/tags/Android/"/>
    
      <category term="Kotlin" scheme="http://www.sguotao.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>【转】程序员为什么会忧虑自己的未来?</title>
    <link href="http://www.sguotao.com/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F-2017-06-02-%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%BF%A7%E8%99%91%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%AA%E6%9D%A5.html"/>
    <id>http://www.sguotao.com/生活感悟-2017-06-02-程序员为什么会忧虑自己的未来.html</id>
    <published>2017-06-02T02:22:08.000Z</published>
    <updated>2017-06-02T10:40:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>所谓的稳定，是最大的谎言。在高速发展的行业，根本没有一个稳定的职业。解决焦虑的最终办法是重新定位自己的职业生涯，尽量不以所谓的熟练度和经验作为自己的竞争力，将自己的职业生涯押注在某项低门槛的技术上，而是根据自身的情况，持续不断提高综合竞争力，加强自己的不可替代性。</p>
</blockquote>
<a id="more"></a>
<p>文章作者:陈驰远，青橙科技CTO，互联网行业的一名老兵，以下是部分摘录。更多讨论，请戳原文。<br>原文链接:<a href="https://juejin.im/post/5930acd6a0bb9f0058af41e5" target="_blank" rel="external">https://juejin.im/post/5930acd6a0bb9f0058af41e5</a></p>
<p>从去年开始，我参加了一些分享交流，也对外发过一些自己对工作所遇问题的思考。不少程序员加我好友咨询问题，几乎每个人问的问题都跟职业规划有关。这提醒了我，其实我自己也一直在思考同样的问题并尝试规划未来。于是想和大家分享一下自己在这方面的感悟。</p>
<p>本文仅从我自己的角度来剖析对程序员职业规划的看法，并不全面。而下文中提到的程序员群体也泛指在一线具体执行编码任务的程序员，不包含一些高精尖技术岗位的专业技术人才或是已经有自己明确职业规划，已经进阶成功的工程师。</p>
<h2 id="什么引发了焦虑？"><a href="#什么引发了焦虑？" class="headerlink" title="什么引发了焦虑？"></a>什么引发了焦虑？</h2><p>互联网是一个新兴但高速发展的行业。新兴意味着没有那么多的职场楷模给新人指明方向，也没有一套公认的稳定可复制的职业发展路线。高速发展意味着变革与竞争，大量新人因为行业红利涌入，你无时无刻要跟一群优秀的热血青年同场竞技。</p>
<p>互联网行业工作强度很大，而中国的互联网从业者更忙。程序员更是战场中的排头兵，身体健康的透支导致很难长期抗战。当你意识到自己跟不上节奏的时候，不管是出于对身体状况的担忧，还是对未来潜在威胁的恐惧，又怎会不感到焦虑呢？而程序员的职业特性加剧了这种焦虑，主要表现在以下几方面：</p>
<h2 id="程序员职业复利性较低。"><a href="#程序员职业复利性较低。" class="headerlink" title="程序员职业复利性较低。"></a>程序员职业复利性较低。</h2><h3 id="什么叫复利性？"><a href="#什么叫复利性？" class="headerlink" title="什么叫复利性？"></a>什么叫复利性？</h3><p>就如同利息的计算方法一样，在本金相同的情况下，复利获得的利息回报要高于单利，而年期越长，复利效应越高。职业一样有复利效应，一个复利高的职业在职业生涯中后期会展现出越来越高的价值。医生、律师都是复利性很高的职业。而程序员职业复利性较低，主要有两个原因：</p>
<ul>
<li><strong>专业性强，通用性差。不同技术种类有着自己的技术栈，共用的只有设计思想、编程范式，基础技术等通用知识。</strong></li>
<li><strong>在没有明确规划的情况下，大多数程序员日常工作积累的不是通用知识与综合能力，而仅仅是某项技术的熟练度与经验。这是根本原因。</strong><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170602149637117527702.jpg" title="后端技术栈">
<img src="http://7u2np3.com1.z0.glb.clouddn.com/20170602149637119625879.jpg" title="前端技术栈">
这造成了一个问题——当职业生涯遇到瓶颈时，程序员很难完成一次完美的进阶。让我们分析下最常见的三类方案：</li>
</ul>
<ol>
<li><p><strong>技术职位之间的转岗。</strong>这是最普遍的一种情况，Android转IOS，后端转前端等都在此列。虽然设计原则、编程范式等技术知识是通用的，但作为一线的执行者，技术的熟练度才是影响你工作效率的最大因素，你必须对技术栈非常熟悉才能体现工作的专业度。 转岗往往是无奈之举。</p>
</li>
<li><p><strong>技术转产品/运营岗。</strong>很多工程师抱怨产品经理设计的产品有问题，逻辑不严密，用起来很别扭。但让工程师做产品，问题一般会更多。为什么呢？最大的原因在于程序员的思维模式或多或少会受到编程的影响，偏向理性与具象化，缺少了感性的察言观色以及换位思考的能力。设计好一个产品，逻辑严密只是条件之一，但并不是最重要的条件。产品经理需要从用户的行为中挖掘出用户真正的需求，提炼归纳并设计成一个可用的产品。这是大多数程序员很难做好的事情。</p>
</li>
<li><p><strong>技术转管理岗。</strong>BAT都有自己的M岗位，高工都可以选择是继续走技术路线还是尝试走管理路线。很多程序员安慰自己，哪天真写不动代码了，那我就做技术经理吧。但我认为管理岗的转变比前面两类都难。管理是一门很深的学问，执行和管理是两回事，需要从根本上改变思维模式。评判一个工程师的好坏可以看工程师的产出，而评判一个管理者的好坏在于整个团队的产出和效率。很多优秀的程序员自己技术能力很强，却很难带领整个团体一起向前进。</p>
</li>
</ol>
<h2 id="程序员职业的壁垒没想象中高，鲁棒性低。"><a href="#程序员职业的壁垒没想象中高，鲁棒性低。" class="headerlink" title="程序员职业的壁垒没想象中高，鲁棒性低。"></a>程序员职业的壁垒没想象中高，鲁棒性低。</h2><p>鲁棒性也指抗变换性，一个好的职业需要有高的鲁棒性。大部分程序员把自己的职业与某项技能绑定。做过编程的都知道，一个高耦合低抽象的编码鲁棒性一定低。互联网行业变化太快，回头看下诺基亚的发展，Windows桌面应用开发，整个行业如同大浪淘沙。随着云平台的崛起，公有化平台的发展，API服务的开放，可以预见从业者的工作效率会大幅提高，同时很多职业可能会再次洗牌：基础运维工程师，DBA，基础算法工程师，安全工程师，图像算法工程师，数据工程师等等都在此列。</p>
<p>从另外一个角度来说，假设你运气很好，选择了一项长期热门的技术比如Web前端开发。但是因为行业红利太高，无数聪明、努力、上进的热血青年涌入其中。随着社区的发展，在线教育的普及，达到同样熟练度的时间越来越短，而热门互联网技术的发展是以月计，你需要花费大量的时间去学习积累新技术。新人与你的差距会越来越小，你会随时面临被超车的局面。这意味着，很多时候即使你认为自己经验更丰富，能力更强，但你却得不到理想的职位及薪资待遇。</p>
<h2 id="程序员职业能撬动的价值有限。"><a href="#程序员职业能撬动的价值有限。" class="headerlink" title="程序员职业能撬动的价值有限。"></a>程序员职业能撬动的价值有限。</h2><p>这个概念受启发于《格鲁夫给经理人的第一课》一书。格鲁夫试图定量的分析经理人的产出，于是提出了一个公式：经理人的产出 = 他直接管辖部门的产出 + 他间接影响所及部门的产出。为了定量的分析职业的价值，我也引入了一个公式：产出的价值 = 他自身的产出 + 他直接影响部门的产出 + 他间接影响所及部门的产出</p>
<p><strong>职业能影响的人越多，创造的价值越高，职业的上限价值也越高。</strong></p>
<p>互联网行业的供求关系以及价值体系，造成了一个现象：程序员供不应求使其入行薪资高，但是工作五年以上薪资趋向于稳定。对于绝大部分公司的绝大部分职位，当熟练度和经验达到某一个阈值的时候，选择成本是趋同的，自身效率提高所能带动的价值提高已经很有限。正因为如此，从业者在享受了薪资高速增长之后，很难接受薪资增幅趋缓，职业生涯遇到瓶颈引发焦虑。</p>
<img src="http://7u2np3.com1.z0.glb.clouddn.com/2017060214963712208098.jpg" title="[薪资待遇]">
<h2 id="我的规划是什么？"><a href="#我的规划是什么？" class="headerlink" title="我的规划是什么？"></a>我的规划是什么？</h2><p>分析了这么多，我最想表达的意思是：所谓的稳定，是最大的谎言。在高速发展的行业，根本没有一个稳定的职业。解决焦虑的最终办法是重新定位自己的职业生涯，尽量不以所谓的熟练度和经验作为自己的竞争力，将自己的职业生涯押注在某项低门槛的技术上，而是根据自身的情况，持续不断提高综合竞争力，加强自己的不可替代性。</p>
<p>首先我会分析自己的特点，这是建立与他人的差异性和自己独特标签的关键所在，也是最值得加强的地方。我最大的特点是什么？<br><strong>有野心。</strong>我不想选择一种得过且过的生活，而会选择一个产出价值更高的事情来做，影响更多的人，创造更高的价值。<br><strong>会沟通。</strong>我沟通能力不错，既可以对外谈合作，又可以对内做管理。这会是我相对一般技术型程序员一个很大的不同。<br><strong>专业强。</strong>在专业技能层面我有较深的认识与理解，虽然谈不上顶尖，但我知道怎么运用自己的知识能力找到最适合现状的方法解决几乎所有日常问题。技术积累永远是我最核心的竞争力。</p>
<p>知道自己特点之后，我会以此为基础来增强自己的不可替代性。不可替代性不仅仅只是基于个人的能力，还有这几点是需要日常注意积累的：<br><strong>健康的身体。</strong>在经历过一次生病后，我更加意识到拥有一个健康的身体才是最重要的。积极健身可是我们青橙员工的必备素质。<br><strong>思想与格局的高度。</strong>思想的高度并不是一朝一夕就能拔高的，而是在经历了来自工作与生活的各种挑战之后，静下心来反思总结，从而慢慢积累并提升。<br><strong>人脉与影响力。</strong>乐于记录和分享自己的工作感悟。抓住向其他人学习的机会，比如参加一些会议或交流，不管是同行业还是其他行业的，都是很有必要的。人脉和影响力的积累与格局的高度也是相辅相成的，与某些方面比自己优秀的人交流往往会收获满满。<br><strong>当我有了明确的方向并且每天都能看到自己进步的时候，就会对未来充满憧憬。</strong>我给自己未来的定位是做一名解决者。何谓解决者？面对未知或已知的问题，知道如何分析本质原因，制定并实施解决方案。附加打油诗一首：</p>
<blockquote>
<p>文能设计定需求，武可写码做架构。<br>进做招商引融资，退做大V占风口。<br>产品体验包上线，还要招人带节奏。</p>
</blockquote>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/生活感悟-2017-06-02-程序员为什么会忧虑自己的未来.html">http://www.sguotao.com/生活感悟-2017-06-02-程序员为什么会忧虑自己的未来.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;所谓的稳定，是最大的谎言。在高速发展的行业，根本没有一个稳定的职业。解决焦虑的最终办法是重新定位自己的职业生涯，尽量不以所谓的熟练度和经验作为自己的竞争力，将自己的职业生涯押注在某项低门槛的技术上，而是根据自身的情况，持续不断提高综合竞争力，加强自己的不可替代性。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="生活感悟" scheme="http://www.sguotao.com/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="生活" scheme="http://www.sguotao.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>【RN笔记】ReactNative Flex整理</title>
    <link href="http://www.sguotao.com/ReactNative-2017-05-17-rn-flex.html"/>
    <id>http://www.sguotao.com/ReactNative-2017-05-17-rn-flex.html</id>
    <published>2017-05-17T02:27:04.000Z</published>
    <updated>2017-06-08T10:44:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flex容器属性"><a href="#Flex容器属性" class="headerlink" title="Flex容器属性"></a>Flex容器属性</h2><ul>
<li><p><strong>flex-direction 属性决定主轴的方向（即项目的排列方向）。</strong></p>
<pre><code>row（默认值）：主轴为水平方向，起点在左端。
row-reverse：主轴为水平方向，起点在右端。
column：主轴为垂直方向，起点在上沿。
column-reverse：主轴为垂直方向，起点在下沿。
</code></pre></li>
<li><p><strong>flex-wrap 默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。</strong></p>
<pre><code>nowrap（默认）：不换行。
wrap：换行，第一行在上方。
wrap-reverse：换行，第一行在下方。
</code></pre></li>
<li><p><strong>flex-flow 属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</strong></p>
</li>
<li><p><strong>justify-content 属性定义了项目在主轴上的对齐方式。</strong></p>
<pre><code>flex-start（默认值）：左对齐
flex-end：右对齐
center： 居中
space-between：两端对齐，项目之间的间隔都相等。
space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。
</code></pre></li>
<li><p><strong>align-items 属性定义项目在交叉轴上如何对齐。</strong></p>
<pre><code>flex-start：交叉轴的起点对齐。
flex-end：交叉轴的终点对齐。
center：交叉轴的中点对齐。
baseline: 项目的第一行文字的基线对齐。
stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。
</code></pre></li>
<li><p><strong>align-content 属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</strong></p>
<pre><code>flex-start：与交叉轴的起点对齐。
flex-end：与交叉轴的终点对齐。
center：与交叉轴的中点对齐。
space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。
space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。
stretch（默认值）：轴线占满整个交叉轴。
</code></pre></li>
</ul>
<h2 id="Flex项目属性"><a href="#Flex项目属性" class="headerlink" title="Flex项目属性"></a>Flex项目属性</h2><ul>
<li><p>order 属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>
</li>
<li><p>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>
</li>
<li><p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>
</li>
<li><p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p>
</li>
<li><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
</li>
<li><p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>
</li>
</ul>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/ReactNative-2017-05-17-rn-flex.html">http://www.sguotao.com/ReactNative-2017-05-17-rn-flex.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Flex容器属性&quot;&gt;&lt;a href=&quot;#Flex容器属性&quot; class=&quot;headerlink&quot; title=&quot;Flex容器属性&quot;&gt;&lt;/a&gt;Flex容器属性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;flex-direction 属性决定主轴的方向（即项目的
    
    </summary>
    
      <category term="ReactNative" scheme="http://www.sguotao.com/categories/ReactNative/"/>
    
    
      <category term="ReactNative" scheme="http://www.sguotao.com/tags/ReactNative/"/>
    
      <category term="Flex" scheme="http://www.sguotao.com/tags/Flex/"/>
    
  </entry>
  
  <entry>
    <title>【读书笔记】人民的名义</title>
    <link href="http://www.sguotao.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2017-05-04-%E4%BA%BA%E6%B0%91%E7%9A%84%E5%90%8D%E4%B9%89.html"/>
    <id>http://www.sguotao.com/读书笔记-2017-05-04-人民的名义.html</id>
    <published>2017-05-04T04:00:00.000Z</published>
    <updated>2017-06-17T12:31:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>车窗外，严酷的冬季让广袤大地褪尽了五彩缤纷，裸露出素朴的本色，宛如卸妆后的母亲。<br>北风凛冽，裹挟着原野上的残草败叶，不时地扑打着路面。<br>然而冷峻的荒漠中，不也孕育着春天的希望吗？<br><a id="more"></a></p>
</blockquote>
<p><img src="http://7u2np3.com1.z0.glb.clouddn.com/2017060914970149358704.png" alt="2017060914970149358704.png"><br>酣畅淋漓的读完了整本书，热播的电视剧也进入了收官，如何评价书中的人物？我想，不同的人，会因为个人经历的不同，看问题的角度不同，人生观、世界观和价值观不同，对同一个人物，会做出完全不同的评价。</p>
<blockquote>
<p>摘自公众号：闲人笔潭</p>
</blockquote>
<p>这部剧播出至今，不仅收视率火热，关于剧情、人物的讨论更是一浪高过一浪。而且有意思的地方在于，舆论的反转。</p>
<p>正义精明的检察官变成了何不食肉糜的既得利益者；<br>祁同伟从一个腐败官员变成了一个“寒门难出贵子”的悲情人物；<br>达康书记从一个有能力有抱负的政治家变成了伪君子。<br>而与之相对应的，是孙连城、高育良、沙瑞金甚至陈岩石评价的反转。</p>
<p>公众话题的有趣之处就在于：<strong>面对同一个问题，不同人会因为个人经历的不同、三观的不同、立场的不同与角度的不同发表出截然不同的评价。</strong></p>
<p>替祁同伟打抱不平，是因为祁同伟的悲情遭遇让诸多还在奋斗以及奋斗失败的人们心生共鸣。甚至不少人反对“阶级固化”更胜于反腐：<strong>腐败损失的是人民的经济利益，阶级固化是近乎堵死了寒门子弟上升的渠道与奋斗的动力。</strong></p>
<p>觉得侯亮平夫妇、陆亦可他们“何不食肉糜”的，也再正常不过。这个世界确实是分层的，但在你心里，可以不分。可钟小艾一句“摆得正自己的位置”，不知让多少人感受到了这种分层，以及优越感。</p>
<p>觉得李达康横行霸道的，是因为谁都不愿意身边有个这样一个聪明、有能力却“不粘锅”的人，“先生如万年青草，可以傲霜雪而不可充栋梁”大家都知道这个人好，但都想离他远点。</p>
<p>而大家讨论着，甚至吵得面红耳赤，当真是为了这么几个角色么？<strong>其实大多都是在讲自己的价值观，寻求价值认同啊</strong>。</p>
<p>价值观源自于出身、经历、读书思考，是每个人自身的精神之源，这样的动力才让我们每一个人都在为自己深有感触的地方发声。我们理解某些悲剧的时候也在潜意识的担心这些悲剧会不会在自己身上上演，我们控诉某些不公的时候更加感触得到这些不公就在自己的生活中，讨论的是剧情，共鸣的是每个人的经历。所以窃以为，大家最关注的、最感同身受的问题，恐怕也是当下社会存在的最显著的问题。</p>
<p>没错，就是阶级固化。中国是一个伪装成世界的国家，沿海是高楼大厦的现代社会，西部是还在等待扶贫的山区；南部的商业意识已发展数十年，深入人心，东北的人情关系更世代未变，根深蒂固；北上广的孩子们在排歌剧话剧的时候河南河北的学生还在“只要学不死，就往死里学”的标语下挑灯夜读。虽然在同一片土地上，却是不同的世界。</p>
<p>阶级固化所给人带来的就是像祁同伟那样“品学兼优的学生会主席，主动参加缉毒，身中三枪的英雄也被权力任意支配”的恐惧与无力感；还有钟小艾的“只要再努力一下就好了”的“何不食肉糜”般的轻描淡写。但是更会有人认为贪腐了就是贪腐了，没有任何贪腐的理由。这种撕裂的观点可能就是大家不同的经历：有些人苦于成才无门，有些人则受难于贪官污吏，正是这些不同的角度才有了前些天对“达康书记”的赞誉与这些天对“祁厅长”遭遇的同情，以及对这部剧的各种评判。</p>
<p>祁同伟是一个可惜可叹的悲剧，其实剧中哪一位有血有肉的人物不是呢？农民出身一分钱不敢花的赵德汉、善于谋划学识渊博的教授书记高育良、爷爷闹革命出身能熟练背出《共产党宣言》的刘新建。他们都曾拼搏奋斗，也都有了一般人很难拥有的学识、能力，他们最终也都贪污腐化了。有个人的原因，也有制度的原因。</p>
<p>想起几年前的“民国热”，当时还在热心科普民国的种种“真相”，想让向往民国的朋友们知道那是一个路有冻死骨的乱世，可应者渺渺。后来才被一句话点醒：“除了年轻学生，谁会真想去民国，连个手机都没有，只不过都是对现实有些不满罢了。”就如同文艺复兴从来就不是想回到希腊。</p>
<p>评《人民的名义》也不是真的想过天下大同，每个人都是圣人。<strong>这些激烈争吵，只是希望我们的价值观能得到更多的认同，希望社会能往更好的一点发展。当人们“一切向钱看”，而没有了价值信仰和精神寄托时，社会的稳定与繁荣就很难持续。当收入不高和升迁无望的政府官员面对诱惑而没有抵抗力时，就很难指望可以一劳永逸地使干部队伍保持廉洁。当某地的政治平衡和权力格局需要借助外力才能打破时，该地政治生态系统的自我修复功能就值得警惕。讨论《人民的名义》时，大概讨论的，可能都是自己的人生吧。</strong></p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/读书笔记-2017-05-04-人民的名义.html">http://www.sguotao.com/读书笔记-2017-05-04-人民的名义.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;车窗外，严酷的冬季让广袤大地褪尽了五彩缤纷，裸露出素朴的本色，宛如卸妆后的母亲。&lt;br&gt;北风凛冽，裹挟着原野上的残草败叶，不时地扑打着路面。&lt;br&gt;然而冷峻的荒漠中，不也孕育着春天的希望吗？&lt;br&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://www.sguotao.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://www.sguotao.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="人民的名义" scheme="http://www.sguotao.com/tags/%E4%BA%BA%E6%B0%91%E7%9A%84%E5%90%8D%E4%B9%89/"/>
    
  </entry>
  
  <entry>
    <title>分析Android中的Property Animation</title>
    <link href="http://www.sguotao.com/Android%E8%BF%9B%E9%98%B6-2016-05-20-%E5%88%86%E6%9E%90Android%E4%B8%AD%E7%9A%84Property-Animation.html"/>
    <id>http://www.sguotao.com/Android进阶-2016-05-20-分析Android中的Property-Animation.html</id>
    <published>2017-05-02T02:27:04.000Z</published>
    <updated>2017-07-13T10:04:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android的动画可以大体分为两类，分别是传统动画和Android3.0之后出现的属性动画(Property Animation)，关于传统动画的介绍在此前的两篇笔记中，进行了整理。<br><a href="/Android进阶-2016-05-18-android-view-animation.html">Android动画分析一 View Animation</a><br><a href="/Android进阶-2016-05-19-android-drawable-animation.html">Android动画分析二 Drawable Animation</a><br>在这一篇中，将对Android3.0之后出现的属性动画(Property Animation)进行整理。既然已经有了View Animation和Drawable Animation了，为什么还要引入Property Animation呢？</p>
<blockquote>
<p>1.使用动画场景的需求超出了移动、缩放、旋转和淡入淡出这四种对View的操作，那么View动画就不能再帮我们忙了，也就是说View动画在功能和可扩展方面都有相当大的局限性。</p>
<p>2.Property Animation是改变对象的属性，不仅仅是对view本身做操作。传统的View动画只是改变view的显示效果，并不改变view的属性。郭霖介绍了一个比较形象的例子🌰，比如说，现在屏幕的左上角有一个按钮，然后我们通过View动画将它移动到了屏幕的右下角，点击一下这个按钮，点击事件是绝对不会触发的，因为实际上这个按钮还是停留在屏幕的左上角，只不过View动画将这个按钮绘制到了屏幕的右下角而已。属性动画的实现机制是通过对目标对象进行赋值并修改其属性来实现的，那么之前所说的按钮显示的问题也就不复存在了，如果我们通过属性动画来移动一个按钮，那么这个按钮就是真正的移动了，而不再是仅仅在另外一个位置绘制了而已。</p>
</blockquote>
<h2 id="Property-Animation"><a href="#Property-Animation" class="headerlink" title="Property Animation"></a>Property Animation</h2><p>Property Animation是Android3.0(API11)之后引入的动画，属性动画的引入，极大的地丰富了Android的动画体系，与传统的View动画和Drawable动画还是存在一些差别，在使用的过程中需要留意：</p>
<p>1.传统动画的xml文件存放在res/anim/目录下，而属性动画的xml文件存放在res/animator/目录下，虽然animator有着anim的前缀，但这是两个完全不同的目录。由于存放目录的不同，因此在代码中引用的方式也会有所差别，传统动画可以通过R.anim.filename获得动画的引用，属性通过则通过R.animator.filename获得动画的引用。</p>
<p>2.属性动画常用的Java类与传统动画Java类很相似，比如属性动画集AnimatorSet和传统动画集AnimationSet，在使用时注意区别，可以简化记忆“后缀是mator的是属性动画，后缀是mation的是传统动画”。属性动画中，常用的类，可以简单的用下面的类图进行概括。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170607149683875928772.png" alt="20170607149683875928772.png"><br>属性动画也支持xml标签的使用方式，Android API提供了三种类型的标签，分别是&lt;animator&gt;、&lt;objectAnimator&gt;、&lt;set&gt;每个标签都有对应的Java实现类。</p>
<h3 id="lt-animator-gt-ValueAnimator"><a href="#lt-animator-gt-ValueAnimator" class="headerlink" title="&lt;animator&gt;-ValueAnimator"></a>&lt;animator&gt;-ValueAnimator</h3><blockquote>
<p>ValueAnimator是整个属性动画机制当中最核心的一个类，属性动画的运行机制是通过不断地对值进行操作来实现的，而初始值和结束值之间的动画过渡就是由ValueAnimator这个类来负责计算的。它的内部使用一种时间循环的机制来计算值与值之间的动画过渡，通过Handler来完成动画的绘制以确保属性的变化发生在UI线程，我们只需要将初始值和结束值提供给ValueAnimator，并且告诉它动画所需运行的时长，那么ValueAnimator就会自动帮我们完成从初始值平滑地过渡到结束值这样的效果。</p>
</blockquote>
<p>&lt;animator&gt;标签对应的Java实现类正是ValueAnimator类，&lt;animator&gt;包括以下属性：</p>
<table>
<thead>
<tr>
<th style="text-align:center">XML Attribute</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">android:duration</td>
<td style="text-align:center">动画从开始到结束持续的时长，单位为毫秒</td>
</tr>
<tr>
<td style="text-align:center">android:startOffset</td>
<td style="text-align:center">设置动画执行之前的等待时长，单位为毫秒</td>
</tr>
<tr>
<td style="text-align:center">android:repeatCount</td>
<td style="text-align:center">设置动画重复执行的次数，默认为0，不重复；可设为-1或infinite，表示无限重复</td>
</tr>
<tr>
<td style="text-align:center">android:repeatMode</td>
<td style="text-align:center">设置动画重复执行的模式，RESTART(默认值) 动画重复执行时从起点开始，REVERSE动画会反方向执行</td>
</tr>
<tr>
<td style="text-align:center">android:interpolator</td>
<td style="text-align:center">设置动画的插值器,若不设置，默认使用 AccelerateDecelerateInterpolator</td>
</tr>
<tr>
<td style="text-align:center">android:valueFrom</td>
<td style="text-align:center">动画开始的值，可以为int值、float值或color值</td>
</tr>
<tr>
<td style="text-align:center">android:valueTo</td>
<td style="text-align:center">动画结束的值，可以为int值、float值或color值</td>
</tr>
<tr>
<td style="text-align:center">android:valueType</td>
<td style="text-align:center">动画值类型，floatType(默认值) 指定动画值，即以上两个value属性的值为浮点型,intType 指定动画值，即以上两个value属性的值为整型,若为color值，则无需设置该属性</td>
</tr>
</tbody>
</table>
<p>同样的，属性动画也支持代码和资源文件两种创建方式。当使用资源文件时，需要通过AnimatorInflater中的loadAnimator()方法，将资源文件进行加载，得到Animator对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Animator animator = AnimatorInflater.loadAnimator(context, R.animator.anim_file);  </div><div class="line">animator.setTarget(view);  </div><div class="line">animator.start();</div></pre></td></tr></table></figure></p>
<p>资源文件定义方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;animator xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:duration=&quot;1000&quot;</div><div class="line">    android:valueFrom=&quot;1&quot;</div><div class="line">    android:valueTo=&quot;0&quot;</div><div class="line">    android:valueType=&quot;floatType&quot;</div><div class="line">    android:repeatCount=&quot;1&quot;</div><div class="line">    android:repeatMode=&quot;reverse&quot;/&gt;</div></pre></td></tr></table></figure></p>
<p>代码的实现方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ValueAnimator valueAnimator = ValueAnimator.ofFloat(1f, 0f);</div><div class="line">valueAnimator.setDuration(1000);</div><div class="line">valueAnimator.setRepeatCount(1);</div><div class="line">valueAnimator.setRepeatMode(ValueAnimator.REVERSE);</div><div class="line">valueAnimator.start();</div></pre></td></tr></table></figure></p>
<h3 id="lt-objectAnimator-gt-ObjectAnimator"><a href="#lt-objectAnimator-gt-ObjectAnimator" class="headerlink" title="&lt;objectAnimator&gt;-ObjectAnimator"></a>&lt;objectAnimator&gt;-ObjectAnimator</h3><blockquote>
<p>&lt;objectAnimator&gt;标签对应的Java实现类是ObjectAnimator，相比于ValueAnimator，ObjectAnimator可能才是我们最常接触到的类，因为ValueAnimator只不过是对值进行了一个平滑的动画过渡，但我们实际使用到这种功能的场景好像并不多。而ObjectAnimator则就不同了，它是可以直接对任意对象的任意属性进行动画操作的，比如说View的alpha属性。ObjectAnimator是继承自ValueAnimator的，底层的动画实现机制也是基于ValueAnimator来完成的，因此ValueAnimator仍然是整个属性动画当中最核心的一个类。</p>
</blockquote>
<p>由于ObjectAnimation继承ValueAnimator，所以&lt;objectAnimator&gt;除了&lt;animator&gt;的属性外，还包括自身特有的属性：</p>
<table>
<thead>
<tr>
<th style="text-align:center">XML Attribute</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">android:propertyName</td>
<td style="text-align:center">目标对象的属性名，要求目标对象必须提供该属性的setter方法，如果动画的时候没有初始值，还需要提供getter方法</td>
</tr>
</tbody>
</table>
<p>xml资源文件创建方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;objectAnimator xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:duration=&quot;1000&quot;</div><div class="line">    android:valueTo=&quot;200&quot;</div><div class="line">    android:valueType=&quot;floatType&quot;</div><div class="line">    android:propertyName=&quot;y&quot;</div><div class="line">    android:repeatCount=&quot;1&quot;</div><div class="line">    android:repeatMode=&quot;reverse&quot;/&gt;</div></pre></td></tr></table></figure></p>
<p>代码创建方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator.ofFloat(view,&quot;alpha&quot;,0f,1f)</div><div class="line">            .setDuration(3000)</div><div class="line">            .start();</div></pre></td></tr></table></figure></p>
<p>ObjectAnimator提供了对View属性的设置，因为采用了反射的方式，所以要求View中要有该属性的setter和getter方法。当然，为了对View更方便的设置属性动画，Android系统也提供了View的一些属性和相应的setter和getter方法：</p>
<table>
<thead>
<tr>
<th style="text-align:center">XML Attribute</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">alpha</td>
<td style="text-align:center">透明度，默认为1，表示不透明，0表示完全透明</td>
</tr>
<tr>
<td style="text-align:center">pivotX 和 pivotY</td>
<td style="text-align:center">缩放动画固定点坐标</td>
</tr>
<tr>
<td style="text-align:center">scaleX 和 scaleY</td>
<td style="text-align:center">水平方向和垂直方向的缩放比例</td>
</tr>
<tr>
<td style="text-align:center">rotation、rotationX 和 rotationY</td>
<td style="text-align:center">基于固定点(pivotX,pivotY)做旋转,rotation是旋转度数,rotationX是水平旋转度数,rotationY是竖直旋转度数</td>
</tr>
<tr>
<td style="text-align:center">translationX 和 translationY</td>
<td style="text-align:center">水平方向移动距离和竖直方向移动距离</td>
</tr>
<tr>
<td style="text-align:center">x 和 y</td>
<td style="text-align:center">View在父容器内左上角的坐标</td>
</tr>
</tbody>
</table>
<p>通过对上面这些属性的操作，就可以完成传统View动画实现的效果。上面的示例代码中，实现了对一个属性的修改，如果对多个属性进行修改，该如何操纵呢？<br>PropertyValuesHolder可以实现对一组属性或多组属性的持有，可以同时设置多个属性，通过ofPropertyValuesHolder()方法，设置到对应的动画view上，这样局完成了动画过程中，多个属性的修改。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">PropertyValuesHolder pValue1 = PropertyValuesHolder.ofFloat(&quot;alpha&quot;, 0f, 1f);</div><div class="line">PropertyValuesHolder pValue2 = PropertyValuesHolder.ofFloat(&quot;scaleX&quot;, 0f, 1f);</div><div class="line">PropertyValuesHolder pValue3 = PropertyValuesHolder.ofFloat(&quot;scaleY&quot;, 0f, 1f);</div><div class="line">ObjectAnimator.ofPropertyValuesHolder(view, pValue1, pValue2, pValue3).setDuration(3000).start();</div></pre></td></tr></table></figure>
<p>PropertyValuesHolder类提供了多个of开头的方法，以实现不同数据类型属性的设置，其中有一组方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public static PropertyValuesHolder ofKeyframe(String propertyName, Keyframe... values)</div><div class="line">public static PropertyValuesHolder ofKeyframe(Property property, Keyframe... values)</div><div class="line">static PropertyValuesHolder ofKeyframes(String propertyName, Keyframes keyframes)</div><div class="line">static PropertyValuesHolder ofKeyframes(Property property, Keyframes keyframes)</div></pre></td></tr></table></figure></p>
<p>在这组方法中，用到了Keyframe和Keyframes两个类，那么这两个类是做什么用的？Keyframe，关键帧，该类型对象由一个time/value对组成，定义了指定时间点的指定值。Keyframe是一个抽象类，在该类中定义了三个实现类ObjectKeyframe，IntKeyframe，FloatKeyframe用来保存Object、Int、Float类型的value。Keyframes是一个接口，KeyframeSet是它的实现类，KeyframeSet可以认为是关键帧Keyframe的辅助类，在KeyframeSet中维护着一个Keyframe类型的list。在API 23以后，可以在xml文件中使用PropertyValuesHolder。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;objectAnimator xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">                android:duration=&quot;1000&quot;</div><div class="line">                android:repeatCount=&quot;1&quot;</div><div class="line">                android:repeatMode=&quot;reverse&quot;&gt;</div><div class="line">    &lt;propertyValuesHolder android:propertyName=&quot;x&quot; android:valueTo=&quot;400&quot;/&gt;</div><div class="line">    &lt;propertyValuesHolder android:propertyName=&quot;y&quot; android:valueTo=&quot;200&quot;/&gt;</div><div class="line">&lt;/objectAnimator&gt;</div></pre></td></tr></table></figure></p>
<p>在API16(Android4.1)中，新添加了TimeAnimator类，这个类它并不能直接实现动画效果，这个类有一个TimeListener接口，TimeListener会返回动画持续的时间，与上次调用的间隔时间。</p>
<h3 id="lt-set-gt-AnimatorSet"><a href="#lt-set-gt-AnimatorSet" class="headerlink" title="&lt;set&gt;-AnimatorSet"></a>&lt;set&gt;-AnimatorSet</h3><p>属性动画也可以实现多个动画的组合效果，对应AnimatorSet类。由于&lt;set&gt;实现动画组合的标签，所以它有一个设定动画顺序的属性:</p>
<table>
<thead>
<tr>
<th style="text-align:center">XML Attribute</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">android:ordering</td>
<td style="text-align:center">设置动画的时序关系，together(默认值) 动画同时执行，sequentially 动画按顺序执行</td>
</tr>
</tbody>
</table>
<p>当使用组合动画时，既有同时执行，又有顺序执行时，可以通过&lt;set&gt;标签的嵌套来实现。<br>在AnimatorSet内部中定义了一个Builder类，下面几个方法的返回类型都是该Builder类，这样我们在使用这几个方法设定多个动画播放顺序的时候，可以直接通过链式的方式，简化代码，这几个比较常用的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * 将现有动画插入到传入的动画之后执行</div><div class="line">    * @param anim</div><div class="line">    * @return</div><div class="line">    */</div><div class="line">   public AnimatorSet.Builder after(Animator anim)</div><div class="line"></div><div class="line">   /**</div><div class="line">    * 将现有动画延迟指定毫秒后执行</div><div class="line">    * @param delay</div><div class="line">    * @return</div><div class="line">    */</div><div class="line">   public AnimatorSet.Builder after(long delay)</div><div class="line"></div><div class="line">   /**</div><div class="line">    * 将现有动画插入到传入的动画之前执行</div><div class="line">    * @param anim</div><div class="line">    * @return</div><div class="line">    */</div><div class="line">   public AnimatorSet.Builder before(Animator anim)</div><div class="line"></div><div class="line">   /**</div><div class="line">    * 将现有动画和传入的动画同时执行</div><div class="line">    * @param anim</div><div class="line">    * @return</div><div class="line">    */</div><div class="line">   public AnimatorSet.Builder with(Animator anim)</div></pre></td></tr></table></figure></p>
<h3 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h3><p>属性动画也提供了一下监听器Listener，实现对属性动画状态的监测，通过回调方法实现业务逻辑。在Animator类中定义了两个接口，分别是AnimatorListener和AnimatorPauseListener，使用时通过addListener()和addPauseListener()进行监听器的添加。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">valueAnimator.addListener(new Animator.AnimatorListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationStart(Animator animation) &#123;</div><div class="line">                //动画开始时调用</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onAnimationEnd(Animator animation) &#123;</div><div class="line">                //动画结束时调用</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onAnimationCancel(Animator animation) &#123;</div><div class="line">                //动画被取消时调用</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onAnimationRepeat(Animator animation) &#123;</div><div class="line">                //动画重复执行时调用</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>由于Animator是ValueAnimator的父类，ObjectAnimator又继承ValueAnimator，因此ValueAnimator和ObjectAnimator都可以对这两个监听器进行添加。注意的是AnimatorPauseListener需要API Level 19。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">valueAnimator.addPauseListener(new Animator.AnimatorPauseListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationPause(Animator animation) &#123;</div><div class="line">                //动画暂停时调用</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onAnimationResume(Animator animation) &#123;</div><div class="line">                //动画恢复时调用</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>系统提供了AnimatorListenerAdapter抽象类实现了这两个接口，这样只需要重写需要的方法，而不必每个方法都重写了。在ValueAnimator中还添加接口AnimatorUpdateListener，可以实现对动画更新操作的监听。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationUpdate(ValueAnimator animation) &#123;</div><div class="line">                // 动画更新时调用</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<h3 id="ViewPropertyAnimator"><a href="#ViewPropertyAnimator" class="headerlink" title="ViewPropertyAnimator"></a>ViewPropertyAnimator</h3><blockquote>
<p>在API17(Android3.1)中引入，属性动画的机制已经不是再针对于View而进行设计的了，而是一种不断地对值进行操作的机制，它可以将值赋值到指定对象的指定属性上。但是，在绝大多数情况下，我相信大家主要都还是对View进行动画操作的。Android开发团队也是意识到了这一点，没有为View的动画操作提供一种更加便捷的用法确实是有点太不人性化了，于是在Android 3.1系统当中补充了ViewPropertyAnimator这个机制。</p>
<ol>
<li>整个ViewPropertyAnimator的功能都是建立在View类新增的animate()方法之上的，这个方法会创建并返回一个ViewPropertyAnimator的实例，之后的调用的所有方法，设置的所有属性都是通过这个实例完成的。</li>
<li>大家注意到，在使用ViewPropertyAnimator时，我们自始至终没有调用过start()方法，这是因为新的接口中使用了隐式启动动画的功能，只要我们将动画定义完成之后，动画就会自动启动。并且这个机制对于组合动画也同样有效，只要我们不断地连缀新的方法，那么动画就不会立刻执行，等到所有在ViewPropertyAnimator上设置的方法都执行完毕后，动画就会自动启动。当然如果不想使用这一默认机制的话，我们也可以显式地调用start()方法来启动动画。</li>
<li>ViewPropertyAnimator的所有接口都是使用连缀的语法来设计的，每个方法的返回值都是它自身的实例，因此调用完一个方法之后可以直接连缀调用它的另一个方法，这样把所有的功能都串接起来，我们甚至可以仅通过一行代码就完成任意复杂度的动画功能。</li>
</ol>
</blockquote>
<h3 id="TypeEvaluator-估值器"><a href="#TypeEvaluator-估值器" class="headerlink" title="TypeEvaluator(估值器)"></a>TypeEvaluator(估值器)</h3><blockquote>
<p>简单来说，就是告诉动画系统如何从初始值过度到结束值。与Interpolator区别是，Interpolator主要是用来控制动画的播放速率。</p>
</blockquote>
<p>在TypeEvaluator接口中定义了:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public T evaluate(float fraction, T startValue, T endValue);</div></pre></td></tr></table></figure></p>
<p>evaluate()方法当中传入了三个参数，第一个参数fraction用于表示动画的完成度，我们应该根据它来计算当前动画的值应该是多少，第二第三个参数分别表示动画的初始值和结束值。系统提供了7个实现类方便我们使用，分别是ArgbEvaluator、FloatArrayEvaluator、FloatEvaluator、IntArrayEvaluator、IntEvaluator、PointFEvaluator和RectEvaluator。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://developer.android.com/guide/topics/graphics/prop-animation.html" target="_blank" rel="external">Property Animation</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/43536355" target="_blank" rel="external">Android属性动画完全解析(上)，初识属性动画的基本用法</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/43816093" target="_blank" rel="external">Android属性动画完全解析(中)，ValueAnimator和ObjectAnimator的高级用法</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/44171115" target="_blank" rel="external">Android属性动画完全解析(下)，Interpolator和ViewPropertyAnimator的用法</a></p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/Android进阶-2016-05-20-分析Android中的Property-Animation.html">http://www.sguotao.com/Android进阶-2016-05-20-分析Android中的Property-Animation.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android的动画可以大体分为两类，分别是传统动画和Android3.0之后出现的属性动画(Property Animation)，关于传统动画的介绍在此前的两篇笔记中，进行了整理。&lt;br&gt;&lt;a href=&quot;/Android进阶-2016-05-18-android-vi
    
    </summary>
    
      <category term="Android进阶" scheme="http://www.sguotao.com/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android" scheme="http://www.sguotao.com/tags/Android/"/>
    
      <category term="动画" scheme="http://www.sguotao.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="代码库" scheme="http://www.sguotao.com/tags/%E4%BB%A3%E7%A0%81%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>【RN笔记】ReactNative样式整理</title>
    <link href="http://www.sguotao.com/ReactNative-2017-04-25-rn-css.html"/>
    <id>http://www.sguotao.com/ReactNative-2017-04-25-rn-css.html</id>
    <published>2017-03-24T02:27:04.000Z</published>
    <updated>2017-07-13T10:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>ReactNative的样式是CSS样式的一个子集，并且属性名称与CSS中规定的也不完全相同。</p>
<h2 id="引入样式的几种方法"><a href="#引入样式的几种方法" class="headerlink" title="引入样式的几种方法"></a>引入样式的几种方法</h2><p>常见的引用样式的几种方法，包括内嵌方式，外联方式和混合方式，还可以把样式定义在单独的文件中，通过import引用。</p>
<h3 id="1-内嵌方式"><a href="#1-内嵌方式" class="headerlink" title="1. 内嵌方式"></a>1. 内嵌方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">export default class appProject extends Component &#123;</div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;View style=&#123;</div><div class="line">                &#123;</div><div class="line">                marginTop:200,</div><div class="line">                marginLeft:5,</div><div class="line">                marginRight:5,</div><div class="line">                height:84,</div><div class="line">                flexDirection:&apos;row&apos;,</div><div class="line">                backgroundColor:&apos;#FF0067&apos;,</div><div class="line">                &#125;</div><div class="line">                &#125;&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-外联方式"><a href="#2-外联方式" class="headerlink" title="2. 外联方式"></a>2. 外联方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const Styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        marginTop:200,</div><div class="line">        marginLeft:5,</div><div class="line">        marginRight:5,</div><div class="line">        height:84,</div><div class="line">        flexDirection:&apos;row&apos;,</div><div class="line">        backgroundColor:&apos;#FF0067&apos;,</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="3-混合方式"><a href="#3-混合方式" class="headerlink" title="3. 混合方式"></a>3. 混合方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">export default class appProject extends Component &#123;</div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            //外层容器</div><div class="line">            &lt;View style=&#123;[Styles.container,Styles.bg,&#123;color:&apos;red&apos;&#125;]&#125;&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-import引用"><a href="#4-import引用" class="headerlink" title="4.import引用"></a>4.import引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">import React from &apos;react&apos;</div><div class="line">import &#123;</div><div class="line">    StyleSheet,</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        marginTop:200,</div><div class="line">        marginLeft:5,</div><div class="line">        marginRight:5,</div><div class="line">        height:84,</div><div class="line">        flexDirection:&apos;row&apos;,</div><div class="line">    &#125;,</div><div class="line">    bg:&#123;</div><div class="line">        backgroundColor:&apos;#FF0067&apos;,</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">module.exports = styles;</div></pre></td></tr></table></figure>
<p>通过import进行引入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import styles from &apos;./styles/style&apos;;</div></pre></td></tr></table></figure></p>
<h2 id="常见的属性及说明"><a href="#常见的属性及说明" class="headerlink" title="常见的属性及说明"></a>常见的属性及说明</h2><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h3><table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">取值</th>
<th style="text-align:center">对应css属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">backgroundColor</td>
<td style="text-align:center">color</td>
<td style="text-align:center">对应 CSS 中的 background-color 属性</td>
</tr>
</tbody>
</table>
<h3 id="2-宽高尺寸"><a href="#2-宽高尺寸" class="headerlink" title="2.宽高尺寸"></a>2.宽高尺寸</h3><table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">取值</th>
<th style="text-align:center">对应css属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">width</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 width 属性</td>
</tr>
<tr>
<td style="text-align:center">height</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 height 属性</td>
</tr>
</tbody>
</table>
<h3 id="3-外边距相关-margin"><a href="#3-外边距相关-margin" class="headerlink" title="3.外边距相关(margin)"></a>3.外边距相关(margin)</h3><table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">取值</th>
<th style="text-align:center">对应css属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">margin</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 margin 属性，不同的是，只能定义一个参数，用以表示上、右、下、左4个方位的外补白</td>
</tr>
<tr>
<td style="text-align:center">marginHorizontal</td>
<td style="text-align:center">number</td>
<td style="text-align:center">CSS中没有对应的属性，相当于同时设置marginRight和marginLeft</td>
</tr>
<tr>
<td style="text-align:center">marginVertical</td>
<td style="text-align:center">number</td>
<td style="text-align:center">CSS中没有对应的属性，相当于同时设置marginTop和marginBottom</td>
</tr>
<tr>
<td style="text-align:center">marginTop</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 margin-top 属性</td>
</tr>
<tr>
<td style="text-align:center">marginRight</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 margin-right 属性</td>
</tr>
<tr>
<td style="text-align:center">marginBottom</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 margin-bottom 属性</td>
</tr>
<tr>
<td style="text-align:center">marginLeft</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 margin-left 属性</td>
</tr>
</tbody>
</table>
<h3 id="4-内边距相关-padding"><a href="#4-内边距相关-padding" class="headerlink" title="4.内边距相关(padding)"></a>4.内边距相关(padding)</h3><table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">取值</th>
<th style="text-align:center">对应css属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">padding</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 padding 属性，不同的是，只能定义一个参数，用以表示上、右、下、左4个方位的内补白</td>
</tr>
<tr>
<td style="text-align:center">paddingHorizontal</td>
<td style="text-align:center">number</td>
<td style="text-align:center">CSS中没有对应的属性，相当于同时设置paddingRight和paddingLeft</td>
</tr>
<tr>
<td style="text-align:center">paddingVertical</td>
<td style="text-align:center">number</td>
<td style="text-align:center">CSS中没有对应的属性，相当于同时设置paddingTop和paddingBottom</td>
</tr>
<tr>
<td style="text-align:center">paddingTop</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 padding-top 属性</td>
</tr>
<tr>
<td style="text-align:center">paddingRight</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 padding-right 属性</td>
</tr>
<tr>
<td style="text-align:center">paddingBottom</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 padding-bottom 属性</td>
</tr>
<tr>
<td style="text-align:center">paddingLeft</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 padding-left 属性</td>
</tr>
</tbody>
</table>
<h3 id="5-边框相关-border"><a href="#5-边框相关-border" class="headerlink" title="5.边框相关(border)"></a>5.边框相关(border)</h3><table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">取值</th>
<th style="text-align:center">对应css属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">borderStyle</td>
<td style="text-align:center">solid, dotted, dashed</td>
<td style="text-align:center">对应 CSS 中的 border-style 属性，但阉割了 none, hidden, double, groove, ridge, inset, outset 取值，且无方向分拆属性</td>
</tr>
<tr>
<td style="text-align:center">borderWidth</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 border-width 属性</td>
</tr>
<tr>
<td style="text-align:center">borderTopWidth</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 border-top-width 属性</td>
</tr>
<tr>
<td style="text-align:center">borderRightWidth</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 border-right-width 属性</td>
</tr>
<tr>
<td style="text-align:center">borderBottomWidth</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 border-bottom-width 属性</td>
</tr>
<tr>
<td style="text-align:center">borderLeftWidth</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 border-left-width 属性</td>
</tr>
<tr>
<td style="text-align:center">borderColor</td>
<td style="text-align:center">color</td>
<td style="text-align:center">对应 CSS 中的 border-color 属性</td>
</tr>
<tr>
<td style="text-align:center">borderTopColor</td>
<td style="text-align:center">color</td>
<td style="text-align:center">对应 CSS 中的 border-top-color 属性</td>
</tr>
<tr>
<td style="text-align:center">borderRightColor</td>
<td style="text-align:center">color</td>
<td style="text-align:center">对应 CSS 中的 border-right-color 属性</td>
</tr>
<tr>
<td style="text-align:center">borderBottomColor</td>
<td style="text-align:center">color</td>
<td style="text-align:center">对应 CSS 中的 border-bottom-color 属性</td>
</tr>
<tr>
<td style="text-align:center">borderLeftColor</td>
<td style="text-align:center">color</td>
<td style="text-align:center">对应 CSS 中的 border-left-color 属性</td>
</tr>
<tr>
<td style="text-align:center">borderRadius</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 border-radius 属性</td>
</tr>
<tr>
<td style="text-align:center">borderTopLeftRadius</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 border-top-left-radius 属性</td>
</tr>
<tr>
<td style="text-align:center">borderTopRightRadius</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 border-top-right-radius 属性</td>
</tr>
<tr>
<td style="text-align:center">borderBottomLeftRadius</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 border-bottom-left-radius 属性</td>
</tr>
<tr>
<td style="text-align:center">borderBottomRightRadius</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 border-bottom-right-radius 属性</td>
</tr>
</tbody>
</table>
<h3 id="6-位置相关-position"><a href="#6-位置相关-position" class="headerlink" title="6.位置相关(position)"></a>6.位置相关(position)</h3><table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">取值</th>
<th style="text-align:center">对应css属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">position</td>
<td style="text-align:center">absolute, relative</td>
<td style="text-align:center">对应 CSS 中的 position 属性，但阉割了 static, fixed 取值</td>
</tr>
<tr>
<td style="text-align:center">top</td>
<td style="text-align:center">number&gt;</td>
<td style="text-align:center">对应 CSS 中的 top 属性</td>
</tr>
<tr>
<td style="text-align:center">right</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 right 属性</td>
</tr>
<tr>
<td style="text-align:center">bottom</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 bottom 属性</td>
</tr>
<tr>
<td style="text-align:center">left</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 left 属性</td>
</tr>
</tbody>
</table>
<h3 id="7-文本相关-Text"><a href="#7-文本相关-Text" class="headerlink" title="7.文本相关(Text)"></a>7.文本相关(Text)</h3><table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">取值</th>
<th style="text-align:center">对应css属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">color</td>
<td style="text-align:center">color</td>
<td style="text-align:center">对应 CSS 中的 color 属性</td>
</tr>
<tr>
<td style="text-align:center">fontFamily</td>
<td style="text-align:center">string</td>
<td style="text-align:center">对应 CSS 中的 font-family 属性</td>
</tr>
<tr>
<td style="text-align:center">fontSize</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 font-size 属性</td>
</tr>
<tr>
<td style="text-align:center">fontStyle</td>
<td style="text-align:center">normal, italic</td>
<td style="text-align:center">对应 CSS 中的 font-style 属性，但阉割了 oblique 取值</td>
</tr>
<tr>
<td style="text-align:center">fontWeight</td>
<td style="text-align:center">normal, bold 100~900</td>
<td style="text-align:center">对应 CSS 中的 font-weight 属性，但阉割了 bolder, lighter 取值</td>
</tr>
<tr>
<td style="text-align:center">lineHeight</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 line-height 属性</td>
</tr>
<tr>
<td style="text-align:center">textAlign</td>
<td style="text-align:center">auto, left, right, center, justifyiOS</td>
<td style="text-align:center">对应 CSS 中的 text-align 属性，增加了 auto 取值</td>
</tr>
<tr>
<td style="text-align:center">textAlignVertical<sup>Android</sup></td>
<td style="text-align:center">auto, top, bottom, center</td>
<td style="text-align:center">对应 CSS 中的 vertical-align 属性，增加了 auto 取值，center 取代了 middle，并阉割了 baseline, sub 等值</td>
</tr>
<tr>
<td style="text-align:center">textShadowColor</td>
<td style="text-align:center">color</td>
<td style="text-align:center">对应 CSS 中的 text-shadow 属性中的颜色定义</td>
</tr>
<tr>
<td style="text-align:center">textShadowOffset</td>
<td style="text-align:center">{width: number, height: number}</td>
<td style="text-align:center">对应 CSS 中的 text-shadow 属性中的阴影偏移定义</td>
</tr>
<tr>
<td style="text-align:center">textShadowRadius</td>
<td style="text-align:center">number</td>
<td style="text-align:center">在 CSS 中，阴影的圆角大小取决于元素的圆角定义，不需要额外定义</td>
</tr>
<tr>
<td style="text-align:center">letterSpacing<sup>iOS</sup></td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 letter-spacing 属性，但取值不同</td>
</tr>
<tr>
<td style="text-align:center">textDecorationColor<sup>iOS</sup></td>
<td style="text-align:center">color</td>
<td style="text-align:center">对应 CSS 中的 text-decoration-color 属性</td>
</tr>
<tr>
<td style="text-align:center">textDecorationLine<sup>iOS</sup></td>
<td style="text-align:center">none, underline, line-through, underline line-through</td>
<td style="text-align:center">对应 CSS 中的 text-decoration-line 属性，但阉割了 overline, blink 取值</td>
</tr>
<tr>
<td style="text-align:center">textDecorationStyle<sup>iOS</sup></td>
<td style="text-align:center">solid, double, dotted, dashed</td>
<td style="text-align:center">对应 CSS 中的 text-decoration-style 属性，但阉割了 wavy 取值</td>
</tr>
<tr>
<td style="text-align:center">writingDirection<sup>iOS</sup></td>
<td style="text-align:center">auto, ltr, rtl</td>
<td style="text-align:center">对应 CSS 中的 direction 属性，增加了 auto 取值</td>
</tr>
</tbody>
</table>
<h3 id="8-弹性布局相关-Flex"><a href="#8-弹性布局相关-Flex" class="headerlink" title="8.弹性布局相关(Flex)"></a>8.弹性布局相关(Flex)</h3><table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">取值</th>
<th style="text-align:center">对应css属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">flex</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 flex 属性</td>
</tr>
<tr>
<td style="text-align:center">flexDirection</td>
<td style="text-align:center">row, column</td>
<td style="text-align:center">对应 CSS 中的 flex-direction 属性，但阉割了 row-reverse, column-reverse 取值</td>
</tr>
<tr>
<td style="text-align:center">flexWrap</td>
<td style="text-align:center">wrap, nowrap</td>
<td style="text-align:center">对应 CSS 中的 flex-wrap 属性，但阉割了 wrap-reverse 取值</td>
</tr>
<tr>
<td style="text-align:center">justifyContent</td>
<td style="text-align:center">flex-start, flex-end, center, space-between, space-around</td>
<td style="text-align:center">对应 CSS 中的 justify-content 属性，但阉割了 stretch 取值。</td>
</tr>
<tr>
<td style="text-align:center">alignItems</td>
<td style="text-align:center">flex-start, flex-end, center, stretch</td>
<td style="text-align:center">对应 CSS 中的 align-items 属性，但阉割了 baseline 取值。</td>
</tr>
<tr>
<td style="text-align:center">alignSelf</td>
<td style="text-align:center">auto, flex-start, flex-end, center, stretch</td>
<td style="text-align:center">对应 CSS 中的 align-self 属性，但阉割了 baseline 取值</td>
</tr>
</tbody>
</table>
<h3 id="9-转换相关-transform"><a href="#9-转换相关-transform" class="headerlink" title="9.转换相关(transform)"></a>9.转换相关(transform)</h3><table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">取值</th>
<th style="text-align:center">对应css属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">transform</td>
<td style="text-align:center">[{perspective: number}, {rotate: string}, {rotateX: string}, {rotateY: string}, {rotateZ: string}, {scale: number}, {scaleX: number}, {scaleY: number}, {translateX: number}, {translateY: number}, {skewX: string}, {skewY: string}]</td>
<td style="text-align:center">对应 CSS 中的 transform 属性</td>
</tr>
<tr>
<td style="text-align:center">transformMatrix</td>
<td style="text-align:center">TransformMatrixPropType</td>
<td style="text-align:center">类似于 CSS 中 transform 属性的 matrix() 和 matrix3d() 函数</td>
</tr>
<tr>
<td style="text-align:center">backfaceVisibility</td>
<td style="text-align:center">visible, hidden</td>
<td style="text-align:center">对应 CSS 中的 backface-visibility 属性</td>
</tr>
</tbody>
</table>
<h3 id="10-图片相关"><a href="#10-图片相关" class="headerlink" title="10.图片相关"></a>10.图片相关</h3><table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">取值</th>
<th style="text-align:center">对应css属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">resizeMode</td>
<td style="text-align:center">cover, contain, stretch</td>
<td style="text-align:center">contain是指无论如何图片都包含在指定区域内，假设设置的宽度高度比图片大，则图片居中显示，否则，图片等比缩小显示</td>
</tr>
<tr>
<td style="text-align:center">overflow</td>
<td style="text-align:center">visible, hidden</td>
<td style="text-align:center">超出部分是否显示，hidden为隐藏</td>
</tr>
<tr>
<td style="text-align:center">tintColor</td>
<td style="text-align:center">number</td>
<td style="text-align:center">着色，rgb字符串类型</td>
</tr>
<tr>
<td style="text-align:center">opacity</td>
<td style="text-align:center">number</td>
<td style="text-align:center">透明度</td>
</tr>
</tbody>
</table>
<h3 id="11-图像变换"><a href="#11-图像变换" class="headerlink" title="11.图像变换"></a>11.图像变换</h3><table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">取值</th>
<th style="text-align:center">对应css属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">rotation</td>
<td style="text-align:center">–</td>
<td style="text-align:center">旋转</td>
</tr>
<tr>
<td style="text-align:center">scaleX</td>
<td style="text-align:center">–</td>
<td style="text-align:center">水平方向缩放</td>
</tr>
<tr>
<td style="text-align:center">scaleY</td>
<td style="text-align:center">–</td>
<td style="text-align:center">垂直方向缩放</td>
</tr>
<tr>
<td style="text-align:center">translateX</td>
<td style="text-align:center">–</td>
<td style="text-align:center">水平方向平移</td>
</tr>
<tr>
<td style="text-align:center">translateY</td>
<td style="text-align:center">–</td>
<td style="text-align:center">水平方向平移</td>
</tr>
</tbody>
</table>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/ReactNative-2017-04-25-rn-css.html">http://www.sguotao.com/ReactNative-2017-04-25-rn-css.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ReactNative的样式是CSS样式的一个子集，并且属性名称与CSS中规定的也不完全相同。&lt;/p&gt;
&lt;h2 id=&quot;引入样式的几种方法&quot;&gt;&lt;a href=&quot;#引入样式的几种方法&quot; class=&quot;headerlink&quot; title=&quot;引入样式的几种方法&quot;&gt;&lt;/a&gt;引入样式
    
    </summary>
    
      <category term="ReactNative" scheme="http://www.sguotao.com/categories/ReactNative/"/>
    
    
      <category term="ReactNative" scheme="http://www.sguotao.com/tags/ReactNative/"/>
    
      <category term="CSS" scheme="http://www.sguotao.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>分析Android中的内存泄露</title>
    <link href="http://www.sguotao.com/Android%E8%BF%9B%E9%98%B6-2017-03-24-%E5%88%86%E6%9E%90Android%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2.html"/>
    <id>http://www.sguotao.com/Android进阶-2017-03-24-分析Android中的内存泄露.html</id>
    <published>2017-03-24T02:27:04.000Z</published>
    <updated>2017-07-11T12:55:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内存泄露与内存溢出"><a href="#内存泄露与内存溢出" class="headerlink" title="内存泄露与内存溢出"></a>内存泄露与内存溢出</h2><h3 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h3><p>内存泄露(Memory Leak)是指无用对象（不再使用的对象）持续占有内存，或者无用对象的内存得不到及时释放，从而造成内存空间得不到有效的利用。在Java中，内存泄露的原因，通常是长生命周期的对象，持有短生命周期对象的引用。在《深入理解Java虚拟机》中的解释是，当无用对象一直被有用对象引用，导致无用对象可达，JVM无法对无用对象完成回收。从而造成内存泄露。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170327149058275225194.png" alt="内存泄露"></p>
<h3 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h3><p>内存溢出(Out of Memory)是指程序在运行过程中，无法申请到足够的的内存导致的一种错误。内存泄露是会导致内存溢出，但不是导致内存溢出的唯一原因。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170327149058290012605.png" alt="20170327149058290012605.png"></p>
<h2 id="Java中的内存泄露"><a href="#Java中的内存泄露" class="headerlink" title="Java中的内存泄露"></a>Java中的内存泄露</h2><h3 id="Java-内存分配"><a href="#Java-内存分配" class="headerlink" title="Java 内存分配"></a>Java 内存分配</h3><p>Java中的内存分配主要分三块，静态存储区，栈区和堆区。</p>
<ul>
<li>静态存储区，编译时分配，存在于程序的整个运行期间，主要用于存放静态数据和常量。</li>
<li>栈区，在方法执行时，用于存放方法内部的局部变量，方法结束后，内存释放。</li>
<li>堆区，通常用来存放new出来的对象，由JVM进行回收处理。</li>
</ul>
<h3 id="四种引用类型"><a href="#四种引用类型" class="headerlink" title="四种引用类型"></a>四种引用类型</h3><p><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170329149077275371348.png" alt="20170329149077275371348.png"><br>从JDK1.2开始，Java将对象的引用分为了强引用、软引用、弱引用和虚引用。</p>
<ul>
<li>强引用(Strong Reference),平时使用最多的一种引用，<strong>如果一个对象的引用方式是强引用，垃圾回收器不会对该对象进行回收，即使出现了内存空间不足的情况，JVM会抛出Out of Memory,也不会对强引用的对象进行回收。</strong></li>
<li>软引用(Soft Reference),在对象的引用强度上若于强引用，对于弱引用的对象，<strong>当内存不足时，JVM会回收软引用对象，释放内存空间</strong>。通常情况下，缓存的创建，适合使用软引用的方式。</li>
<li>弱引用(Weak Reference),在对象的引用强度上，弱于软引用，相对于强引用对象的不可回收，弱引用的对象，不存在这种情况，<strong>在垃圾回收器工作时，不论内存空间是否充足，都会对弱引用的对象进行回收。</strong>弱引用的作用，主要在于解决强引用对象之前的耦合关系，如在集合类中，任何Java对象都可以作为键来使用，当一个键值对被放入到集合中，集合对象本身就对这些键和值产生引用，如果是强引用，只要集合对象本身存在，其中包含的键和值就不会被回收，当集合包含的键和值越来越多时，最后会消耗掉JVM中的全部内存。</li>
<li>虚引用(Phantom Reference)，使用的情况并不多见，主要用来实现比较清晰的内存控制，这对于内存有限的移动设备是很有意义的。<strong>虚引用用来跟踪对象被垃圾回收器回收的活动</strong>，虚引用和软引用，弱引用的一个明显的区别是，虚引用必须和引用队列联合使用，通过检查引用队列中的内容，可以判断一个对象是否即将被回收。</li>
</ul>
<p>一个对象的引用类型有多个，怎么判断？<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170329149077630884381.png" alt="20170329149077630884381.png"><br>判定规则如下：</p>
<ul>
<li>单条引用链上的可达性，以最弱的一个引用类型来决定；</li>
<li>多条引用链上的可达性，以最强的一个引用类型来决定；</li>
</ul>
<p>我们假设上图中，1和3为强引用，5为软引用，7为弱引用。对于对象5的引用类型，在路径1–5中，5为软引用类型，依据规则1，对象5为软引用类型。在路径3–7中，7为弱引用类型，所以对象5为弱引用类型。依据规则2，多条引用链上的可达性，以最强的一个引用类型决定，因此，对象5的引用类型为软引用类型。</p>
<h2 id="内存泄露检测工具"><a href="#内存泄露检测工具" class="headerlink" title="内存泄露检测工具"></a>内存泄露检测工具</h2><h3 id="Monitors"><a href="#Monitors" class="headerlink" title="Monitors"></a>Monitors</h3><p>Memory Monitors是AndroidStudio自带的一个性能检测工具，主要包含以下几个功能：</p>
<ul>
<li>实时查看app的内存使用情况；</li>
<li>能够比较直观的了解到app的运行卡顿是否跟GC的频繁操作有关；</li>
<li>能够了解到app的crash是否跟内存溢出有关；</li>
<li>能够发现内存抖动(在短时间内分配大量内存，频繁的引起GC操作)</li>
</ul>
<p><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170401149101636441749.png" alt="20170401149101636441749.png"></p>
<h3 id="DDMS-Dump"><a href="#DDMS-Dump" class="headerlink" title="DDMS Dump"></a>DDMS Dump</h3><p><img src="http://7u2np3.com1.z0.glb.clouddn.com/2017040114910150822979.png" alt="2017040114910150822979.png"><br><strong>什么是Java Heap Dump？</strong>首先需要搞明白什么是Java Heap，Java Heap是分配给实例类和数组对象运行数据区，所有Java线程在运行期间共享heap中的数据，Java Heap Dump相当于在应用运行时，某个时间点进行一次快照，在AndroidStudio中，快照会被保存为.hprof类型的文件，保存在captures目录中。</p>
<p>分析.hprof文件，我们可以将.hprof视图分成A、B、C三个部分，在A部分中，可以看到app的整个堆内存信息，显示了在堆内存中的所有的java类。</p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Total Count</td>
<td style="text-align:center">内存中，当前Java类的实例数量</td>
</tr>
<tr>
<td style="text-align:center">Heap Count</td>
<td style="text-align:center">堆内存中，当前Java类的实例数量</td>
</tr>
<tr>
<td style="text-align:center">Size of</td>
<td style="text-align:center">当前Java类每个实例对象需要占用内存的物理大小</td>
</tr>
<tr>
<td style="text-align:center">Shallow Size</td>
<td style="text-align:center">当前Java实例对象占有的内存大小</td>
</tr>
<tr>
<td style="text-align:center">Retained Size</td>
<td style="text-align:center">释放当前Java实例对象后，节省的内存大小</td>
</tr>
</tbody>
</table>
<p>当选中A区域中的某个Java类，可以在B区域中看到选中Java类的所有实例对象。</p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Depth</td>
<td style="text-align:center">当前对象的深度</td>
</tr>
<tr>
<td style="text-align:center">Shallow Size</td>
<td style="text-align:center">当前对象占有的内存大小</td>
</tr>
<tr>
<td style="text-align:center">Dominating Size</td>
<td style="text-align:center">当前对象可支配的内存大小</td>
</tr>
</tbody>
</table>
<p>在B中看到选中Java类的所有实例对象的同时，在C区域能够看到哪些对象引用了该对象。</p>
<p><strong>什么是Allocation Tracker？</strong>Allocation Tracker主要用来追踪内存分配信息，Start Allocation Tracking 相当于在程序运行时，某个时间节点，对内存分配信息进行一次快照，生成的快照文件被保存为.alloc类型，保存在captures目录中。Allocation Tracker 也可以在Devices Monitor中启动，在Devices Monitor中使用时，需要设备有Root权限。</p>
<h3 id="MAT"><a href="#MAT" class="headerlink" title="MAT"></a>MAT</h3><p>MAT(Eclipse Memory Analyzer)是一个堆转储文件分析工具，在Monitor的快照文件(.hprof)，需要转换成MAT可以打开的标准.hprof文件，使用Mat工具打开转换后的.hprof文件，会生成一个内存消耗整体状况的报告，从饼状图中，可以比较直观地看到哪些对象占用了多少的内存空间。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170419149258510813625.png" alt="20170419149258510813625.png"><br>这里介绍一下，MAT给我们提供的几个分析的维度。</p>
<ul>
<li>Histogram，在该视图中可以清晰的看出内存中对象的数量，及所占用内存空间的大小。</li>
<li>Dominator Tree:在该视图中，可以在线程的角度观察到哪些对象占用内存空间。</li>
<li>Top Consumers:从包，对象等角度，显示内存的占用情况，能够比较直观的找出占用内存比较多的对象。</li>
<li>Leak Suspects:分析内存泄露的情况，生成一份报表，给出一些problem的建议。</li>
</ul>
<p>下面介绍一些常用的操作，视图中支持正则表达式筛选，可以过滤出我们比较关心的对象，可以以列表或者树形的结构显示出来，其中：</p>
<ul>
<li>with incoming references:过滤出那些类引用了当前选中的类；</li>
<li>with outcoming references:过滤出当前选中类引用了哪些类；</li>
</ul>
<p><img src="http://7u2np3.com1.z0.glb.clouddn.com/2017042014926559112895.png" alt="2017042014926559112895.png"></p>
<p>垃圾回收器会对虚拟机的内存空间，即堆空间中已经存在的对象进行识别，如果对象正在被引用，那么称其为存活对象，如果对象不在被引用，则为垃圾回收器回收的对象，这部分对象占用的内存空间可以被回收。</p>
<p>在垃圾回收机制中有一组元素被称为根元素集合，它们是一组被虚拟机直接引用的对象。堆空间中的每个对象都是由一个根元素为起点被层层调用的。所以，一个对象如果被一个存活的根元素所引用，就会被认为是存活对象，不能被回收。这时，可以通过分析一个对象到根元素的引用路径来分析该对象为什么不能够被顺利回收。</p>
<p>当选中某个对象，通过Merge Shortest Paths to GC Root的操作，可以显示对象之间的排除了软引用，弱引用和虚引用的引用关系，这样我们看到的就是被选中对象是否还存在强引用，通过分析 ，能够直接找到内存没有释放的原因。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170420149269042589662.png" alt="20170420149269042589662.png"></p>
<h2 id="开发中常见内存泄露的场景"><a href="#开发中常见内存泄露的场景" class="headerlink" title="开发中常见内存泄露的场景"></a>开发中常见内存泄露的场景</h2><h3 id="1-Context对象使用不当；"><a href="#1-Context对象使用不当；" class="headerlink" title="1.Context对象使用不当；"></a>1.Context对象使用不当；</h3><p>在Android中经常使用的单例模式，如果使用不当，会出现内存泄露，泄露的主要原因是因为，单例模式中的静态成员变量的生命周期与应用的生命周期一样长。比较常见的场景是，经常在一些工具类中使用单例模式，如xxManager,xxHelper，xxUtils,这些工具类中需要使用Context,由于Activity是间接继承Context，当Activity退出时，单例对象中持有了它的引用，导致Activity回收失败，从而出现内存泄露。处理方式是使用Application,由于Application的生命周期贯穿整个应用，所以当这些工具类需要使用到Context时，使用getApplication()或者getApplicationContext()。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">    public class Util &#123;</div><div class="line">        private Context mContext;</div><div class="line">        private static Util sInstance;</div><div class="line"></div><div class="line">        private Util(Context context) &#123;</div><div class="line">            this.mContext = context;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public static Util getInstance(Context context) &#123;</div><div class="line">            if (sInstance == null) &#123;</div><div class="line">//                sInstance = new Util(context);</div><div class="line">                sInstance = new Util(context.getApplicationContext());</div><div class="line">            &#125;</div><div class="line">            return sInstance;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="2-内部类使用不当"><a href="#2-内部类使用不当" class="headerlink" title="2.内部类使用不当"></a>2.内部类使用不当</h3><p>当使用非静态的内部类时，如果出现内部类持有外部类的引用，就会出现内存泄露，优化方法，可以使用静态的内部类，这样内部类就不在持有外部类的引用，不会影响GC对于外部类的回收。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class MyActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 静态成员变量</div><div class="line">     */</div><div class="line">    public static InnerClass innerClass = null;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_my);</div><div class="line"></div><div class="line">        innerClass = new InnerClass();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    class InnerClass &#123;</div><div class="line"></div><div class="line">        public void doSomeThing() &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-Handler的异步消息通信"><a href="#3-Handler的异步消息通信" class="headerlink" title="3.Handler的异步消息通信"></a>3.Handler的异步消息通信</h3><p>在使用Handler时出现内存泄露的主要原因是Handler的生命周期与Activity的生命周期不一致，当应用启动时，创建UI主线程Looper对象，Looper实现了简单的消息队列，主线程Looper对象存在整个应用的生命周期中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class HandlerActivity extends Activity &#123;</div><div class="line"></div><div class="line">    private final Handler mHandler = new Handler() &#123;</div><div class="line">        @Override</div><div class="line">        public void handleMessage(Message msg) &#123;</div><div class="line">            // ...</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mHandler.sendMessageDelayed(Message.obtain(), 10*000);</div><div class="line">        finish();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当在Actiivity中使用Handler时，就可能会产生内存泄露，究其根本原因，是我们使用的非静态内部类(或者匿名内部类)默认隐性持有外部类的引用，静态内部类不会持有外部类的引用。在Activity结束时，由于Message是延迟消息，会在主线程的消息队列中，该消息持有Activity中的Handler的引用，Handler默认持有Activity的引用，直至该消息被处理完。此时导致Activity对象无法被回收，就会出现内存泄露。优化方法，可以使用静态内部类继承Handler对象，或者在Activity的onDestory()方法中，调用mHandler.removeCallbacksAndMessages(null);</p>
<h3 id="4-Bitmap使用不当"><a href="#4-Bitmap使用不当" class="headerlink" title="4.Bitmap使用不当"></a>4.Bitmap使用不当</h3><p>使用Bitmap如果回收不及时，也会出现内存泄露。原因在于Bitmap类没有对外创建对象的构造方法，获得Bitmap对象只能通过BitmapFactory中的各种静态方法，生成Bitmap对象是通过JNI调用底层c来实现的。所以，当我们获取一个Bitmap对象时，其对应的内存中包含两部分内容，一部分是Java，一部分是c,Java部分的内存可以通过GC进行回收，但是c部分的内存GC是不会进行自动回收的，所以，我们在使用Bitmap对象时，需要调用recycle()来主动释放c部分的内存。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 判断是否已经回收</div><div class="line">if(bitmap != null &amp;&amp; !bitmap.isRecycled())&#123; </div><div class="line">        // 回收并且置为null</div><div class="line">        bitmap.recycle(); </div><div class="line">        bitmap = null; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-资源性对象没有及时关闭"><a href="#5-资源性对象没有及时关闭" class="headerlink" title="5.资源性对象没有及时关闭"></a>5.资源性对象没有及时关闭</h3><p>当我们使用一些资源性对象时，如果没有做关闭操作，也会出现内存泄露，常见的资源性对象包括(Cursor、ContentProvider、File、Stream)等。还有一类如EventBus、BroadCastReceiver在注册后，为了避免重复注册，需要在退出时及时的销毁。</p>
<h3 id="6-集合列表相关"><a href="#6-集合列表相关" class="headerlink" title="6.集合列表相关"></a>6.集合列表相关</h3><p>集合类如果仅仅有添加元素的方法，而没有相应的删除机制，导致内存被占用。如果这个集合类是全局性的变量 (比如类中的静态属性，全局性的 map 等即有静态引用或 final 一直指向它)，那么没有相应的删除机制，很可能导致集合所占用的内存只增不减。</p>
<h3 id="7-Native中存在内存泄露"><a href="#7-Native中存在内存泄露" class="headerlink" title="7.Native中存在内存泄露"></a>7.Native中存在内存泄露</h3><p>由于Native层的代码多用c或c++来实现，GC无法对这部分内存进行会后处理，这时可能会出现内存泄露，这时候就需要c工程师帮助分析，如Malloc的内存是否做了free处理，指针使用完成后，是否进行了置空处理等等。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol>
<li><a href="http://www.jianshu.com/p/e97ed5d8a403" target="_blank" rel="external">科普：内存泄漏与内存溢出</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/l-JavaMemoryLeak/" target="_blank" rel="external">Java的内存泄漏</a></li>
<li><a href="https://segmentfault.com/a/1190000006852540" target="_blank" rel="external">Android 内存泄露总结</a></li>
<li><a href="https://segmentfault.com/a/1190000003910496" target="_blank" rel="external">Java四种引用类型</a></li>
<li><a href="http://blog.csdn.net/itomge/article/details/48719527" target="_blank" rel="external">MAT使用教程</a></li>
</ol>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/Android进阶-2017-03-24-分析Android中的内存泄露.html">http://www.sguotao.com/Android进阶-2017-03-24-分析Android中的内存泄露.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;内存泄露与内存溢出&quot;&gt;&lt;a href=&quot;#内存泄露与内存溢出&quot; class=&quot;headerlink&quot; title=&quot;内存泄露与内存溢出&quot;&gt;&lt;/a&gt;内存泄露与内存溢出&lt;/h2&gt;&lt;h3 id=&quot;内存泄露&quot;&gt;&lt;a href=&quot;#内存泄露&quot; class=&quot;headerli
    
    </summary>
    
      <category term="Android进阶" scheme="http://www.sguotao.com/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android" scheme="http://www.sguotao.com/tags/Android/"/>
    
      <category term="内存泄露" scheme="http://www.sguotao.com/tags/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    
      <category term="MAT" scheme="http://www.sguotao.com/tags/MAT/"/>
    
  </entry>
  
  <entry>
    <title>分析Android中的动态加载机制</title>
    <link href="http://www.sguotao.com/Android%E8%BF%9B%E9%98%B6-2017-03-17-%E5%88%86%E6%9E%90Android%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6.html"/>
    <id>http://www.sguotao.com/Android进阶-2017-03-17-分析Android中的动态加载机制.html</id>
    <published>2017-03-17T02:27:04.000Z</published>
    <updated>2017-07-13T09:58:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java的类加载机制ClassLoader"><a href="#Java的类加载机制ClassLoader" class="headerlink" title="Java的类加载机制ClassLoader"></a>Java的类加载机制ClassLoader</h2><p>我们编写的java代码，最终会编译成.class字节码的形式，一个完整的Java程序，通常会由若干个.class文件组成，在程序运行时，通过该程序的入口函数来调用系统的各个功能，但是程序启动时，并不会一次性将.class文件加载到内存中，根据程序的需要，通过Java的类加载机制来动态加载.class文件，ClassLoader就是来实现.class文件的动态加载的。</p>
<h2 id="Java中各类加载器的关系"><a href="#Java中各类加载器的关系" class="headerlink" title="Java中各类加载器的关系"></a>Java中各类加载器的关系</h2><p><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170317148974200061820.png" alt="20170317148974200061820.png"><br>Java默认会提供三个类加载器，分别为BootStrapClassLoader,ExtClassLoader和AppClassLoader;</p>
<ul>
<li>BootStrapLoader，启动类加载器，是Java类加载层次中最顶层的类加载器，由c代码编写，负责加载JDK中的核心类库（包括JRE classes目录下的.class文件，libs目录下的jar文件）。可以使用System.getProperty(“sun.boot.class.path”)来显示BootStrapLoader加载的jar和.class文件；</li>
<li>ExtClassLoader,扩展类加载器，负责加载Java的扩展类库，默认加载/jre/lib/ext目录下的所有jar和.class文件。可以通过可以使用System.getProperty(“java.ext.dirs”)来显示ExtClassLoader加载的jar和.class文件；</li>
<li>AppClassLoader,系统类加载器，负责加载classpath目录下所有的jar和class文件。</li>
</ul>
<h2 id="Java类加载的实现过程"><a href="#Java类加载的实现过程" class="headerlink" title="Java类加载的实现过程"></a>Java类加载的实现过程</h2><p><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170317148974217438657.jpg" alt="20170317148974217438657.jpg"></p>
<ul>
<li>执行程序代码，找到JRE所在目录；</li>
<li>找到jvm.dll(Windows)或者libjvm.so(Linux);</li>
<li>启动JVM，并进行初始化工作</li>
<li>创建BootStrapClassLoader;</li>
<li>BootStrapClassLoader会加载ExtClassLoader，并设定ExtClassLoader的parent为BootStrapClassLoader;</li>
<li>BootStrapClassLoader会加载AppClassLoader,并设定AppClassLoader的parent为ExtClassLoader;</li>
</ul>
<p>当AppClassLoader开始加载xxx.class时，类加载器会现将加载的任务交给其parent来完成，如果parent找不到，则自己负责加载。所以在加载xxx.class时的顺序是，BootstrapClassLoader –&gt; ExtClassLoader –&gt; AppClassLoader，如果都找不到，则抛出ClassNotFoundException。这就是非常有名的双亲委托模型。</p>
<p>使用双亲委托模型，有效地解决了.class字节码重复加载的问题，当parent已经加载类某各类的.class字节码时，子类就没有必要再重新进行加载。举个例子，来说明一下双亲委托模型。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170317148974220124844.png" alt="20170317148974220124844.png"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 取得SomeClass的Class实例</div><div class="line">   Class c = Class.forName(&quot;SomeClass&quot;);</div><div class="line">   // 取得ClassLoader</div><div class="line">   ClassLoader loader = c.getClassLoader();</div><div class="line">   System.out.println(loader);</div><div class="line">   // 取得父ClassLoader</div><div class="line">   System.out.println(loader.getParent());</div><div class="line">   // 再取得父ClassLoader</div><div class="line">   System.out.println(loader.getParent().getParent());</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sun.misc.Launcher\$AppClassLoader@19821f</div><div class="line">sun.misc.Launcher\$ExtClassLoader@addbf1</div><div class="line">null</div></pre></td></tr></table></figure>
<p>由于SomeClass是自定义的一个Java类，通常会java.class.path中产生字节码，首先AppClassLoader会将加载的任务交给其parent,ExtClassLaoder,ExtClassLoader将加载任务交给其parent，BootStrapClassLoader,由于BootStrapLoader在其目录(sun.boot.class.path)下没有找到该类的字节码，所以由ExtClassLoader来加载，ExtClassLoader在其目录(java.ext.dirs)也没有发现SomeClass的字节码，交给AppClassLoader进行加载，AppClassLoader在(java.class.path)中找到，并进行加载。</p>
<p>加载SomeClass的ClassLoader是AppClassLoader,其parent是ExtClassLoader,<br>而ExtClassLoader的parent是null，这是因为BootStrapClassLoader是由c代码编写的，在JVM中并没有对应的实例对象，所以显示为null。</p>
<h2 id="Dalvik与JVM"><a href="#Dalvik与JVM" class="headerlink" title="Dalvik与JVM"></a>Dalvik与JVM</h2><p>在Java中，把一些Java类编译成.class文件，通过ClassLoader进行加载，但是在Android上边，情况有所不同，主要的原因在于Android中使用的虚拟机是Dalvik。Android中的Dalvik和Java中的JVM都是将对应的Java类加载到内存中运行。不同的是JVM加载的是.class字节码文件，或是通过defineClass方式产生class，进行加载。Dalvik加载的是.dex文件，.dex文件是Android对.class文件进行了优化，更加适合内存和处理器有限的系统。</p>
<ul>
<li>Dalvik是基于寄存器的，而JVM是基于栈的。</li>
<li>Dalvik运行dex文件，而JVM运行java字节码</li>
<li>自Android 2.2开始，Dalvik支持JIT（just-in-time，即时编译技术）。</li>
</ul>
<p>很长时间以来，Dalvik虚拟机一直被用户指责为拖慢安卓系统运行速度不如IOS的根源。2014年6月25日,Android L 正式亮相于召开的谷歌I/O大会，Android L 改动幅度较大，谷歌将直接删除Dalvik，代替它的是传闻已久的ART。ART,即Android Runtime。ART 的机制与 Dalvik 不同。在Dalvik下，应用每次运行的时候，字节码都需要通过即时编译器（just in time,JIT）转换为机器码，这会拖慢应用的运行效率，而在ART 环境中，应用在第一次安装的时候，字节码就会预先编译成机器码，使其成为真正的本地应用。这个过程叫做预编译（AOT,Ahead-Of-Time)。这样的话，应用的启动(首次)和执行都会变得更加快速。</p>
<h2 id="DexClassLoader与PathClassLoader"><a href="#DexClassLoader与PathClassLoader" class="headerlink" title="DexClassLoader与PathClassLoader"></a>DexClassLoader与PathClassLoader</h2><p>在使用Java虚拟机时，我们经常自定义继承自ClassLoader的类加载器。然后通过defineClass方法来从一个二进制流中加载Class。而在Android中我们无法这么使用，Android中ClassLoader的defineClass方法具体是调用VMClassLoader的defineClass本地静态方法。而这个本地方法什么都没做，只是抛出了一个“UnsupportedOperationException”异常。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(String name, <span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</div><div class="line">        <span class="keyword">throws</span> ClassFormatError</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"can't load this type of class file"</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>既然在Dalvik虚拟机里，ClassLoader不好用，那么Android官方为了解决这个问题，帮我们从ClassLoader中派生出了两个类：DexClassLoader和PathClassLoader。先来看一下DexClassLoader和PahtClassLoader的继承关系。</p>
<p><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170322149015010153287.png" alt="20170322149015010153287.png"></p>
<h3 id="DexClassLoader"><a href="#DexClassLoader" class="headerlink" title="DexClassLoader"></a>DexClassLoader</h3><p>DexClassLoader可以加载jar,apk,dex,可以从SD卡进行加载，可以实现dex的动态加载与更新，DexClassLoader要有一个app私有且可写的目录来存储经过优化的.odex文件。构造函数如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DexClassLoader</span> <span class="keyword">extends</span> <span class="title">BaseDexClassLoader</span> </span>&#123;</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 *</div><div class="line">		 * <span class="doctag">@param</span> dexPath .dex文件路径,多个文件路径使用':'分隔</div><div class="line">		 * <span class="doctag">@param</span> optimizedDirectory .dex文件优化后生成的.odex文件的路径</div><div class="line">		 * <span class="doctag">@param</span> librarySearchPath 动态库路径</div><div class="line">		 * <span class="doctag">@param</span> parent 双亲委派模式,指定父类加载器</div><div class="line">		 */</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">DexClassLoader</span><span class="params">(String dexPath, String optimizedDirectory, String librarySearchPath, ClassLoader parent)</span> </span>&#123;</div><div class="line">			<span class="keyword">super</span>((String)<span class="keyword">null</span>, (File)<span class="keyword">null</span>, (String)<span class="keyword">null</span>, (ClassLoader)<span class="keyword">null</span>);</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Stub!"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="PathClassLoader"><a href="#PathClassLoader" class="headerlink" title="PathClassLoader"></a>PathClassLoader</h3><p>PathClassLoader只能加载已经安装的apk文件。Android系统默认使用的类加载器。构造函数如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathClassLoader</span> <span class="keyword">extends</span> <span class="title">BaseDexClassLoader</span> </span>&#123;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">PathClassLoader</span><span class="params">(String dexPath, ClassLoader parent)</span> </span>&#123;</div><div class="line">			<span class="keyword">super</span>((String)<span class="keyword">null</span>, (File)<span class="keyword">null</span>, (String)<span class="keyword">null</span>, (ClassLoader)<span class="keyword">null</span>);</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Stub!"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">/**</span></div><div class="line">		 *</div><div class="line">		 * <span class="doctag">@param</span> dexPath .dex文件路径</div><div class="line">		 * <span class="doctag">@param</span> librarySearchPath 本地库路径</div><div class="line">		 * <span class="doctag">@param</span> parent 双亲委派模式,指定父类加载器</div><div class="line">		 */</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">PathClassLoader</span><span class="params">(String dexPath, String librarySearchPath, ClassLoader parent)</span> </span>&#123;</div><div class="line">			<span class="keyword">super</span>((String)<span class="keyword">null</span>, (File)<span class="keyword">null</span>, (String)<span class="keyword">null</span>, (ClassLoader)<span class="keyword">null</span>);</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Stub!"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="DexClassLoader与PathClassLoader的比较"><a href="#DexClassLoader与PathClassLoader的比较" class="headerlink" title="DexClassLoader与PathClassLoader的比较"></a>DexClassLoader与PathClassLoader的比较</h3><p>通过两个类加载构造函数的对比发现，区别在于DexClassLoader构造函数中的参数optimizedDirectory。Google官方文档中给出optimizedDirectory的说明是，用来存储经过优化后的.odex文件的路径。optimizedDirectory必须是一个内部存储路径，DexClassLoader可以通过构造函数指定optimizedDirectory，所以DexClassLoader可以实现动态加载，外部的.jar/.dex文件，优化后会存在在optimizedDirectory目录中。PathClassLoader由于没有指定该路径，所以只能加载内部的，已经安装的apk中的.odex文件。</p>
<p><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170322149015373793574.png" alt="20170322149015373793574.png"></p>
<p>整个类加载过程可以简单描述为上面的时序图。ClassLoader在加载过程中，通过loadClass方法，调用BaseDexClassLoader中重载的findClass方法，该方法会遍历DexPathList列表。DexPathList的创建过程如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">BaseDexClassLoader</span><span class="params">(String dexPath, File optimizedDirectory,</span></span></div><div class="line">                              String libraryPath, ClassLoader parent) &#123;</div><div class="line">        <span class="keyword">super</span>(parent);</div><div class="line">        <span class="keyword">this</span>.originalPath = dexPath;</div><div class="line">        <span class="keyword">this</span>.pathList = <span class="keyword">new</span> DexPathList(<span class="keyword">this</span>, dexPath, libraryPath, optimizedDirectory);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>optimizedDirectory用来缓存优化过的.odex文件，在DexClassLoader中可以通过构造函数进行制定，在PathClassLoader中，optimizedDirectory为null，会直接使用系统中已经安装的apk文件的.odex目录。DexPathList完整的创建过程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">DexPathList</span><span class="params">(ClassLoader definingContext, String dexPath,</span></span></div><div class="line">                       String libraryPath, File optimizedDirectory) &#123;</div><div class="line">        ……</div><div class="line">        <span class="keyword">this</span>.dexElements = makeDexElements(splitDexPath(dexPath), optimizedDirectory);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Element[] makeDexElements(ArrayList&lt;File&gt; files,</div><div class="line">                                             File optimizedDirectory) &#123;</div><div class="line">        ArrayList&lt;Element&gt; elements = <span class="keyword">new</span> ArrayList&lt;Element&gt;();</div><div class="line">        <span class="keyword">for</span> (File file : files) &#123;</div><div class="line">            ZipFile zip = <span class="keyword">null</span>;</div><div class="line">            DexFile dex = <span class="keyword">null</span>;</div><div class="line">            String name = file.getName();</div><div class="line">            <span class="keyword">if</span> (name.endsWith(DEX_SUFFIX)) &#123;</div><div class="line">                dex = loadDexFile(file, optimizedDirectory);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.endsWith(APK_SUFFIX) || name.endsWith(JAR_SUFFIX)</div><div class="line">                || name.endsWith(ZIP_SUFFIX)) &#123;</div><div class="line">                zip = <span class="keyword">new</span> ZipFile(file);</div><div class="line">            &#125;</div><div class="line">            ……</div><div class="line">            <span class="keyword">if</span> ((zip != <span class="keyword">null</span>) || (dex != <span class="keyword">null</span>)) &#123;</div><div class="line">                elements.add(<span class="keyword">new</span> Element(file, zip, dex));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> elements.toArray(<span class="keyword">new</span> Element[elements.size()]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> DexFile <span class="title">loadDexFile</span><span class="params">(File file, File optimizedDirectory)</span></span></div><div class="line">        <span class="keyword">throws</span> IOException &#123;</div><div class="line">        <span class="keyword">if</span> (optimizedDirectory == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DexFile(file);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            String optimizedPath = optimizedPathFor(file, optimizedDirectory);</div><div class="line">            <span class="keyword">return</span> DexFile.loadDex(file.getPath(), optimizedPath, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Converts a dex/jar file path and an output directory to an</div><div class="line">     * output file path for an associated optimized dex file.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">optimizedPathFor</span><span class="params">(File path,</span></span></div><div class="line">                                           File optimizedDirectory) &#123;</div><div class="line">        String fileName = path.getName();</div><div class="line">        <span class="keyword">if</span> (!fileName.endsWith(DEX_SUFFIX)) &#123;</div><div class="line">            <span class="keyword">int</span> lastDot = fileName.lastIndexOf(<span class="string">"."</span>);</div><div class="line">            <span class="keyword">if</span> (lastDot &lt; <span class="number">0</span>) &#123;</div><div class="line">                fileName += DEX_SUFFIX;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                StringBuilder sb = <span class="keyword">new</span> StringBuilder(lastDot + <span class="number">4</span>);</div><div class="line">                sb.append(fileName, <span class="number">0</span>, lastDot);</div><div class="line">                sb.append(DEX_SUFFIX);</div><div class="line">                fileName = sb.toString();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        File result = <span class="keyword">new</span> File(optimizedDirectory, fileName);</div><div class="line">        <span class="keyword">return</span> result.getPath();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>1.<a href="http://blog.csdn.net/xyang81/article/details/7292380" target="_blank" rel="external">深入分析Java ClassLoader原理</a><br>2.<a href="http://blog.csdn.net/irelandken/article/details/7048817" target="_blank" rel="external">分析BootstrapClassLoader/ExtClassLoader/AppClassLoader的加载路径 及”父委托机制”</a><br>3.<a href="https://openhome.cc/Gossip/JavaEssence/ClassLoader.html" target="_blank" rel="external">簡介類別載入器</a><br>4.<a href="http://www.infoq.com/cn/articles/android-in-depth-dalvik" target="_blank" rel="external">Java虚拟机Dalvik</a><br>5<a href="http://www.jianshu.com/p/669fc4858194" target="_blank" rel="external">Android动态加载——DexClassloader分析</a></p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/Android进阶-2017-03-17-分析Android中的动态加载机制.html">http://www.sguotao.com/Android进阶-2017-03-17-分析Android中的动态加载机制.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java的类加载机制ClassLoader&quot;&gt;&lt;a href=&quot;#Java的类加载机制ClassLoader&quot; class=&quot;headerlink&quot; title=&quot;Java的类加载机制ClassLoader&quot;&gt;&lt;/a&gt;Java的类加载机制ClassLoader&lt;/
    
    </summary>
    
      <category term="Android进阶" scheme="http://www.sguotao.com/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="插件框架" scheme="http://www.sguotao.com/tags/%E6%8F%92%E4%BB%B6%E6%A1%86%E6%9E%B6/"/>
    
      <category term="ClassLoader" scheme="http://www.sguotao.com/tags/ClassLoader/"/>
    
      <category term="JVM" scheme="http://www.sguotao.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>怎样才能让别人觉得与你合作愉快</title>
    <link href="http://www.sguotao.com/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F-2016-08-17-pleasure-working-with-you.html"/>
    <id>http://www.sguotao.com/生活感悟-2016-08-17-pleasure-working-with-you.html</id>
    <published>2016-08-17T09:00:00.000Z</published>
    <updated>2017-06-02T10:40:05.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>文章作者：咪喵<br>文章来源： TalentGuide </p>
</blockquote>
<p>为什么有的人，明明事情做得不少，却永远没人说他好？有的人，不管做什么都得到周围人众口一词的称赞？</p>
<p>真的是因为两个人做的事差很多吗？也许是。<br>也许，只是一些小习惯改变了他们的口碑。</p>
<h2 id="1-收到请回答"><a href="#1-收到请回答" class="headerlink" title="1. 收到请回答"></a>1. 收到请回答</h2><p>一些人，交给他的事情永远没下文。你不知道他收到了没有，是不是正在做，已经做到了什么进展，啥时候能交付。即使这件事他已经做完了，不去问，他也永远不会告诉你。</p>
<ol>
<li>收到任务，请告诉对方“我收到了。”</li>
<li>需要时间消化，请告诉对方“我看一下，晚点（给出具体时间段更佳）给你答复。”</li>
<li>事情有进展时，及时周知相关人等最新进度。</li>
<li>事情完成时，通知相关方，并感谢在其中给过帮助的人。</li>
</ol>
<p>做到这些，不需要很多时间，却会让与你合作的人感到轻松愉快。</p>
<h2 id="2-要做就别抱怨"><a href="#2-要做就别抱怨" class="headerlink" title="2. 要做就别抱怨"></a>2. 要做就别抱怨</h2><p>有的人，接受任务时永远不情不愿，嘴里没完没了地抱怨，最后虽仍然接下了任务，却留下了难以合作的印象。</p>
<p>如果别人的行为确实给自己带来了麻烦或是有为难之处，可以清晰告知对方自己难做的原因，说清楚希望对方如何改进，并告知这样的改进会给双方带来什么好处。</p>
<p>比如对方总给你扔急活，你为了这个急活不得不加班加点，到处求人。正确的做法是<strong>告诉对方这件事有哪些环节，分别需要多长时间，以后请提早多少天告知，以便更好的完成。这次帮忙加急，下不为例</strong>。这样对方能理解你这次加急赶完是帮了他忙，而不会抱怨每次给你事情都推三阻四还完成得不好。</p>
<h2 id="3-推进事情要推到有进展才算数"><a href="#3-推进事情要推到有进展才算数" class="headerlink" title="3. 推进事情要推到有进展才算数"></a>3. 推进事情要推到有进展才算数</h2><p>有些人，推进一件事的方法是：每隔一段时间，发封不痛不痒的邮件，抄送所有人，摆个样子跟进一下，也不在乎对方是否给了结果。仿佛在说“你看，我推过了，是对方不给做，推不动不关我事哦。出了问题责任是他是他还是他。”</p>
<p>如果是自家孩子病了，有哪位家长会说“我给医生发邮件了，他没回我，所以病治不了了。”显然，孩子生病时家长都是心急火燎的，医生不在会找护士，找主管，找院长，找媒体。用尽一切可用的渠道，一切可用的方法，直到医生给孩子看病为止。</p>
<p>当说一件事情推不动时，扪心自问自己真的做到了像家长为生病的孩子找医生那样努力吗？真的已经用尽了一切可用的力量，找尽了一切可找的人去推动这件事吗？</p>
<p>装模作样推一推是没有意义的，一定要推到这件事有实质进展为止。<strong>实质进展是对方给排期、给解决方案、给具体处理这件事的人</strong>。如果什么都没拿到，那根本不算推进过一件事。</p>
<h2 id="4-做不到早说"><a href="#4-做不到早说" class="headerlink" title="4. 做不到早说"></a>4. 做不到早说</h2><p>有的人，交给他的事情，不问永远没问题，一问全是问题。拖过了截止期做不到，罗列出一堆原因，都是ABCDE的问题，与他无关。</p>
<p>OK，就算ABCDE的问题确实与他无关，为什么不能在发现有这些问题时及时反馈呢？自己解决不了的问题，及时反馈并暴露，让有能力解决的人去解决，是靠谱最重要的表现之一。</p>
<p>又有人说，我要是暴露了这些问题得罪了别人怎么办？请问不暴露这些问题，任由时间资源浪费，事情最终没做到，就谁都不得罪了吗？<strong>作为一个团队，成事是最重要的。暴露问题是为了解决问题，而不是为了挑事，关键是把握分寸</strong>。</p>
<p>还有人说，跟别人没关系，就是堆给我的活太多了，我做不完怎么办？如果是这种情况，更要尽早反馈了。或许你花了大量时间在一件优先级比较低的事情上，导致最重要的事情没有做完。结果把自己累得半死，还谁都不满意。<strong>发现自己做不完，就要第一时间跟相关方确认优先级，力保最重要的事情能够及时完成。如果被插入了其他优先级更高的事，也要尽快知会事情被推迟的相关方</strong>。</p>
<h2 id="5-功劳是大家的"><a href="#5-功劳是大家的" class="headerlink" title="5. 功劳是大家的"></a>5. 功劳是大家的</h2><p>有些人，干活的时候一天八回地狂催别人。活干完了，人没影了，汇报工作成果时只字不提其他人，仿佛活全是他自己一人干的。这样的人，执行力再好，下次再找人干活时，也难得到别人心甘情愿的帮忙。</p>
<p><strong>无论别人是帮了多小的忙，在事情结束后也要表示感谢</strong>。道谢要不嫌隆重，能当面谢的尽量当面去谢，能单独打电话谢的就不要讲其他事情时顺便谢，发邮件表示感谢的话尽量抄送对方老板详细说明感谢的事由。这些事情并不费劲，却会让别人更愿意帮助你。</p>
<h2 id="6-别吐槽，给解决方案"><a href="#6-别吐槽，给解决方案" class="headerlink" title="6. 别吐槽，给解决方案"></a>6. 别吐槽，给解决方案</h2><p>有的人，你一找他解决问题，就开启吐槽模式，内容全是“我有多辛苦多不容易，能做的我都做了，这些问题全是因为balabala……”</p>
<p>每当这时我都好想告诉对方“亲，没有人关心你的心路历程。”我不关心你有多辛苦多不容易你做了多少事情，为什么别人就是没按照你设定的剧本做。我只知道现在有一个问题，我找你只想知道“怎样解决这个问题”。</p>
<p><strong>当有一个问题时，请直奔主题，给解决方案</strong>。</p>
<h2 id="7-敢作敢当"><a href="#7-敢作敢当" class="headerlink" title="7. 敢作敢当"></a>7. 敢作敢当</h2><p>当事情搞砸时，最次的做法是想尽办法推卸责任，最好的做法是<strong>诚恳道歉，评估影响范围，想尽办法用最快速度修正错误，弥补损失</strong>。</p>
<p>不要耍滑头，得意于自己把责任都推出去了，推卸得越成功，实际越失败。不要怕承担，勇于承担责任的人，别人才敢赋予你更大的责任。</p>
<h2 id="8-结语"><a href="#8-结语" class="headerlink" title="8. 结语"></a>8. 结语</h2><p>做到上面这些条，说难不难，说易也不易。说白了，就是要多操些心，多费些力。</p>
<p>有的人说一份工作而已，干嘛把自己搞这么累。我就做好自己这部分，别人的事我不管，跟我没关系，只要出事了别怪我头上就行。当然，若真这么想，没什么不行的，您高兴就好。只是请不要再抱怨为什么自己怀才不遇，升职加薪总是比别人慢。多劳多得，很公平，不是么？</p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/生活感悟-2016-08-17-pleasure-working-with-you.html">http://www.sguotao.com/生活感悟-2016-08-17-pleasure-working-with-you.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;文章作者：咪喵&lt;br&gt;文章来源： TalentGuide &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么有的人，明明事情做得不少，却永远没人说他好？有的人，不管做什么都得到周围人众口一词的称赞？&lt;/p&gt;
&lt;p&gt;真的是因为两个人做的事差很多吗？也
    
    </summary>
    
      <category term="生活感悟" scheme="http://www.sguotao.com/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="生活" scheme="http://www.sguotao.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>分析Android中的自定义View</title>
    <link href="http://www.sguotao.com/Android%E8%BF%9B%E9%98%B6-2016-07-08-%E5%88%86%E6%9E%90Android%E4%B8%AD%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89View.html"/>
    <id>http://www.sguotao.com/Android进阶-2016-07-08-分析Android中的自定义View.html</id>
    <published>2016-07-08T02:27:04.000Z</published>
    <updated>2017-07-13T09:47:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义View的分类"><a href="#自定义View的分类" class="headerlink" title="自定义View的分类"></a>自定义View的分类</h2><ol>
<li><p><strong>继承View重写onDraw()</strong>，这种方法主要用于实现一些不规则的效果，即这种效果不方便通过布局的组合方式来达到，往往需要静态或者动态地显示一些不规则的图形。很显然这需要通过绘制的方式来实现，即重写onDraw方法。采用这种方式需要自己支持wrap_content，并且padding也需要自己处理。</p>
</li>
<li><p><strong>继承ViewGroup派生出特殊的Layout布局</strong>，这种方法主要用于实现自定义的布局，即除了LinearLayout、RelativeLayout、FrameLayout这几种系统的布局之外，我们重新定义一种新布局，当某种效果看起来很像几种View组合在一起的时候，可以采用这种方法来实现。采用这种方式稍微复杂一些，需要合适地处理ViewGroup的测量、布局这两个过程，并同时处理子元素的测量和布局过程。</p>
</li>
<li><p><strong>继承具体的View</strong>，这种方法比较常见，一般是用于扩展某种已有的View的功能，比如TextView，这种方法比较容易实现。这种方法不需要自己支持wrap_content和padding等。</p>
</li>
<li><p><strong>继承具体的ViewGroup</strong>，这种方法也比较常见，当某种效果看起来很像几种View组合在一起的时候，可以采用这种方法来实现。采用这种方法不需要自己处理ViewGroup的测量和布局这两个过程。需要注意这种方法和方法2的区别，一般来说方法2能实现的效果方法4也都能实现，两者的主要差别在于方法2更接近View的底层。</p>
</li>
</ol>
<h2 id="添加自定义属性"><a href="#添加自定义属性" class="headerlink" title="添加自定义属性"></a>添加自定义属性</h2><p><strong>1.在values目录下面创建自定义属性的XML，比如attrs.xml，也可以选择类似于attrs_circle<em>view.xml等这种以attrs</em>开头的文件名。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xmlversion=&quot;1.0&quot;encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;resources&gt;</div><div class="line">    &lt;declare-styleable name=&quot;CircleView&quot;&gt;</div><div class="line">        &lt;attr name=&quot;circle_color&quot; format=&quot;color&quot;/&gt;</div><div class="line">    &lt;/declare-styleable&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure>
<p><strong>2.在View的构造方法中解析自定义属性的值并做相应处理。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public CircleView(Context context, AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">    super(context, attrs, defStyleAttr);</div><div class="line">    TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleView);</div><div class="line">    mColor = a.getColor(styleable.CircleView_circle_color, Color.RED); a.recycle();</div><div class="line">    init();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>3.在布局文件中使用自定义属性</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:background=&quot;#ffffff&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line">    </div><div class="line">    &lt;com.scott.codelibrary.view.CustomView</div><div class="line">        android:id=&quot;@+id/cv&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;100dp&quot; </div><div class="line">        android:layout_margin=&quot;20dp&quot; </div><div class="line">        android:background=&quot;#000000&quot; </div><div class="line">        android:padding=&quot;20dp&quot; </div><div class="line">        app:circle_color=&quot;@color/light_green&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<h2 id="自定义View的注意事项"><a href="#自定义View的注意事项" class="headerlink" title="自定义View的注意事项"></a>自定义View的注意事项</h2><h3 id="让View支持wrap-content"><a href="#让View支持wrap-content" class="headerlink" title="让View支持wrap_content"></a>让View支持wrap_content</h3><p>这是因为直接继承View或者ViewGroup的控件，如果不在onMeasure中对wrap_content做特殊处理，那么当外界在布局中使用wrap_content时就无法达到预期的效果。为什么呢？</p>
<p>如果View在布局中使用wrap_content，那么它的specMode是AT_MOST模式，在这种模式下，它的宽/高等于specSize；这种情况下View的specSize是parentSize，而parentSize是父容器中目前可以使用的大小，也就是父容器当前剩余的空间大小。很显然，View的宽/高就等于父容器当前剩余的空间大小，这种效果和在布局中使用match_parent完全一致。怎么处理呢？直接继承View的自定义控件需要重写onMeasure方法并设置wrap_content时的自身大小。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">        int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">        int widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">        int heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line">        int heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line"></div><div class="line">        if (widthSpecMode == MeasureSpec.AT_MOST &amp;&amp; heightSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class="line">            //给View指定默认的宽mWidth，高mHeight</div><div class="line">            setMeasuredDimension(mWidth, mHeight);</div><div class="line">        &#125; else if (widthSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class="line">            setMeasuredDimension(mWidth, heightSpecSize);</div><div class="line">        &#125; else if (heightSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class="line">            setMeasuredDimension(widthSpecSize, mHeight);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="让View支持padding"><a href="#让View支持padding" class="headerlink" title="让View支持padding"></a>让View支持padding</h3><p>这是因为直接继承View的控件，如果不在draw方法中处理padding，那么padding属性是无法起作用的。另外，直接继承自ViewGroup的控件需要在onMeasure和onLayout中考虑padding和子元素的margin对其造成的影响，不然将导致padding和子元素的margin失效。</p>
<h3 id="不要在View中使用Handler"><a href="#不要在View中使用Handler" class="headerlink" title="不要在View中使用Handler"></a>不要在View中使用Handler</h3><p>这是因为View内部本身就提供了post系列的方法，完全可以替代Handler的作用，当然除非你很明确地要使用Handler来发送消息。</p>
<h3 id="View中如果有线程或者动画，需要及时停止，"><a href="#View中如果有线程或者动画，需要及时停止，" class="headerlink" title="View中如果有线程或者动画，需要及时停止，"></a>View中如果有线程或者动画，需要及时停止，</h3><p>参考View#onDetachedFromWindow这一条也很好理解，如果有线程或者动画需要停止时，那么onDetachedFromWindow是一个很好的时机。当包含此View的Activity退出或者当前View被remove时，View的onDetachedFromWindow方法会被调用，和此方法对应的是onAttachedToWindow，当包含此View的Activity启动时，View的onAttachedToWindow方法会被调用。同时，当View变得不可见时我们也需要停止线程和动画，如果不及时处理这种问题，有可能会造成内存泄漏。</p>
<h3 id="View带有滑动嵌套情形时，需要处理好滑动冲突"><a href="#View带有滑动嵌套情形时，需要处理好滑动冲突" class="headerlink" title="View带有滑动嵌套情形时，需要处理好滑动冲突"></a>View带有滑动嵌套情形时，需要处理好滑动冲突</h3><p>如果有滑动冲突的话，那么要合适地处理滑动冲突，否则将会严重影响View的效果。</p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/Android进阶-2016-07-08-分析Android中的自定义View.html">http://www.sguotao.com/Android进阶-2016-07-08-分析Android中的自定义View.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;自定义View的分类&quot;&gt;&lt;a href=&quot;#自定义View的分类&quot; class=&quot;headerlink&quot; title=&quot;自定义View的分类&quot;&gt;&lt;/a&gt;自定义View的分类&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;继承View重写onDraw()&lt;/str
    
    </summary>
    
      <category term="Android进阶" scheme="http://www.sguotao.com/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android" scheme="http://www.sguotao.com/tags/Android/"/>
    
      <category term="View" scheme="http://www.sguotao.com/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>分析Android中View的工作流程</title>
    <link href="http://www.sguotao.com/Android%E8%BF%9B%E9%98%B6-2016-07-07-%E5%88%86%E6%9E%90Android%E4%B8%ADView%E7%9A%84%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B.html"/>
    <id>http://www.sguotao.com/Android进阶-2016-07-07-分析Android中View的绘制流程.html</id>
    <published>2016-07-06T02:27:04.000Z</published>
    <updated>2017-07-13T08:12:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>在分析View的工作流程时，需要先分析一个很重要的类,MeasureSpec。这个类在View的测量(Measure)过程中会用到。</p>
<h2 id="MeasureSpec"><a href="#MeasureSpec" class="headerlink" title="MeasureSpec"></a>MeasureSpec</h2><p>MeasureSpec是View的静态内部类，可以理解为是一种测量规格，是一个32位int值，高2位代表SpecMode，低30位代表SpecSize，SpecMode是指测量模式，而SpecSize是指在某种测量模式下的规格大小。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170712149986966667975.png" alt="20170712149986966667975.png"><br>SpecMode有三种模式，分别为：</p>
<ol>
<li>UNSPECIFIED:父容器不对View做限制</li>
<li>EXACTLY:父容器已经检测出View所需的精确大小，View的大小为SpecSize中指定的值。</li>
<li>AT_MOST:父容器指定了一个SpecSize，View的大小不大大于该值。</li>
</ol>
<h3 id="MeasureSpec与LayoutParams"><a href="#MeasureSpec与LayoutParams" class="headerlink" title="MeasureSpec与LayoutParams"></a>MeasureSpec与LayoutParams</h3><p>系统通过MeasureSpec作为测量规格，对View进行测量，但在设置View的宽高时，都是通过LayoutParams，因此系统在测量View的时候，会将LayoutParams在父容器的约束下转换成MeasureSpec，然后根据确定的MeasureSepc得到View测量后的宽高。有几点需要说明：</p>
<ol>
<li>LayoutParams和父容器一起确定MeasureSpec；</li>
<li>对于DecorView，其MeasureSpec是由窗口的尺寸和自身的LayoutParams共同确定的；由于窗口尺寸是确定的，因此主要与DecorView自身的LayoutParams有关，具体的对应关系如下图描述：<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/2017071314999163655874.png" alt="2017071314999163655874.png"></li>
<li>对于普通View，其MeasureSpec是由父容器的MeasureSpec和自身的LayoutParams共同确定的。其对应关系如下图描述：<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/2017071314999164201334.png" alt="2017071314999164201334.png"><br><strong>对普通View，简单总结一下：</strong></li>
</ol>
<ul>
<li>当View采用固定宽/高的时候，不管父容器的MeasureSpec是什么，View的MeasureSpec都是精确模式并且其大小遵循Layoutparams中的大小。</li>
<li>当View的宽/高是match_parent时，如果父容器的模式是精准模式，那么View也是精准模式并且其大小是父容器的剩余空间；如果父容器是最大模式，那么View也是最大模式并且其大小不会超过父容器的剩余空间。</li>
<li>当View的宽/高是wrap_content时，不管父容器的模式是精准还是最大模式，View的模式总是最大模式并且大小不能超过父容器的剩余空间。</li>
<li>在UNSPECIFIED模式中，系统内部会进行多次Measure过程，才能确定View的宽高。</li>
</ul>
<h2 id="View的工作流程"><a href="#View的工作流程" class="headerlink" title="View的工作流程"></a>View的工作流程</h2><p>ViewRoot是连接WindowManager与DecorView的纽带，View的绘制流程都是通过ViewRoot来完成的。</p>
<p>View的工作流程是从ViewRoot的performTraversals方法开始的，它经过measure、layout和draw三个过程才能最终将一个View绘制出来，其中measure用来测量View的宽和高，layout用来确定View在父容器中的放置位置，而draw则负责将View绘制在屏幕上。用一张图来描述View的工作过程：<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170712149985760240189.png" alt="20170712149985760240189.png"></p>
<h3 id="View的测量-Measure-过程"><a href="#View的测量-Measure-过程" class="headerlink" title="View的测量(Measure)过程"></a>View的测量(Measure)过程</h3><p>在View的Measure过程中，完成对View的测量，确定View的宽高。ViewRoot中的performTraversals()会依次调用ViewRoot中的performMeasure()、performLayout()和performDraw()三个方法，这三个方法分别完成顶级View的measure、layout和draw这三大流程。其中在performMeasure()中会调用View的measure()方法，在measure()方法中又会调用onMeasure()方法。在onMeasure()中将View宽/高的测量值传给setMeasuredDimension()方法，完成View的测量过程。</p>
<p>对于ViewGroup来说，除了完成自己的measure过程以外，还会遍历去调用所有子元素的measure()方法，各个子元素再递归去执行这个过程。和View不同的是，ViewGroup是一个抽象类，因此它没有重写View的onMeasure方法，因为不同的ViewGroup子类有不同的布局特性，这导致它们的测量细节各不相同。在ViewGroup的onMeasure()中最后也会调用setMeasuredDimension()方法，完成测量过程。</p>
<p>measure完成以后，通过getMeasuredWidth()/Height()方法就可以正确地获取到View的测量宽/高。需要注意的是，在某些极端情况下，系统可能需要多次measure才能确定最终的测量宽/高，在这种情形下，在onMeasure方法中拿到的测量宽/高很可能是不准确的。一个比较好的习惯是在onLayout方法中去获取View的测量宽/高或者最终宽/高。</p>
<h3 id="View的布局-Layout-过程"><a href="#View的布局-Layout-过程" class="headerlink" title="View的布局(Layout)过程"></a>View的布局(Layout)过程</h3><p>Layout的作用是ViewGroup用来确定子元素的位置，ViewRoot中的performLayout()中会调用View的layout()方法，在layout()方法中onLayout()方法又会被调用。onLayout的具体实现同样和具体的布局有关，所以View和ViewGroup均没有真正实现onLayout方法。</p>
<p>当ViewGroup的位置被确定后，它在onLayout()中会遍历所有的子元素并调用其layout()方法，layout()方法确定View本身的位置，而onLayout()方法则会确定所有子元素的位置。</p>
<h3 id="View的绘制-Draw-过程"><a href="#View的绘制-Draw-过程" class="headerlink" title="View的绘制(Draw)过程"></a>View的绘制(Draw)过程</h3><p>Draw的作用是将View绘制到屏幕上面。View的绘制过程遵循如下几步：</p>
<ol>
<li>绘制背景background.draw(canvas)</li>
<li>绘制自己（onDraw）</li>
<li>绘制children（dispatchDraw）</li>
<li>绘制装饰（onDrawScrollBars）</li>
</ol>
<p>View绘制过程的传递是通过dispatchDraw来实现的，dispatchDraw会遍历调用所有子元素的draw方法，如此draw事件就一层层地传递了下去。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] 任玉刚.Android开发艺术探索[M].电子工业出版社, 2015.9:1 - 507</p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/Android进阶-2016-07-07-分析Android中View的绘制流程.html">http://www.sguotao.com/Android进阶-2016-07-07-分析Android中View的绘制流程.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在分析View的工作流程时，需要先分析一个很重要的类,MeasureSpec。这个类在View的测量(Measure)过程中会用到。&lt;/p&gt;
&lt;h2 id=&quot;MeasureSpec&quot;&gt;&lt;a href=&quot;#MeasureSpec&quot; class=&quot;headerlink&quot; tit
    
    </summary>
    
      <category term="Android进阶" scheme="http://www.sguotao.com/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android" scheme="http://www.sguotao.com/tags/Android/"/>
    
      <category term="View" scheme="http://www.sguotao.com/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>分析Android中View的事件分发流程</title>
    <link href="http://www.sguotao.com/Android%E8%BF%9B%E9%98%B6-2016-07-06-%E5%88%86%E6%9E%90Android%E4%B8%ADView%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%B5%81%E7%A8%8B.html"/>
    <id>http://www.sguotao.com/Android进阶-2016-07-06-分析Android中View的事件分发流程.html</id>
    <published>2016-07-06T02:27:04.000Z</published>
    <updated>2017-07-12T09:28:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么会有事件分发机制"><a href="#为什么会有事件分发机制" class="headerlink" title="为什么会有事件分发机制"></a>为什么会有事件分发机制</h2><p>在Android中，View是以树形结构的形式存在的，View可能会重叠在一起，当我们点击的地方有多个View可以响应时，这个点击事件应该由哪个View来处理呢?很多情况下我们的应用都需要支持滑动操作，当处于不同层级的View都可以响应用户的滑动操作时，会出现滑动冲突。如何解决滑动冲突呢？为了解决这样的问题，就引入了事件分发机制。</p>
<p>在分析事件分发之前，有必要理清几个类之间的关系，先看一张类图。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170705149924486487719.png" alt="20170705149924486487719.png"></p>
<h3 id="Activity与Window、DecorView"><a href="#Activity与Window、DecorView" class="headerlink" title="Activity与Window、DecorView"></a>Activity与Window、DecorView</h3><p>Activity是Android中处理UI交互的组件，但是Activity并没有直接与View产生联系，而是通过Window产生关联。具体可以查看Activity的attach方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">final void attach(Context context, ActivityThread aThread,</div><div class="line">            Instrumentation instr, IBinder token, int ident,</div><div class="line">            Application application, Intent intent, ActivityInfo info,</div><div class="line">            CharSequence title, Activity parent, String id,</div><div class="line">            NonConfigurationInstances lastNonConfigurationInstances,</div><div class="line">            Configuration config, String referrer, IVoiceInteractor voiceInteractor,</div><div class="line">            Window window) &#123;</div><div class="line">        attachBaseContext(context);</div><div class="line">        mFragments.attachHost(null /*parent*/);</div><div class="line">        mWindow = new PhoneWindow(this, window);</div><div class="line">        mWindow.setWindowControllerCallback(this);</div><div class="line">        mWindow.setCallback(this);</div><div class="line">        mWindow.setOnWindowDismissedCallback(this);</div><div class="line">        mWindow.getLayoutInflater().setPrivateFactory(this);</div><div class="line">        ……</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>Window是一个抽象类，它有一个唯一实现子类PhoneWindow。Window可以理解为“UI界面的外框”，外框内的具体布局，背景的显示，标题栏的管理，都在window的管理范畴，是view的最顶层的管理容器。DecorView则是PhoneWindow类的一个内部类，继承于FrameLayout，DecorView是整个ViewTree的最顶层View，它是一个FrameLayout布局，代表了整个应用的界面。在该布局下面，有标题view和内容view这两个子元素。其中内容view对应着Acitivity中setContentView()中的view。</p>
<p>Window的另外一个作用，负责与WindowManagerService进行通信，但具体的实现逻辑并没有在Window中，而是交由Window的管理者WindowManager。WindowManager是一个接口，WindowManagerImpl中是其具体实现类，在WindowManagerImpl中通过WindowMangerGlobal来统一管理。</p>
<h3 id="View与ViewRoot"><a href="#View与ViewRoot" class="headerlink" title="View与ViewRoot"></a>View与ViewRoot</h3><p>从源码上看,ViewRoot与View没有任何血缘关系，ViewRoot是final类型，没有派生子类，也不是View的子类。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> @SuppressWarnings(&#123;&quot;EmptyCatchBlock&quot;&#125;)</div><div class="line"> public final class ViewRoot extends Handler implements ViewParent,</div><div class="line">View.AttachInfo.Callbacks &#123;</div><div class="line">……</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ViewRoot是连接WindowManager与DecorView的纽带，View的绘制流程都是通过ViewRoot来完成的。</p>
<p>在ViewRootImpl的构造方法中，有一个成员变量mWindowSession，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public ViewRootImpl(Context context, Display display) &#123;</div><div class="line">    mContext = context;</div><div class="line">    mWindowSession = WindowManagerGlobal.getWindowSession();</div><div class="line">    mDisplay = display;</div><div class="line">    mBasePackageName = context.getBasePackageName();</div><div class="line">    ……</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>查看WindowManagerGlobal.getWindowSession()的实现，发现mWindowSession它是ViewRoot利用WMS的openSession()接口来创建得到，用于ViewRoot到WMS的连接，从而实现与WindowManagerService的通信。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public static IWindowSession getWindowSession() &#123;</div><div class="line">        synchronized (WindowManagerGlobal.class) &#123;</div><div class="line">            if (sWindowSession == null) &#123;</div><div class="line">                try &#123;</div><div class="line">                    InputMethodManager imm = InputMethodManager.getInstance();</div><div class="line">                    IWindowManager windowManager = getWindowManagerService();</div><div class="line">                    sWindowSession = windowManager.openSession(</div><div class="line">                            new IWindowSessionCallback.Stub() &#123;</div><div class="line">                                @Override</div><div class="line">                                public void onAnimatorScaleChanged(float scale) &#123;</div><div class="line">                                    ValueAnimator.setDurationScale(scale);</div><div class="line">                                &#125;</div><div class="line">                            &#125;,</div><div class="line">                            imm.getClient(), imm.getInputContext());</div><div class="line">                    ValueAnimator.setDurationScale(windowManager.getCurrentAnimatorScale());</div><div class="line">                &#125; catch (RemoteException e) &#123;</div><div class="line">                    Log.e(TAG, &quot;Failed to open window session&quot;, e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            return sWindowSession;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>ViewRootImpl并非ViewRoot的实现类</strong>，两个类都是final类型，没有派生子类，这两个类实现的功能是一样的，这是在Android不同版本中的称呼不同而已。<br>总结一下：</p>
<ol>
<li>Activity通过Window的唯一派生类PhoneWindow与view产生联系；</li>
<li>PhoneWindow内部的DecorView是View的最顶层容器。</li>
<li>ViewRoot是WindowServiceManager与DecorView的纽带，View的绘制流程是都是通过ViewRoot完成。</li>
</ol>
<h2 id="三个重要的事件分发方法"><a href="#三个重要的事件分发方法" class="headerlink" title="三个重要的事件分发方法"></a>三个重要的事件分发方法</h2><p>所谓点击事件的事件分发，其实就是对MotionEvent事件的分发过程，即当一个MotionEvent产生了以后，系统需要把这个事件传递给一个具体的View，而这个传递的过程就是分发过程。点击事件的分发过程由三个很重要的方法来共同完成：dispatchTouchEvent、onInterceptTouchEvent和onTouchEvent。三个方法之间的关系，可以通过一段伪代码的表示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public boolean dispatchTouchEvent(MotionEvent ev) &#123;</div><div class="line">       boolean consume = false;</div><div class="line">       if (onInterceptTouchEvent(ev)) &#123;</div><div class="line">               consume = onTouchEvent(ev);</div><div class="line">       &#125; else &#123;</div><div class="line">               consume = child.dispatchTouchEvent(ev);</div><div class="line">       &#125;</div><div class="line">       return consume;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>通过上面的伪代码，我们也可以大致了解点击事件的传递规则：对于一个根ViewGroup来说，点击事件产生后，首先会传递给它，这时它的dispatchTouchEvent就会被调用，如果这个ViewGroup的onInterceptTouchEvent方法返回true就表示它要拦截当前事件，接着事件就会交给这个ViewGroup处理，即它的onTouchEvent方法就会被调用；如果这个ViewGroup的onInterceptTouchEvent方法返回false就表示它不拦截当前事件，这时当前事件就会继续传递给它的子元素，接着子元素的dispatchTouchEvent方法就会被调用，如此反复直到事件被最终处理。</p>
<h3 id="dispatchTouchEvent"><a href="#dispatchTouchEvent" class="headerlink" title="dispatchTouchEvent"></a>dispatchTouchEvent</h3><p>用来进行事件的分发。如果事件能够传递给当前View，那么此方法一定会被调用，返回结果受当前View的onTouchEvent和下级View的dispatchTouchEvent方法的影响，表示是否消耗当前事件。</p>
<h3 id="onInterceptTouchEvent"><a href="#onInterceptTouchEvent" class="headerlink" title="onInterceptTouchEvent"></a>onInterceptTouchEvent</h3><p>Activity和View中是没有该事件，如果在Activity作为事件的原始分发者，如果进行拦截，事件就无法传递到ViewGroup，整个屏幕就无法响应事件，同样View作为事件传递的最末端，没有需要事件分发的子控件，要么消费事件，要么不处理回传。</p>
<p>onInterceptTouchEvent是dispatchTouchEvent内部调用，用来判断是否拦截某个事件，如果当前View拦截了某个事件，那么在同一个事件序列当中，此方法不会被再次调用，返回结果表示是否拦截当前事件。</p>
<h3 id="onTouchEvent"><a href="#onTouchEvent" class="headerlink" title="onTouchEvent"></a>onTouchEvent</h3><p>在dispatchTouchEvent方法中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一个事件序列中，当前View无法再次接收到事件。</p>
<h2 id="事件分发流程"><a href="#事件分发流程" class="headerlink" title="事件分发流程"></a>事件分发流程</h2><p>如果想让图中的View获取事件，事件的分发流程是怎样的？<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170705149924809957687.png" alt="20170705149924809957687.png"></p>
<p>当屏幕被点击时，由于View是树形结构，首先事件传递到Activity，Activity在其dispatchTouchEvent中进行处理，然后传递到Window的实际实现类PhoneWindow，PhoneWindow所有关于事件的处理是在其内部类DecorView中完成的，如果在DecorView中的dispatchTouchEvent对事件不进行拦截，会将事件传递到RootView，在RootView的dispatchTouchEvent中调用onInterceptTouchEvent,如果对事件不进行拦截处理，事件会传递到ViewGroup，在ViewGroup中如果对事件不进行拦截，事件会传递到View，View收到事件后，在onTouchEvent中进行消耗处理，同时返回true，返回值经View-&gt;ViewGroup-&gt;RootView-&gt;DecorView-&gt;PhoneWindow-&gt;Activity的路径，最终会传到事件的发起点Activity，至此，完成了事件从Activity到View的分发过程。</p>
<p><img src="http://7u2np3.com1.z0.glb.clouddn.com/2017070614993116201116.png" alt="2017070614993116201116.png"></p>
<h2 id="OnTouchListener与OnClickListener"><a href="#OnTouchListener与OnClickListener" class="headerlink" title="OnTouchListener与OnClickListener"></a>OnTouchListener与OnClickListener</h2><p>当一个View需要处理事件时，如果它设置了OnTouchListener，那么OnTouchListener中的onTouch方法会被回调。这时事件如何处理还要看onTouch的返回值，如果返回false，则当前View的onTouchEvent方法会被调用；如果返回true，那么onTouchEvent方法将不会被调用。由此可见，给View设置的OnTouchListener，其优先级优先级比onTouchEvent要高。在onTouchEvent方法中，如果当前设置的有OnClickListener，那么它的onClick方法会被调用。可以看出，平时我们常用的OnClickListener，其优先级最低，即处于事件传递的尾端。</p>
<h2 id="事件分发的完整过程"><a href="#事件分发的完整过程" class="headerlink" title="事件分发的完整过程"></a>事件分发的完整过程</h2><p>首先事件开始交给Activity所附属的Window进行分发，如果返回true，整个事件循环就结束了，返回false意味着事件没人处理，所有View的onTouchEvent都返回了false，那么Activity的onTouchEvent就会被调用。由于Window的唯一实现是PhoneWindow，PhoneWindow将事件直接传递给了DecorView，由于DecorView继承自FrameLayout且是父View，所以最终事件会传递给View。即在Activity中通过setContentView所设置的View，另外顶级View也叫根View，顶级View一般来说都是ViewGroup。</p>
<p>事件达到顶级View（一般是一个ViewGroup）以后，会调用ViewGroup的dispatchTouchEvent方法，然后的逻辑是这样的：如果顶级ViewGroup拦截事件即onInterceptTouchEvent返回true，则事件由ViewGroup处理，这时如果ViewGroup的mOnTouchListener被设置，则onTouch会被调用，否则onTouchEvent会被调用。也就是说，如果都提供的话，onTouch会屏蔽掉onTouchEvent。在onTouchEvent中，如果设置了mOnClickListener，则onClick会被调用。如果顶级ViewGroup不拦截事件，则事件会传递给它所在的点击事件链上的子View，这时子View的dispatchTouchEvent会被调用。到此为止，事件已经从顶级View传递给了下一层View，接下来的传递过程和顶级View是一致的，如此循环，完成整个事件的分发。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关于事件传递的机制，这里给出一些结论，根据这些结论可以更好地理解整个传递机制：</p>
<ol>
<li>同一个事件序列是指从手指接触屏幕的那一刻起，到手指离开屏幕的那一刻结束，在这个过程中所产生的一系列事件，这个事件序列以down事件开始，中间含有数量不定的move事件，最终以up事件结束。</li>
<li>正常情况下，一个事件序列只能被一个View拦截且消耗。因为一旦一个元素拦截了某此事件，那么同一个事件序列内的所有事件都会直接交给它处理，因此同一个事件序列中的事件不能分别由两个View同时处理，但是通过特殊手段可以做到，比如一个View将本该自己处理的事件通过onTouchEvent强行传递给其他View处理。</li>
<li>某个View一旦决定拦截，那么这一个事件序列都只能由它来处理（如果事件序列能够传递给它的话），并且它的onInterceptTouchEvent不会再被调用。这条也很好理解，就是说当一个View决定拦截一个事件后，那么系统会把同一个事件序列内的其他方法都直接交给它来处理，因此就不用再调用这个View的onInterceptTouchEvent去询问它是否要拦截了。</li>
<li>某个View一旦开始处理事件，如果它不消耗ACTION_DOWN事件（onTouchEvent返回了false），那么同一事件序列中的其他事件都不会再交给它来处理，并且事件将重新交由它的父元素去处理，即父元素的onTouchEvent会被调用。意思就是事件一旦交给一个View处理，那么它就必须消耗掉，否则同一事件序列中剩下的事件就不再交给它来处理了。</li>
<li>如果View不消耗除ACTION_DOWN以外的其他事件，那么这个点击事件会消失，此时父元素的onTouchEvent并不会被调用，并且当前View可以持续收到后续的事件，最终这些消失的点击事件会传递给Activity处理。</li>
<li>ViewGroup默认不拦截任何事件。Android源码中ViewGroup的onInterceptTouch-Event方法默认返回false。</li>
<li>View没有onInterceptTouchEvent方法，一旦有点击事件传递给它，那么它的onTouchEvent方法就会被调用。</li>
<li>View的onTouchEvent默认都会消耗事件（返回true），除非它是不可点击的（clickable和longClickable同时为false）。View的longClickable属性默认都为false，clickable属性要分情况，比如Button的clickable属性默认为true，而TextView的clickable属性默认为false。</li>
<li>View的enable属性不影响onTouchEvent的默认返回值。哪怕一个View是disable状态的，只要它的clickable或者longClickable有一个为true，那么它的onTouchEvent就返回true。</li>
<li>onClick会发生的前提是当前View是可点击的，并且它收到了down和up的事件。</li>
<li>事件传递过程是由外向内的，即事件总是先传递给父元素，然后再由父元素分发给子View，通过requestDisallowInterceptTouchEvent方法可以在子元素中干预父元素的事件分发过程，但是ACTION_DOWN事件除外。</li>
</ol>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] 任玉刚.Android开发艺术探索[M].电子工业出版社, 2015.9:1 - 507</p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/Android进阶-2016-07-06-分析Android中View的事件分发流程.html">http://www.sguotao.com/Android进阶-2016-07-06-分析Android中View的事件分发流程.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么会有事件分发机制&quot;&gt;&lt;a href=&quot;#为什么会有事件分发机制&quot; class=&quot;headerlink&quot; title=&quot;为什么会有事件分发机制&quot;&gt;&lt;/a&gt;为什么会有事件分发机制&lt;/h2&gt;&lt;p&gt;在Android中，View是以树形结构的形式存在的，View可能会
    
    </summary>
    
      <category term="Android进阶" scheme="http://www.sguotao.com/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android" scheme="http://www.sguotao.com/tags/Android/"/>
    
      <category term="View" scheme="http://www.sguotao.com/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>初探Android中的View</title>
    <link href="http://www.sguotao.com/Android%E8%BF%9B%E9%98%B6-2016-07-05-%E5%88%9D%E6%8E%A2Android%E4%B8%AD%E7%9A%84View.html"/>
    <id>http://www.sguotao.com/Android进阶-2016-07-05-初探Android中的View.html</id>
    <published>2016-07-05T02:27:04.000Z</published>
    <updated>2017-07-12T03:55:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170706149933806671638.png" alt="20170706149933806671638.png"><br>在Android中，Activity承担着与UI相关的可视化功能，在Activity中会使用到系统提供的大量控件，而View是Android中所有控件的基类,可以认为View是用户界面最基本的控件。</p>
<h2 id="View的位置参数"><a href="#View的位置参数" class="headerlink" title="View的位置参数"></a>View的位置参数</h2><p>在Android中，默认View的形状是矩形，只要确定View的左上角位置和右下角位置，就可以确定View的位置。在View中，这两个顶点的坐标，对应着View的下面四个属性：</p>
<ul>
<li>top View左上角纵坐标，对应View成员变量mTop,通过getTop()方法得到；</li>
<li>left View左上角横坐标，对应View成员变量mLeft，通过getLeft()方法得到；</li>
<li>right View右下角横坐标，对应View成员变量mRight，通过getRight()方法得到；</li>
<li>bottom View右下角纵坐标，对应View成员变量mBottom,通过getBottom()方法得到。</li>
</ul>
<p>根据这两个点的坐标，可以计算出View的宽高：<br>width = right - left;<br>height = bottom - top;<br>也可以通过getWidth()和getHeight()获取，内部的计算方式是一样的。</p>
<p>在Android3.0中View又增加了几个属性:</p>
<ul>
<li>x View左上角横坐标，通过getX()方法获得；</li>
<li>y View左上角纵坐标，通过getY()方法获得；</li>
<li>translationX View左上角相对于父容器在X轴上的偏移量，通过getTranslationX()方法获得；</li>
<li>translationY View左上角相对于父容器在y轴上的偏移量，通过getTranslationY()方法获得；</li>
</ul>
<p>translationX和translationY的初始值都是0，x,y与left，top的对应关系：<br>x = left + translationX;<br>y = top + translationY;<br><strong>在View的平移动画中，View的left和top是View起始位置左上角的坐标，不随着动画的运行而改变，x和y随动画的运动而改变。可以认为这几个参数是为属性动画添加的，间接证明了属性动画在运行过程中可以修改View的属性值。</strong></p>
<p>在Android5.0中View又增加了属性z和translationZ,这两个参数并不会影响View的大小，主要与View的阴影效果有关，z值越大，View的投影越大，可以认为是与Material Design相关的。</p>
<h2 id="View的相关类"><a href="#View的相关类" class="headerlink" title="View的相关类"></a>View的相关类</h2><h3 id="MotionEvent"><a href="#MotionEvent" class="headerlink" title="MotionEvent"></a>MotionEvent</h3><p>触摸屏幕后产生的事件，比较常用的事件类型：</p>
<ul>
<li>ACTION_DOWN 手指刚触摸屏幕</li>
<li>ACTION_MOVE 手指在屏幕上移动</li>
<li>ACTION_UP 手指离开屏幕</li>
<li>ACTION_CANCEL 手势被取消时</li>
</ul>
<p>通过MotionEvent可以获取事件发生的位置，getX()和getY()获取的是事件相对于View的坐标，getRawX()和getRawY()获取的是事件相对于屏幕的坐标。为了区别MotionEvent中事件的位置参数与View的位置参数整理为如下图示，图中蓝点表示事件的触发位置。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170710149965453553546.png" alt="20170710149965453553546.png"></p>
<h3 id="VelocityTacker"><a href="#VelocityTacker" class="headerlink" title="VelocityTacker"></a>VelocityTacker</h3><p>用来追踪手指在滑动过程中的水平速度和竖直方向的速度。获取的速度可以是负值，当收拾滑动的方向与坐标系的方向相反时，得到的速度值是负值。获取速度之前必须要计算速度,通过调用computeCurrentVelocity()来实现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">       //添加速度追踪的事件</div><div class="line">       VelocityTracker velocityTracker = VelocityTracker.obtain();</div><div class="line">       velocityTracker.addMovement(event);</div><div class="line"></div><div class="line">       //追踪1000ms内的速度</div><div class="line">       velocityTracker.computeCurrentVelocity(1000);</div><div class="line">       int xVelocity = (int) velocityTracker.getXVelocity();</div><div class="line">       int yVelocity = (int) velocityTracker.getYVelocity();</div><div class="line">       Log.i(&quot;sguotao&quot;, &quot;xVelocity:&quot; + xVelocity);</div><div class="line">       Log.i(&quot;sguotao&quot;, &quot;yVelocity:&quot; + yVelocity);</div><div class="line"></div><div class="line">       //回收</div><div class="line">       velocityTracker.clear();</div><div class="line">       velocityTracker.recycle();</div><div class="line"></div><div class="line">       return super.onTouchEvent(event);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="GestureDector"><a href="#GestureDector" class="headerlink" title="GestureDector"></a>GestureDector</h3><p>在GestueDector中定义了两个常用的接口，OnGestureListener和OnDoubleTapListener,通过这两个接口，可以完成诸如单击、快速滑动、拖动、长按、双击等动作的监测。如果只是监听滑动相关的，建议自己在onTouchEvent中实现，如果要监听双击这种行为的话，那么就使用GestureDetector。</p>
<h2 id="View的滑动"><a href="#View的滑动" class="headerlink" title="View的滑动"></a>View的滑动</h2><p>滑动在实际开发中非常常见，而且掌握滑动的方法是实现绚丽自定义控件的基础。实现View滑动的三种方式</p>
<h3 id="方式一-scrollTo-scrollBy"><a href="#方式一-scrollTo-scrollBy" class="headerlink" title="方式一 scrollTo/scrollBy"></a>方式一 scrollTo/scrollBy</h3><p>View专门提供了scrollTo/scrollBy两个方法来实现滑动，scrollBy内部也是通过调用scrollTo方法实现的，使用这两个方法实现View的移动，只能将View的内容进行移动，不能将View本身进行移动。用一张图描述scrollTo/scrollBy两个方法的滑动效果。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170712149981308867779.png" alt="20170712149981308867779.png"><br>其中mScrollX表示View左边缘和View中内容的左边缘在水平方向的距离，mScrollY表示View上边缘和View中内容的上边缘在竖直方向的距离。</p>
<h3 id="方式二-动画给View添加平移效果实现滑动"><a href="#方式二-动画给View添加平移效果实现滑动" class="headerlink" title="方式二 动画给View添加平移效果实现滑动"></a>方式二 动画给View添加平移效果实现滑动</h3><p>使用平移动画也可以实现View的滑动，在Android3.0中引入了属性动画后，我们可以通过操作View的translationX和translationY这两个属性实现动画的平移。使用动画的方式，操作简单，适用于没有交互的View和复杂动画效果的场景。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//targetView在100ms内向右平移100像素</div><div class="line">ObjectAnimator.ofFloat(targetView,&quot;translationX&quot;,0,100).setDuration(100).start();</div></pre></td></tr></table></figure>
<h3 id="方式三-通过改变View的LayoutParams使View重新布局实现滑动"><a href="#方式三-通过改变View的LayoutParams使View重新布局实现滑动" class="headerlink" title="方式三 通过改变View的LayoutParams使View重新布局实现滑动"></a>方式三 通过改变View的LayoutParams使View重新布局实现滑动</h3><p>通过改变View布局参数的方式，操作起来复杂，适合有交互View的场景。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ViewGroup.MarginLayoutParams params = (ViewGroup.MarginLayoutParams) targetView.params.width += 100;</div><div class="line">    params.leftMargin += 100;</div><div class="line">    targetView.requestLayout();</div><div class="line">    //或者targetView.setLayoutParams(params);</div></pre></td></tr></table></figure>
<h2 id="View的弹性滑动"><a href="#View的弹性滑动" class="headerlink" title="View的弹性滑动"></a>View的弹性滑动</h2><p>所谓的弹性滑动，就是在让滑动以一种渐进的方式进行。</p>
<h3 id="方式一-使用Scroller"><a href="#方式一-使用Scroller" class="headerlink" title="方式一 使用Scroller"></a>方式一 使用Scroller</h3><p>Scroller本身无法让View弹性滑动，它需要和View的computeScroll方法配合使用才能共同完成这个功能。具体实现过程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Scroller scroller = new Scroller(mContext);</div><div class="line"></div><div class="line">  //弹性滑动到指定位置 </div><div class="line">  private void smoothScrollTo(int destX, int destY) &#123;</div><div class="line">      int scrollX = getScrollX();</div><div class="line">      int delta = destX - scrollX;</div><div class="line">      // 1000ms内滑向destX，效果就是慢慢滑动mScroller. </div><div class="line">      startScroll(scrollX, 0, delta, 0, 1000);</div><div class="line">      invalidate();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public void computeScroll() &#123;</div><div class="line">      if (mScroller.computeScrollOffset()) &#123;</div><div class="line">          scrollTo(mScroller.getCurrX(), mScroller.getCurrY());</div><div class="line">          postInvalidate();</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>用一张图来表示Scroller实现弹性滑动的过程，<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170712149981298574432.png" alt="20170712149981298574432.png"><br>总结一下，Scroller本身并不能实现View的滑动，它需要配合View的computeScroll方法才能完成弹性滑动的效果，它不断地让View重绘，而每一次重绘距滑动起始时间会有一个时间间隔，通过这个时间间隔Scroller就可以得出View当前的滑动位置，知道了滑动位置就可以通过scrollTo方法来完成View的滑动。就这样，View的每一次重绘都会导致View进行小幅度的滑动，而多次的小幅度滑动就组成了弹性滑动，这就是Scroller的工作机制。</p>
<h3 id="方式二-通过动画"><a href="#方式二-通过动画" class="headerlink" title="方式二 通过动画"></a>方式二 通过动画</h3><p>动画本身就是一个渐进的效果，利用动画天然自带滑动效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator.ofFloat(targetView,&quot;translationX&quot;,0,100).setDuration(100).start();</div></pre></td></tr></table></figure></p>
<h3 id="方式三-使用延时策略"><a href="#方式三-使用延时策略" class="headerlink" title="方式三 使用延时策略"></a>方式三 使用延时策略</h3><p>通过使用Handler或View的postDelayed方法，也可以使用线程的sleep方法。来实现渐进式的滑动效果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">private static final int MESSAGE_SCROLL_TO = 1;</div><div class="line">    private static final int FRAME_COUNT =30;</div><div class="line">    private static final int DELAYED_TIME =33;</div><div class="line">    private int mCount = 0;</div><div class="line">    @SuppressLint(&quot; HandlerLeak&quot;)</div><div class="line">    private Handler mHandler = new Handler() &#123;</div><div class="line">        public void handleMessage(Message msg) &#123;</div><div class="line">            switch (msg.what) &#123;</div><div class="line">                case MESSAGE_SCROLL_TO:</div><div class="line">                    &#123;</div><div class="line">                    mCount++;</div><div class="line">                    if (mCount &lt;= FRAME_COUNT)&#123;</div><div class="line">                        float fraction = mCount / (float) FRAME_COUNT;</div><div class="line">                        int scrollX = (int) (fraction * 100);</div><div class="line">                        targetView.scrollTo(scrollX, 0);</div><div class="line">                        mHandler.sendEmptyMessageDelayed(MESSAGE_SCROLL_TO, DELAYED_TIME);</div><div class="line"></div><div class="line">                    &#125; break;</div><div class="line">                &#125; </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<h2 id="滑动冲突的处理"><a href="#滑动冲突的处理" class="headerlink" title="滑动冲突的处理"></a>滑动冲突的处理</h2><p>当界面中出现内外两层同时可以滑动的情况，就有可能会出现滑动冲突。出现滑动冲突可以用一张图来描述：<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170712149981286533870.png" alt="20170712149981286533870.png"></p>
<h3 id="场景一-外部滑动方向和内部滑动方向不一致"><a href="#场景一-外部滑动方向和内部滑动方向不一致" class="headerlink" title="场景一 外部滑动方向和内部滑动方向不一致"></a>场景一 外部滑动方向和内部滑动方向不一致</h3><p>这种场景主要描述的是内外两层View出现滑动方向不一致的情况，如外层View左右滑动，内层View上下滑动，或者外层View上下滑动，内层View所有滑动。常见的ViewPager与Fragment组合使用中出现的滑动效果，在这种效果中左右滑动来切换页面，如果每个页面内部又使用了ListView,就有可能会出现滑动冲突，但ViewPager内部处理了这种滑动冲突，如果不是ViewPager而是ScrollView，就会出现这种类型的滑动冲突。</p>
<p>处理场景一中描述的滑动冲突规则：分清是水平滑动还是竖直滑动，来决定哪一层来拦截事件。如图中描述的情况，如果是左右滑动，外层View来拦截事件处理，如果是上下滑动，内层View来拦截事件处理。</p>
<p>具体实现上，可以根据滑动过程中两个点的坐标，来判断滑动距离，滑动角度等。</p>
<h3 id="场景二-外部滑动方向和内部滑动方向一致"><a href="#场景二-外部滑动方向和内部滑动方向一致" class="headerlink" title="场景二 外部滑动方向和内部滑动方向一致"></a>场景二 外部滑动方向和内部滑动方向一致</h3><p>这种场景主要描述的是内外两层View滑动方向一致的情况，如外层View和内层View同时左右滑动或者同时上下滑动。</p>
<p>处理场景二中描述的滑动冲突，就需要结合具体的业务逻辑来进行区分。</p>
<h3 id="场景三-以上两种场景的嵌套"><a href="#场景三-以上两种场景的嵌套" class="headerlink" title="场景三 以上两种场景的嵌套"></a>场景三 以上两种场景的嵌套</h3><p>这种场景主要描述的是以上两种场景的组合情况。</p>
<p>处理场景三种描述的滑动冲突与场景二一样，也需要结合具体的业务逻辑来进行区分。</p>
<h3 id="解决冲突的两种方法"><a href="#解决冲突的两种方法" class="headerlink" title="解决冲突的两种方法"></a>解决冲突的两种方法</h3><h4 id="方法一-外部拦截法"><a href="#方法一-外部拦截法" class="headerlink" title="方法一 外部拦截法"></a>方法一 外部拦截法</h4><p>所谓外部拦截法是指点击事情都先经过父容器的拦截处理，如果父容器需要此事件就拦截，如果不需要此事件就不拦截，这样就可以解决滑动冲突的问题。</p>
<p>外部拦截法的实现过程：在父容器的onInterceptTouchEvent方法中：</p>
<ol>
<li>首先是ACTION_DOWN这个事件，父容器必须返回false，即不拦截ACTION_DOWN事件，这是因为一旦父容器拦截了ACTION_DOWN，那么后续的ACTION_MOVE和ACTION_UP事件都会直接交由父容器处理，这个时候事件没法再传递给子元素了；</li>
<li>其次是ACTION_MOVE事件，这个事件可以根据需要来决定是否拦截，如果父容器需要拦截就返回true，否则返回false；</li>
<li>最后是ACTION_UP事件，这里必须要返回false，因为ACTION_UP事件本身没有太多意义。考虑一种情况，假设事件交由子元素处理，如果父容器在ACTION_UP时返回了true，就会导致子元素无法接收到ACTION_UP事件，这个时候子元素中的onClick事件就无法触发，但是父容器比较特殊，一旦它开始拦截任何一个事件，那么后续的事件都会交给它来处理，而ACTION_UP作为最后一个事件也必定可以传递给父容器，即便父容器的onInterceptTouchEvent方法在ACTION_UP时返回了false。</li>
</ol>
<h4 id="方法二-内部拦截法"><a href="#方法二-内部拦截法" class="headerlink" title="方法二 内部拦截法"></a>方法二 内部拦截法</h4><p>内部拦截法是指父容器不拦截任何事件，所有的事件都传递给子元素，如果子元素需要此事件就直接消耗掉，否则就交由父容器进行处理，这种方法和Android中View的事件分发机制不一致，需要配合requestDisallowInterceptTouchEvent方法才能正常工作。内部拦截法的实现过程：<br>在子View中需要重写dispathTouchEvent()</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public boolean dispatchTouchEvent(MotionEventevent) &#123;</div><div class="line">     switch (event.getAction()) &#123;</div><div class="line">         case MotionEvent.ACTION_DOWN:&#123;</div><div class="line">             parent.requestDisallowInterceptTouchEvent(true);</div><div class="line">             break;</div><div class="line">         &#125;</div><div class="line">         case MotionEvent.ACTION_MOVE:&#123;</div><div class="line">             int deltaX = x - mLastX;</div><div class="line">             int deltaY = y - mLastY;</div><div class="line">             if (父容器需要此类点击事件))&#123;</div><div class="line">                 parent.requestDisallowInterceptTouchEvent(false);</div><div class="line">             &#125;</div><div class="line">             break;</div><div class="line">         &#125; case MotionEvent.ACTION_UP:&#123;</div><div class="line">             break;</div><div class="line">         &#125;</div><div class="line">         default:</div><div class="line">             break;</div><div class="line">     &#125; </div><div class="line">     return super.dispatchTouchEvent(event);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>除此之外，<strong>父容器要拦截除ACTION_DOWN外的所有事件</strong>，这样当子元素调用parent.requestDisallowInterceptTouchEvent(false)方法时，父元素才能继续拦截所需的事件。<strong>为什么父容器不能拦截ACTION_DOWN事件呢？那是因为ACTION_DOWN事件并不受FLAG_DISALLOW_INTERCEPT这个标记位的控制，所以一旦父容器拦截ACTION_DOWN事件，那么所有的事件都无法传递到子元素中去，这样内部拦截就无法起作用了。</strong>父元素所做的修改如下所示。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public boolean onInterceptTouchEvent(MotionEvent event) &#123;</div><div class="line">    int action = event.getAction();</div><div class="line">    if (action == MotionEvent.ACTION_ DOWN)&#123;</div><div class="line">        return false;</div><div class="line">    &#125; else&#123;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] 任玉刚.Android开发艺术探索[M].电子工业出版社, 2015.9:1 - 507</p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/Android进阶-2016-07-05-初探Android中的View.html">http://www.sguotao.com/Android进阶-2016-07-05-初探Android中的View.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7u2np3.com1.z0.glb.clouddn.com/20170706149933806671638.png&quot; alt=&quot;20170706149933806671638.png&quot;&gt;&lt;br&gt;在Android中，Activity承担着与
    
    </summary>
    
      <category term="Android进阶" scheme="http://www.sguotao.com/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android" scheme="http://www.sguotao.com/tags/Android/"/>
    
      <category term="View" scheme="http://www.sguotao.com/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Java String的不可变性</title>
    <link href="http://www.sguotao.com/Java%E8%BF%9B%E9%98%B6-2016-06-15-Java-String%E7%9A%84%E4%B8%8D%E5%8F%AF%E5%8F%98%E6%80%A7.html"/>
    <id>http://www.sguotao.com/Java进阶-2016-06-15-Java-String的不可变性.html</id>
    <published>2016-06-15T02:27:04.000Z</published>
    <updated>2017-07-13T10:10:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java String类有一个特点，即它是一个不可变类，一旦被实例化后，就无法被修改。于是就有一个疑问，为什么将String类设计成不可变的？这样设计有什么好处呢？</p>
<h2 id="什么是不可变对象？"><a href="#什么是不可变对象？" class="headerlink" title="什么是不可变对象？"></a>什么是不可变对象？</h2><p>一个对象在其被实例化完成后，不能够改变其成员变量，包括基本数据类型的值不能够改变及引用类型索引的对象也不能够被修改。</p>
<h2 id="String的不可变性"><a href="#String的不可变性" class="headerlink" title="String的不可变性"></a>String的不可变性</h2><p>String类的实例变量，存在一块特殊区域，这部分区域可以称为字符串池，这是在堆存储区中，方法区中的一部分存储区域。当一个字符串被创建的时候，会在字符串池中查找，如果找到，则直接返回该字符串的引用。比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//声明两个字符串</div><div class="line">String str1 = &quot;abcd&quot;;</div><div class="line">String str2 = &quot;abcd&quot;;</div></pre></td></tr></table></figure>
<p>用图来表示这两个字符串的声明过程：<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170615149750940366064.png" alt="20170615149750940366064.png"><br>在声明str2时，在字符串池中存在“abcd”，因此直接将“abcd”的引用返回。</p>
<h2 id="对象和对象的引用"><a href="#对象和对象的引用" class="headerlink" title="对象和对象的引用"></a>对象和对象的引用</h2><p>下面一段代码，先看代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String str1 = &quot;abcd&quot;</div><div class="line">str1=&quot;1234&quot;</div><div class="line">System.out.println(str1);</div></pre></td></tr></table></figure>
<p>打印结果”1234”。<br>很容易让人产生一个误区，str1的值是改变的，怎么解释呢？这里需要区分一下对象及对象的引用。对象是存放在堆内存中的，类的实例。引用，存放在栈内存中的，存放指向堆内存中对象的索引。上面这段代码的执行过程可以用下面的图形表示：<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170615149751091924228.png" alt="20170615149751091924228.png"><br>str1只是一个引用，它指向一个具体的对象，当str1=”1234”执行时，创建了一个新的对象”1234”,引用str1指向了这个新对象，原来的对象“abcd”还存在内存中，没有发生改变。</p>
<h2 id="String的不可变性有哪些特点"><a href="#String的不可变性有哪些特点" class="headerlink" title="String的不可变性有哪些特点"></a>String的不可变性有哪些特点</h2><ol>
<li>线程安全，不可变对象不能够被改变，所以可以再多线程之间共享，不需要任何同步处理。</li>
<li>高效性，在String中的源码中</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//this is used to cache hash code.</div><div class="line">private int hash;</div></pre></td></tr></table></figure>
<p>由于String是不可变的，随意一旦对象被创建，该Hash值也无法修改。所以在使用该对象的hashcode时，可以直接返回。比如在HashMap中，字符串对象的hashcode不可变且永远唯一，这就意味着使用在HashMap中的字符串时，不需要重新计算hashcode值，更加的高效。</p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/Java进阶-2016-06-15-Java-String的不可变性.html">http://www.sguotao.com/Java进阶-2016-06-15-Java-String的不可变性.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java String类有一个特点，即它是一个不可变类，一旦被实例化后，就无法被修改。于是就有一个疑问，为什么将String类设计成不可变的？这样设计有什么好处呢？&lt;/p&gt;
&lt;h2 id=&quot;什么是不可变对象？&quot;&gt;&lt;a href=&quot;#什么是不可变对象？&quot; class=&quot;hea
    
    </summary>
    
      <category term="Java" scheme="http://www.sguotao.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.sguotao.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android实现点赞效果</title>
    <link href="http://www.sguotao.com/Android%E8%BF%9B%E9%98%B6-2016-06-13-Android%E5%AE%9E%E7%8E%B0%E7%82%B9%E8%B5%9E%E6%95%88%E6%9E%9C.html"/>
    <id>http://www.sguotao.com/Android进阶-2016-06-13-Android实现点赞效果.html</id>
    <published>2016-06-13T06:39:39.000Z</published>
    <updated>2017-07-13T10:02:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近接到一个需求，需求中有个点赞动画的需求。决定使用属性动画的方式来实现。其实使用传统的动画，也可以实现相同的效果，出于传统动画会重复调用onDraw()方法进行绘制，可能会存在一些内存和性能的问题。</p>
<h3 id="添加平移动画"><a href="#添加平移动画" class="headerlink" title="添加平移动画"></a>添加平移动画</h3><p>先来实现一个简单的平移动画，查看一下效果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator translationY = ObjectAnimator.ofFloat(view, &quot;translationY&quot;, 0f, -100f);</div><div class="line">translationY.setDuration(1000);</div><div class="line">translationY.start();</div></pre></td></tr></table></figure>
<p><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170613149733811463543.gif" alt="20170613149733811463543.gif"></p>
<h3 id="添加渐变动画"><a href="#添加渐变动画" class="headerlink" title="添加渐变动画"></a>添加渐变动画</h3><p>再加入一个渐变的效果，查看一下效果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//translate动画</div><div class="line">ObjectAnimator translationY = ObjectAnimator.ofFloat(view, &quot;translationY&quot;, 0f, -100f);</div><div class="line">//alpha动画</div><div class="line">ObjectAnimator alpha = ObjectAnimator.ofFloat(view, &quot;alpha&quot;, 1f, 0f);</div><div class="line">AnimatorSet animatorSet = new AnimatorSet();</div><div class="line">animatorSet.play(translationY).before(alpha);</div><div class="line">animatorSet.setDuration(1000);</div><div class="line">animatorSet.start();</div></pre></td></tr></table></figure>
<p><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170613149733732652528.gif" alt="20170613149733732652528.gif"></p>
<h3 id="实现-1效果"><a href="#实现-1效果" class="headerlink" title="实现+1效果"></a>实现+1效果</h3><p>怎样实现+1的效果呢？可以考虑添加TextView，通过监听动画的状态实现对TextView显示状态的控制，查看一下运行效果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">final TextView tv = (TextView) findViewById(R.id.tv);</div><div class="line"></div><div class="line">        //translate动画</div><div class="line">        ObjectAnimator translationY = ObjectAnimator.ofFloat(tv, &quot;translationY&quot;, 0f, -100f);</div><div class="line">        //alpha动画</div><div class="line">        ObjectAnimator alpha = ObjectAnimator.ofFloat(tv, &quot;alpha&quot;, 1f, 0f);</div><div class="line">        alpha.addListener(new Animator.AnimatorListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationStart(Animator animation) &#123;</div><div class="line">                tv.setVisibility(View.VISIBLE);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onAnimationEnd(Animator animation) &#123;</div><div class="line">                tv.setVisibility(View.GONE);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onAnimationCancel(Animator animation) &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onAnimationRepeat(Animator animation) &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        AnimatorSet animatorSet = new AnimatorSet();</div><div class="line">        animatorSet.play(translationY).with(alpha);</div><div class="line">        animatorSet.setDuration(1000);</div><div class="line">        animatorSet.start();</div></pre></td></tr></table></figure>
<p><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170613149734463770366.gif" alt="20170613149734463770366.gif"></p>
<h3 id="封装成View"><a href="#封装成View" class="headerlink" title="封装成View"></a>封装成View</h3><p>考虑到后期的扩展性和可维护性，将上面这个动画封装成一个自定义View。</p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/Android进阶-2016-06-13-Android实现点赞效果.html">http://www.sguotao.com/Android进阶-2016-06-13-Android实现点赞效果.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近接到一个需求，需求中有个点赞动画的需求。决定使用属性动画的方式来实现。其实使用传统的动画，也可以实现相同的效果，出于传统动画会重复调用onDraw()方法进行绘制，可能会存在一些内存和性能的问题。&lt;/p&gt;
&lt;h3 id=&quot;添加平移动画&quot;&gt;&lt;a href=&quot;#添加平移动画
    
    </summary>
    
      <category term="Android进阶" scheme="http://www.sguotao.com/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android" scheme="http://www.sguotao.com/tags/Android/"/>
    
      <category term="动画" scheme="http://www.sguotao.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="代码库" scheme="http://www.sguotao.com/tags/%E4%BB%A3%E7%A0%81%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>分析Android中的Drawable Animation</title>
    <link href="http://www.sguotao.com/Android%E8%BF%9B%E9%98%B6-2016-05-19-%E5%88%86%E6%9E%90Android%E4%B8%AD%E7%9A%84Drawable-Animation.html"/>
    <id>http://www.sguotao.com/Android进阶-2016-05-19-分析Android中的Drawable-Animation.html</id>
    <published>2016-05-19T02:27:04.000Z</published>
    <updated>2017-07-13T09:57:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇中对Android传统动画中的View动画进行了一些整理，<a href="/Android%E8%BF%9B%E9%98%B6-2016-05-18-android-view-animation.html">Android动画分析一 View Animation</a> 在这一篇中，将对Android传统动画中的Drawable动画进行整理。什么是Drawable动画，Drawable动画是将一些列的Drawable资源一个接一个的播放，从而产生动画的效果，可以理解为是Frame Animation。</p>
<h2 id="Drawable-Animation"><a href="#Drawable-Animation" class="headerlink" title="Drawable Animation"></a>Drawable Animation</h2><p>这里介绍实现Drawable Animation的两种方式，一种是使用&lt;animation-list&gt;标签，一种是使用AnimationDrawable对象。</p>
<h3 id="Drawable动画的示例"><a href="#Drawable动画的示例" class="headerlink" title="Drawable动画的示例"></a>Drawable动画的示例</h3><p>在res/drawable目录下定义一个动画文件(<strong>注:不是res/anim目录</strong>)，文件的根节点是&lt;animation-list&gt;其中android:oneshot属性当值为true时,动画只执行一次，当值为false时，动画重复执行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:oneshot=&quot;false&quot;&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/upgrade_notification01&quot; android:duration=&quot;200&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/upgrade_notification02&quot; android:duration=&quot;200&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/upgrade_notification03&quot; android:duration=&quot;200&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/upgrade_notification04&quot; android:duration=&quot;200&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/upgrade_notification05&quot; android:duration=&quot;200&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/upgrade_notification06&quot; android:duration=&quot;200&quot; /&gt;</div><div class="line">&lt;/animation-list&gt;</div></pre></td></tr></table></figure>
<p>在Activity中处理的逻辑:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">ImageView imageView;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_test_view_animation);</div><div class="line"></div><div class="line">        imageView = (ImageView) this.findViewById(R.id.imageView);</div><div class="line">        Button mButton = (Button) this.findViewById(R.id.button);</div><div class="line"></div><div class="line">        mButton.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                AnimationDrawable drawableAnim = (AnimationDrawable) imageView.getBackground();</div><div class="line">                if (drawableAnim.isRunning()) &#123;</div><div class="line">                    drawableAnim.stop();</div><div class="line">                &#125; else &#123;</div><div class="line">                    drawableAnim.start();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="Drawable动画显示效果"><a href="#Drawable动画显示效果" class="headerlink" title="Drawable动画显示效果"></a>Drawable动画显示效果</h3><p>实现一个下载提示的动画:<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170531149619977711659.gif" alt="20170531149619977711659.gif"></p>
<h3 id="一点引申"><a href="#一点引申" class="headerlink" title="一点引申"></a>一点引申</h3><p>在实现Drawable动画过程中,做一点引申:</p>
<ol>
<li>定义的xml动画文件根元素是&lt;animation-list&gt;，存放在res/drawable目录，如果放在其他目录，会出现警告，但不影响正常的编译。</li>
<li>AnimationDrawable的start()方法不能够在Activity的onCreate()调用，因为这个时候，AnimationDrawable可能还没有绑定到Window上，如果想实现进入Activity后直接播放动画，可以在onWindowFocusChanged()方法里面调用，因为这个方法是在window已经获取到焦点之后回调的，可以保证已经绑定结束。</li>
<li>在ImageView设置动画时，需要区分&lt;ImageView&gt;的src属性和background属性，在这个示例中，如果使用src属性，会出现NPE异常。出现异常的原因与src属性的绘制时机有关。background属性是view的属性，Android系统提供的所有控件都有该属性，在View的onDraw之前，就已经被绘制。而src属性是ImageView的特有属性，在ImageView的onDraw()方法中才会被绘制。</li>
</ol>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://developer.android.com/guide/topics/graphics/drawable-animation.html" target="_blank" rel="external">drawable-animation</a></p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/Android进阶-2016-05-19-分析Android中的Drawable-Animation.html">http://www.sguotao.com/Android进阶-2016-05-19-分析Android中的Drawable-Animation.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一篇中对Android传统动画中的View动画进行了一些整理，&lt;a href=&quot;/Android%E8%BF%9B%E9%98%B6-2016-05-18-android-view-animation.html&quot;&gt;Android动画分析一 View Animation&lt;
    
    </summary>
    
      <category term="Android进阶" scheme="http://www.sguotao.com/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android" scheme="http://www.sguotao.com/tags/Android/"/>
    
      <category term="动画" scheme="http://www.sguotao.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="代码库" scheme="http://www.sguotao.com/tags/%E4%BB%A3%E7%A0%81%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>分析Android中的View Animation</title>
    <link href="http://www.sguotao.com/Android%E8%BF%9B%E9%98%B6-2016-05-18-%E5%88%86%E6%9E%90Android%E4%B8%AD%E7%9A%84View-Animation.html"/>
    <id>http://www.sguotao.com/Android进阶-2016-05-18-分析Android中的View-Animation.html</id>
    <published>2016-05-18T02:27:04.000Z</published>
    <updated>2017-07-13T10:00:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>在进行Android动画内容整理的时候，发现Android的动画有很多，如官方文档中直接给出的有Property Animation、View Animation、Drawable Animation，还有平时接触比较多的帧动画（Frame Animation）和补间动画（Tweened Animation）等，这些概念需要进行一下梳理。</p>
<p>Android的动画可以分为两类，传统动画和Android3.0之后出现的属性动画(Property Animation)，其中传统动画又包括帧动画(Frame Animation)和补间动画(Tweened Animation)，帧动画的工作原理，类似于动画片，将一个完成的动画拆分为一张张的图片，然后连起来进行播放；补间动画是对View进行的一系列操作，包括淡入淡出(Alpha)，缩放(Scale)，旋转(Rotate)和平移(Translate)。Drawable Animation是将一些列的Drawable资源一个接一个的播放，从而产生动画的效果，可以理解为是Frame Animation。类似的，View Animation可以理解为是Tweened Animation。用一张图来说明一下这几种动画之间的关系。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170518149509230136976.png" alt="20170518149509230136976.png"></p>
<h2 id="View-Animation"><a href="#View-Animation" class="headerlink" title="View Animation"></a>View Animation</h2><p>View Animation视图动画，只能作用在View上，完成一些基本的动画，淡入淡出，缩放，旋转和平移，以及这些基本动画的组合。视图动画的实现方式有两种，通常在res/anim目录下定义一个xml文件，xml的根元素可以是&lt;alpha&gt;、&lt;scale&gt;、&lt;rotate&gt;、&lt;translate&gt;及&lt;set&gt;。在&lt;set&gt;中定义了一个动画集，包括四种基本动画，也可以包括一个子&lt;set&gt;。另外一种方式，直接使用这些标签对应的Java类，也可以实现相同的效果。View Animation的类图如下所示。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170523149554073223859.png" alt="20170523149554073223859.png"><br>在介绍几种基本动画之前，先介绍一下动画的一些共有属性，四种基本动画除了继承了这些基本属性外，还有一些自身的属性，这些特有属性的介绍，会在每类动画介绍中做详细的说明。这些共有属性包括：</p>
<table>
<thead>
<tr>
<th style="text-align:center">XML Attribute</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">android:detachWallpaper</td>
<td style="text-align:center">设置是否在壁纸上运行，只对设置了壁纸背景的窗口动画(window animation)有效。设为true，则动画只在窗口运行，壁纸背景保持不变</td>
</tr>
<tr>
<td style="text-align:center">android:duration</td>
<td style="text-align:center">动画从开始到结束持续的时长，单位为毫秒</td>
</tr>
<tr>
<td style="text-align:center">android:fillAfter</td>
<td style="text-align:center">设置为true时，动画执行完后，View会停留在动画的最后一帧；默认为false；如果是动画集，需在&lt;set&gt;标签中设置该属性才有效</td>
</tr>
<tr>
<td style="text-align:center">android:fillBefore</td>
<td style="text-align:center">设置为true时，动画执行完后，View回到动画执行前的状态，默认即为true</td>
</tr>
<tr>
<td style="text-align:center">android:fillEnabled</td>
<td style="text-align:center">设置为true时，android:fillBefore的值才有效，否则android:fillBefore会被忽略</td>
</tr>
<tr>
<td style="text-align:center">android:interpolator</td>
<td style="text-align:center">设置动画速率的变化，比如加速、减速、匀速等，需要指定Interpolator资源</td>
</tr>
<tr>
<td style="text-align:center">android:repeatCount</td>
<td style="text-align:center">设置动画重复执行的次数，默认为0，即不重复；可设为-1或infinite，表示无限重复</td>
</tr>
<tr>
<td style="text-align:center">android:repeatMode</td>
<td style="text-align:center">设置动画重复执行的模式，可设为以下两个值其中之一：restart 动画重复执行时从起点开始，默认为该值;reverse 动画会反方向执行</td>
</tr>
<tr>
<td style="text-align:center">android:startOffset</td>
<td style="text-align:center">设置动画执行之前的等待时长，毫秒为单位；重复执行时，每次执行前同样也会等待一段时间</td>
</tr>
<tr>
<td style="text-align:center">android:zAdjustment</td>
<td style="text-align:center">表示被设置动画的内容在动画运行时在Z轴上的位置，取值为以下三个值之一：normal 默认值，保持内容在Z轴上的位置不变;top 保持在Z周最上层;bottom 保持在Z轴最下层</td>
</tr>
</tbody>
</table>
<h2 id="lt-alpha-gt-淡入淡出"><a href="#lt-alpha-gt-淡入淡出" class="headerlink" title="&lt;alpha&gt;(淡入淡出)"></a>&lt;alpha&gt;(淡入淡出)</h2><p>&lt;alpha&gt;可以实现淡入淡出的渐变效果。</p>
<h3 id="alpha动画属性"><a href="#alpha动画属性" class="headerlink" title="alpha动画属性"></a>alpha动画属性</h3><p>对应AlphaAnimation，alpha动画有两个特有的属性：</p>
<table>
<thead>
<tr>
<th style="text-align:center">XML Attribute</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">android:fromAlpha</td>
<td style="text-align:center">动画开始时的透明度，0.0为全透明，1.0为不透明，默认为1.0</td>
</tr>
<tr>
<td style="text-align:center">android:toAlpha</td>
<td style="text-align:center">动画结束时的透明度，0.0为全透明，1.0为不透明，默认为1.0</td>
</tr>
</tbody>
</table>
<h3 id="alpha动画构造方法"><a href="#alpha动画构造方法" class="headerlink" title="alpha动画构造方法"></a>alpha动画构造方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 需要在res中定义属性集(不常使用）</div><div class="line"> * @param context 上下文</div><div class="line"> * @param attrs 属性集</div><div class="line"> */</div><div class="line">public AlphaAnimation(Context context, AttributeSet attrs)</div><div class="line"></div><div class="line">/**</div><div class="line"> * 在构造法方法中指定动画开始和结束时的透明度(常用方法)</div><div class="line"> * @param fromAlpha 动画开始时的透明度</div><div class="line"> * @param toAlpha 动画结束时的透明度</div><div class="line"> */</div><div class="line">public AlphaAnimation(float fromAlpha, float toAlpha)</div></pre></td></tr></table></figure>
<h3 id="alpha动画示例"><a href="#alpha动画示例" class="headerlink" title="alpha动画示例"></a>alpha动画示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">final ImageView imageView = (ImageView) this.findViewById(R.id.imageView);</div><div class="line">Button mButton = (Button) this.findViewById(R.id.button);</div><div class="line"></div><div class="line">final AlphaAnimation alphaAnimation = new AlphaAnimation(0.0f,1.0f);</div><div class="line">alphaAnimation.setDuration(3000);</div><div class="line"></div><div class="line">mButton.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">    @Override</div><div class="line">    public void onClick(View v) &#123;</div><div class="line">        imageView.startAnimation(alphaAnimation);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170523149551118671554.gif" alt="20170523149551118671554.gif"></p>
<h2 id="lt-scale-gt-缩放"><a href="#lt-scale-gt-缩放" class="headerlink" title="&lt;scale&gt;(缩放)"></a>&lt;scale&gt;(缩放)</h2><p>&lt;scale&gt;可以实现缩放的效果。</p>
<h3 id="scale动画属性"><a href="#scale动画属性" class="headerlink" title="scale动画属性"></a>scale动画属性</h3><p>对应ScaleAnimation，scale动画有以下的特有属性：</p>
<table>
<thead>
<tr>
<th style="text-align:center">XML Attribute</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">fromX</td>
<td style="text-align:center">动画开始时X坐标上的缩放尺寸，0.0表示缩放到没有，1.0表示正常无缩放，小于1.0表示收缩，大于1.0表示放大</td>
</tr>
<tr>
<td style="text-align:center">toX</td>
<td style="text-align:center">动画结束时X坐标上的缩放尺寸，0.0表示缩放到没有，1.0表示正常无缩放，小于1.0表示收缩，大于1.0表示放大</td>
</tr>
<tr>
<td style="text-align:center">fromY</td>
<td style="text-align:center">动画开始时Y坐标上的缩放尺寸，0.0表示缩放到没有，1.0表示正常无缩放，小于1.0表示收缩，大于1.0表示放大</td>
</tr>
<tr>
<td style="text-align:center">toY</td>
<td style="text-align:center">动画结束时Y坐标上的缩放尺寸，0.0表示缩放到没有，1.0表示正常无缩放，小于1.0表示收缩，大于1.0表示放大</td>
</tr>
<tr>
<td style="text-align:center">pivotX</td>
<td style="text-align:center">缩放动画相对的固定点X坐标</td>
</tr>
<tr>
<td style="text-align:center">pivotY</td>
<td style="text-align:center">缩放动画相对的固定点Y坐标</td>
</tr>
<tr>
<td style="text-align:center">pivotXType</td>
<td style="text-align:center">缩放动画相对的固定点X坐标位置类型，取值为以下三个值之一：Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT</td>
</tr>
<tr>
<td style="text-align:center">pivotXValue</td>
<td style="text-align:center">缩放动画相对的固定点X坐标的位置，与pivotXType相关</td>
</tr>
<tr>
<td style="text-align:center">pivotYType</td>
<td style="text-align:center">缩放动画相对的固定点Y坐标位置类型，取值为以下三个值之一：Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT</td>
</tr>
<tr>
<td style="text-align:center">pivotYValue</td>
<td style="text-align:center">缩放动画相对的固定点Y坐标的位置，与pivotYType相关</td>
</tr>
</tbody>
</table>
<h3 id="scale动画构造方法"><a href="#scale动画构造方法" class="headerlink" title="scale动画构造方法"></a>scale动画构造方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 自定义动画时需要重写的方法</div><div class="line"> * @param context 上下文</div><div class="line"> * @param attrs 属性集</div><div class="line"> */</div><div class="line">public ScaleAnimation(Context context, AttributeSet attrs)</div><div class="line"></div><div class="line">/**</div><div class="line"> *</div><div class="line"> * @param fromX 动画开始时X坐标上的缩放尺寸</div><div class="line"> * @param toX 动画结束时X坐标上的缩放尺寸</div><div class="line"> * @param fromY 动画开始时Y坐标上的缩放尺寸</div><div class="line"> * @param toY 动画结束时Y坐标上的缩放尺寸</div><div class="line"> */</div><div class="line">public ScaleAnimation(float fromX, float toX, float fromY, float toY)</div><div class="line"></div><div class="line">/**</div><div class="line"> * 指定一个固定点,进行动画,固定点的坐标是(pivotX,pivotY)</div><div class="line"> * 第二个构造方法默认固定点的坐标是(0,0),即动画view的的左上角</div><div class="line"> * </div><div class="line"> * @param fromX 动画开始时X坐标上的缩放尺寸</div><div class="line"> * @param toX 动画结束时X坐标上的缩放尺寸</div><div class="line"> * @param fromY 动画开始时Y坐标上的缩放尺寸</div><div class="line"> * @param toY 动画结束时Y坐标上的缩放尺寸</div><div class="line"> * @param pivotX 固定点的X坐标坐标,取值为0时表示动画view的左边沿</div><div class="line"> * @param pivotY 固定点的Y坐标坐标,取值为0时表示动画view的上边沿</div><div class="line"> */</div><div class="line">public ScaleAnimation(float fromX, float toX, float fromY, float toY,</div><div class="line">                      float pivotX, float pivotY)</div><div class="line"></div><div class="line">/**</div><div class="line"> * 通过pivotXType,pivotXValue,pivotYType和pivotYValue确定一个固定点进行动画</div><div class="line"> * 第三个构造方法中,固定点默认的位置类型(pivotXType、pivotYType)为 Animation.ABSOLUTE</div><div class="line"> * </div><div class="line"> * @param fromX 动画开始时X坐标上的缩放尺寸</div><div class="line"> * @param toX 动画结束时X坐标上的缩放尺寸</div><div class="line"> * @param fromY 动画开始时Y坐标上的缩放尺寸</div><div class="line"> * @param toY 动画结束时Y坐标上的缩放尺寸</div><div class="line"> * @param pivotXType 固定点X坐标位置的类型,取值范围(Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT.)</div><div class="line"> * @param pivotXValue 固定点X坐标坐标,位置与pivotXType有关</div><div class="line"> * @param pivotYType 固定点Y坐标位置的类型,取值范围(Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT.)</div><div class="line"> * @param pivotYValue 固定点Y坐标坐标,位置与pivotYType有关</div><div class="line"> */</div><div class="line">public ScaleAnimation(float fromX, float toX, float fromY, float toY,</div><div class="line">                      int pivotXType, float pivotXValue, int pivotYType, float pivotYValue)</div></pre></td></tr></table></figure>
<p>这里有必要对这几个构造方法进行一些说明：</p>
<ol>
<li>第二个构造方法public ScaleAnimation(float fromX, float toX, float fromY, float toY)固定点的默认坐标是(0,0)，即要发生动画view的左上角，通过该构造方法创建的缩放动画，都是相对于该固定点进行的。</li>
<li>第三个构造方法public ScaleAnimation(float fromX, float toX, float fromY, float toY,float pivotX, float pivotY)固定点的坐标可以指定为(pivotX,pivotY),即相对于发生动画view的左上角距离(pivotX,pivotY)的位置，通过该构造方法创建的缩放动画,都是相对这个指定的点进行的。</li>
<li>第四个构造方法public ScaleAnimation(float fromX, float toX, float fromY, float toY,int pivotXType, float pivotXValue, int pivotYType, float pivotYValue)对固定点位置的确定有了更多的方式，固定点位置的确定主要与pivotXType, pivotXValue, pivotYType, pivotYValue这四个值有关。通常pivotXType和pivotYType的值都指定为同一种类型。</li>
</ol>
<ul>
<li>当pivotXType和pivotYType为Animation. ABSOLUTE时，与第三个构造方法效果相同，即第三个构造方法默认的pivotXType和pivotYType为Animation. ABSOLUTE。</li>
<li>当pivotXType和pivotYType为Animation.RELATIVE_TO_SELF，固定点的位置相对于动画view，固定点的坐标为(width*pivotXValue,height*pivotYValue),其中width为动画view的宽，height为动画view的高。</li>
<li>当pivotXType和pivotYType为Animation.RELATIVE_TO_PARENT，固定点的位置相对于动画view的父容器view，固定点的坐标为(parentWidth*pivotXValue,parentHeight*pivotYValue),其中parentWidth为父容器view的宽，parentHeight为父容器的高。</li>
</ul>
<h3 id="scale动画示例"><a href="#scale动画示例" class="headerlink" title="scale动画示例"></a>scale动画示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//固定点位置相对于imageview,固定点坐标为imageview的中心</div><div class="line">        final ScaleAnimation scaleAnimation = new ScaleAnimation(0.5f, 1.0f, 0.5f, 1.0f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);</div><div class="line">        scaleAnimation.setDuration(3000);</div><div class="line">        scaleAnimation.setFillAfter(true);//动画结束时,保持结束的位置不变</div><div class="line">        mButton.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                imageView.startAnimation(scaleAnimation);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170523149553277096247.gif" alt="20170523149553277096247.gif"></p>
<h2 id="lt-rotate-gt-旋转"><a href="#lt-rotate-gt-旋转" class="headerlink" title="&lt;rotate&gt;(旋转)"></a>&lt;rotate&gt;(旋转)</h2><p>&lt;rotate&gt;可以实现旋转的效果。</p>
<h3 id="rotate动画属性"><a href="#rotate动画属性" class="headerlink" title="rotate动画属性"></a>rotate动画属性</h3><p>对应RotateAnimation，rotate动画有以下的特有属性：</p>
<table>
<thead>
<tr>
<th style="text-align:center">XML Attribute</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">fromDegrees</td>
<td style="text-align:center">旋转开始的角度，旋转角度从0到360</td>
</tr>
<tr>
<td style="text-align:center">toDegrees</td>
<td style="text-align:center">旋转结束的角度，旋转角度从0到360</td>
</tr>
<tr>
<td style="text-align:center">pivotX</td>
<td style="text-align:center">旋转中心相对的X坐标</td>
</tr>
<tr>
<td style="text-align:center">pivotY</td>
<td style="text-align:center">旋转中心相对的Y坐标</td>
</tr>
<tr>
<td style="text-align:center">pivotXType</td>
<td style="text-align:center">旋转动画中心X坐标位置类型，取值为以下三个值之一：Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT</td>
</tr>
<tr>
<td style="text-align:center">pivotXValue</td>
<td style="text-align:center">旋转动画中心X坐标的位置，与pivotXType相关</td>
</tr>
<tr>
<td style="text-align:center">pivotYType</td>
<td style="text-align:center">旋转动画中心Y坐标位置类型，取值为以下三个值之一：Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT</td>
</tr>
<tr>
<td style="text-align:center">pivotYValue</td>
<td style="text-align:center">旋转动画中心Y坐标的位置，与pivotYType相关</td>
</tr>
</tbody>
</table>
<h3 id="rotate动画构造方法"><a href="#rotate动画构造方法" class="headerlink" title="rotate动画构造方法"></a>rotate动画构造方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * </div><div class="line"> * @param context</div><div class="line"> * @param attrs</div><div class="line"> */</div><div class="line">public RotateAnimation(Context context, AttributeSet attrs)</div><div class="line"></div><div class="line">/**</div><div class="line"> * 旋转中心的位置(0,0)</div><div class="line"> * @param fromDegrees 旋转动画开始角度</div><div class="line"> * @param toDegrees 旋转动画结束角度</div><div class="line"> */</div><div class="line">public RotateAnimation(float fromDegrees, float toDegrees)</div><div class="line"></div><div class="line">/**</div><div class="line"> * 旋转中心相对(0,0)的位置(pivotX,pivotY)</div><div class="line"> * @param fromDegrees 旋转动画开始角度</div><div class="line"> * @param toDegrees 旋转动画结束角度</div><div class="line"> * @param pivotX 旋转中心x坐标</div><div class="line"> * @param pivotY 旋转中心y坐标</div><div class="line"> */</div><div class="line">public RotateAnimation(float fromDegrees, float toDegrees, float pivotX, float pivotY)</div><div class="line"></div><div class="line">/**</div><div class="line"> * 通过pivotXType,pivotXValue,pivotYType和pivotYValue确定旋转中心</div><div class="line"> * @param fromDegrees 旋转动画开始角度</div><div class="line"> * @param toDegrees 旋转动画结束角度</div><div class="line"> * @param pivotXType 旋转动画中心x坐标位置类型,取值范围(Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT.)</div><div class="line"> * @param pivotXValue 旋转动画中心x坐标的位置,与pivotXType相关</div><div class="line"> * @param pivotYType 旋转中心y坐标位置类型,取值范围(Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT.)</div><div class="line"> * @param pivotYValue 旋转动画中心y坐标的位置,与pivotYType相关</div><div class="line"> */</div><div class="line">public RotateAnimation(float fromDegrees, float toDegrees, int pivotXType, float pivotXValue,</div><div class="line">                       int pivotYType, float pivotYValue)</div></pre></td></tr></table></figure>
<h3 id="rotate动画示例"><a href="#rotate动画示例" class="headerlink" title="rotate动画示例"></a>rotate动画示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">final ImageView imageView = (ImageView) this.findViewById(R.id.imageView);</div><div class="line">Button mButton = (Button) this.findViewById(R.id.button);</div><div class="line"></div><div class="line">final RotateAnimation rotateAnimation = new RotateAnimation(0, 360, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);</div><div class="line">rotateAnimation.setDuration(3000);</div><div class="line">rotateAnimation.setFillAfter(true);//动画结束时,保持结束的位置不变</div><div class="line">mButton.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">    @Override</div><div class="line">    public void onClick(View v) &#123;</div><div class="line">        imageView.startAnimation(rotateAnimation);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170523149553531557978.gif" alt="20170523149553531557978.gif"></p>
<h2 id="lt-translate-gt-平移"><a href="#lt-translate-gt-平移" class="headerlink" title="&lt;translate&gt;(平移)"></a>&lt;translate&gt;(平移)</h2><p>&lt;translate&gt;可以实现平移的动画效果。</p>
<h3 id="translate动画属性"><a href="#translate动画属性" class="headerlink" title="translate动画属性"></a>translate动画属性</h3><p>对应TranslateAnimation，translate动画有以下特有的属性：</p>
<table>
<thead>
<tr>
<th style="text-align:center">XML Attribute</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">fromXDelta</td>
<td style="text-align:center">平移动画开始点X坐标</td>
</tr>
<tr>
<td style="text-align:center">toXDelta</td>
<td style="text-align:center">平移动画结束点X坐标</td>
</tr>
<tr>
<td style="text-align:center">fromYDelta</td>
<td style="text-align:center">平移动画开始点Y坐标</td>
</tr>
<tr>
<td style="text-align:center">toYDelta</td>
<td style="text-align:center">平移动画结束点Y坐标</td>
</tr>
<tr>
<td style="text-align:center">fromXType</td>
<td style="text-align:center">平移动画开始点X坐标位置类型，取值为以下三个值之一：Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT</td>
</tr>
<tr>
<td style="text-align:center">fromXValue</td>
<td style="text-align:center">平移动画开始点X坐标位置，与fromXType有关</td>
</tr>
<tr>
<td style="text-align:center">toXType</td>
<td style="text-align:center">平移动画结束点X坐标位置类型，取值为以下三个值之一：Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT</td>
</tr>
<tr>
<td style="text-align:center">toXValue</td>
<td style="text-align:center">平移动画结束点X坐标位置，与toXType有关</td>
</tr>
<tr>
<td style="text-align:center">fromYType</td>
<td style="text-align:center">平移动画开始点Y坐标位置类型，取值为以下三个值之一：Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT</td>
</tr>
<tr>
<td style="text-align:center">fromYValue</td>
<td style="text-align:center">平移动画开始点坐标位置，与fromYType有关</td>
</tr>
<tr>
<td style="text-align:center">toYType</td>
<td style="text-align:center">平移动画结束点Y坐标位置类型，取值为以下三个值之一：Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT</td>
</tr>
<tr>
<td style="text-align:center">toYValue</td>
<td style="text-align:center">平移动画结束点坐标位置，与toYType有关</td>
</tr>
</tbody>
</table>
<h3 id="translate动画构造方法"><a href="#translate动画构造方法" class="headerlink" title="translate动画构造方法"></a>translate动画构造方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * </div><div class="line"> * @param context 上下文</div><div class="line"> * @param attrs 属性集</div><div class="line"> */</div><div class="line">public TranslateAnimation(Context context, AttributeSet attrs)</div><div class="line"></div><div class="line">/**</div><div class="line"> * 平移动画的起点位置和结束位置坐标都是相对于(0,0)即动画view的左上角.</div><div class="line"> * @param fromXDelta </div><div class="line"> * @param toXDelta</div><div class="line"> * @param fromYDelta</div><div class="line"> * @param toYDelta</div><div class="line"> */</div><div class="line">public TranslateAnimation(float fromXDelta, float toXDelta, float fromYDelta, float toYDelta)</div><div class="line"></div><div class="line">/**</div><div class="line"> * 通过构造参数确定平移动画的起始位置和结束位置的坐标</div><div class="line"> * </div><div class="line"> * @param fromXType 开始点x坐标位置类型,取值范围(Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT.)</div><div class="line"> * @param fromXValue 开始点x坐标位置,与fromXType有关</div><div class="line"> * @param toXType 结束点x坐标类型,取值范围(Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT.)</div><div class="line"> * @param toXValue 结束点x坐标位置,与toXType有关</div><div class="line"> * @param fromYType 开始点y坐标类型,取值范围(Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT.)</div><div class="line"> * @param fromYValue 开始点y坐标位置,与fromYType有关</div><div class="line"> * @param toYType 结束点y坐标类型,取值范围(Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT.)</div><div class="line"> * @param toYValue 结束点y坐标类型,与toYType有关</div><div class="line"> */</div><div class="line">public TranslateAnimation(int fromXType, float fromXValue, int toXType, float toXValue,</div><div class="line">                          int fromYType, float fromYValue, int toYType, float toYValue)</div></pre></td></tr></table></figure>
<h3 id="translate动画示例"><a href="#translate动画示例" class="headerlink" title="translate动画示例"></a>translate动画示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">final TranslateAnimation translateAnimation = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 1.0f,</div><div class="line">    Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 1.0f);</div><div class="line">translateAnimation.setDuration(3000);</div><div class="line">translateAnimation.setFillAfter(true);//动画结束时,保持结束的位置不变</div><div class="line">mButton.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">    @Override</div><div class="line">    public void onClick(View v) &#123;</div><div class="line">        imageView.startAnimation(translateAnimation);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170523149553593494120.gif" alt="20170523149553593494120.gif"></p>
<h2 id="lt-set-gt-动画集"><a href="#lt-set-gt-动画集" class="headerlink" title="&lt;set&gt;动画集"></a>&lt;set&gt;动画集</h2><p>&lt;set&gt;是一系列动画的集合，对应AnimationSet,可以实现一些动画的组合。在AnimationSet的构造方法中，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * Constructor to use when building an AnimationSet from code</div><div class="line">    * </div><div class="line">    * @param shareInterpolator Pass true if all of the animations in this set</div><div class="line">    *        should use the interpolator associated with this AnimationSet.</div><div class="line">    *        Pass false if each animation should use its own interpolator.</div><div class="line">    */</div><div class="line">   public AnimationSet(boolean shareInterpolator) &#123;</div><div class="line">       setFlag(PROPERTY_SHARE_INTERPOLATOR_MASK, shareInterpolator);</div><div class="line">       init();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>当使用代码方式创建动画集时，需要使用到这个构造方法，构造方法需要一个boolean值，当为true时，动画集中的动画使用animationSet的插值器，当为false时，使用每个动画自己的插值器。这里有一个问题，什么是插值器？</p>
<h3 id="Interpolator"><a href="#Interpolator" class="headerlink" title="Interpolator"></a>Interpolator</h3><p>在Android API 11以前，插值器是Interpolator的直接翻译过来的名称，在Android API 11以后，加入了TimeInterpolator接口。什么是插值器？插值器定义了动画的运行轨迹，如加速和减速等。粗略统计了一下，Android API中关于插值器的接口，抽象类和实现类大概有16个，为了清晰的理解这些接口和类的关系，先抛出一张类图。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170527149586916399293.png" alt="20170527149586916399293.png"><br>这么多的实现类，每个插值器实现类的作用是什么？区别又是什么？在TimeInterpolator接口中声明了一个方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * Maps a value representing the elapsed fraction of an animation to a value that represents</div><div class="line">     * the interpolated fraction. This interpolated value is then multiplied by the change in</div><div class="line">     * value of an animation to derive the animated value at the current elapsed animation time.</div><div class="line">     *</div><div class="line">     * @param input A value between 0 and 1.0 indicating our current point</div><div class="line">     *        in the animation where 0 represents the start and 1.0 represents</div><div class="line">     *        the end</div><div class="line">     * @return The interpolation value. This value can be more than 1.0 for</div><div class="line">     *         interpolators which overshoot their targets, or less than 0 for</div><div class="line">     *         interpolators that undershoot their targets.</div><div class="line">     */</div><div class="line">    float getInterpolation(float input);</div></pre></td></tr></table></figure>
<p>该函数将当前动画运行的点input映射到一个插值函数中。不同的插值器实现类，对应这不同的插值函数。比如在插值器AccelerateInterpolator中，对应的插值函数是一个抛物线。抛物线的斜率跟mFactor参数有关，mFactor的值越大，抛物线的曲率越大。对应的动画效果是开始阶段动画比较慢，此后会越来越快。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public float getInterpolation(float input) &#123;</div><div class="line">        if (mFactor == 1.0f) &#123;</div><div class="line">            return input * input;</div><div class="line">        &#125; else &#123;</div><div class="line">            return (float)Math.pow(input, mDoubleFactor);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>对一些插值器的效果进行一个简单的描述，具体的运动效果，与对应的插值函数有关。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170527149587798346557.png" alt="20170527149587798346557.png"></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://developer.android.com/guide/topics/graphics/prop-animation.html" target="_blank" rel="external">prop-animation</a><br><a href="https://developer.android.com/guide/topics/graphics/view-animation.html" target="_blank" rel="external">view animation</a><br><a href="https://developer.android.com/guide/topics/graphics/drawable-animation.html" target="_blank" rel="external">drawable-animation</a><br><a href="https://developer.android.com/reference/android/view/animation/Animation.html" target="_blank" rel="external">Animation</a><br><a href="https://developer.android.com/reference/android/view/animation/AlphaAnimation.html" target="_blank" rel="external">AlphaAnimation</a><br><a href="https://developer.android.com/reference/android/view/animation/RotateAnimation.html" target="_blank" rel="external">RotateAnimation</a><br><a href="https://developer.android.com/reference/android/view/animation/ScaleAnimation.html" target="_blank" rel="external">ScaleAnimation</a><br><a href="https://developer.android.com/reference/android/view/animation/TranslateAnimation.html" target="_blank" rel="external">TranslateAnimation</a><br><a href="https://developer.android.com/reference/android/view/animation/AnimationSet.html" target="_blank" rel="external">AnimationSet</a><br><a href="https://my.oschina.net/banxi/blog/135633" target="_blank" rel="external">android动画（一）Interpolator</a></p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/Android进阶-2016-05-18-分析Android中的View-Animation.html">http://www.sguotao.com/Android进阶-2016-05-18-分析Android中的View-Animation.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在进行Android动画内容整理的时候，发现Android的动画有很多，如官方文档中直接给出的有Property Animation、View Animation、Drawable Animation，还有平时接触比较多的帧动画（Frame Animation）和补间动画（
    
    </summary>
    
      <category term="Android进阶" scheme="http://www.sguotao.com/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android" scheme="http://www.sguotao.com/tags/Android/"/>
    
      <category term="动画" scheme="http://www.sguotao.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="代码库" scheme="http://www.sguotao.com/tags/%E4%BB%A3%E7%A0%81%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>和光同尘，静水流深</title>
    <link href="http://www.sguotao.com/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F-2016-05-09-getdown-to-my-work.html"/>
    <id>http://www.sguotao.com/生活感悟-2016-05-09-getdown-to-my-work.html</id>
    <published>2016-05-08T09:00:00.000Z</published>
    <updated>2017-06-02T10:39:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>北京时间，2016年5月1日，完成了自己人生中一件非常重要的事情，我结婚了，当自己去看婚礼视频的时候，那因紧张而僵硬的表情，在大方自如的媳妇面前，感觉是那么的不协调，我对自己说，我是多么的幸运，能遇到这样的女孩，同时，我也感到一份支撑，一种依靠。2016，我不再单打独斗了。</p>
<p>总想快速从结婚的喜悦中调整到繁忙的工作中来，2016年，对于公司也是非常重要的一年，能成为其中的一员，见证公司和自己的成长，我想着本身也是一种缘分，希望自己能在2016年剩下的日子里，看到自己持续的成长。</p>
<p>今天看到一篇博客，其中的一些文字，让自己感触很深：</p>
<ol>
<li>好奇心比雄心走得更远：很多人对未来空有满腔的雄心壮志，往往不如对技术要有一份好奇心，一份探索欲，再加上一份执着的人。</li>
<li>要有open的心态：曾经的我也只是把自己的所思所得都放入自己的云笔记，很少整理，这其实不利于技术发展，有空应该多整理自己零散的知识点，觉得不错的点可以拿出来写成博客，那是对能力的又一层提升。另外，在低头做技术的同时，还应该有空抬头看世界，不能闭门造车。</li>
<li>天道酬勤：学历只能代表过去，能力代表现在，潜力代表未来！ 你不把自己逼一把，你压根不知道自己有多优秀，只要努力去学习，去挖掘潜力，进而提升自我技术修为，未来不再是梦！共勉之！</li>
</ol>
<p>解决问题的方式：遇到问题，一定要先尝试自己解决，解决不了再请教他人。这是对自己的一个锻炼，也是对他人的一个尊重，可以有多种途径自行搜索：</p>
<ol>
<li>百度一下，很多时候还是能有所帮助的，不要过分强调google，完全抛弃百度，毕竟中文看起来比较快；</li>
<li>先中文关键词google一下；再英文关键词google一下；</li>
<li>stackoverflow.com、知乎等技术问答网站内直接搜索；</li>
<li>查看官方文档；</li>
<li>如果有源码，尝试直接看源码，看能否解决；</li>
<li>有空可以多逛逛github，多看看Google官方文档，多关注社区，定会收获不少；</li>
</ol>
<p>当然，最最重要的是<strong>能静得下心，持之以恒地专研技术</strong>。</p>
<p>以前，自己总是用“和光同尘，静水流深”来勉励自己，现在更加觉着这句话的重要。浮躁是在自己这个年纪，甚至是现在这个社会，比较普遍的现象。希望自己不要眼高手低，脚踏实地的走好现在的路，低调做人，高调做事。</p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/生活感悟-2016-05-09-getdown-to-my-work.html">http://www.sguotao.com/生活感悟-2016-05-09-getdown-to-my-work.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;北京时间，2016年5月1日，完成了自己人生中一件非常重要的事情，我结婚了，当自己去看婚礼视频的时候，那因紧张而僵硬的表情，在大方自如的媳妇面前，感觉是那么的不协调，我对自己说，我是多么的幸运，能遇到这样的女孩，同时，我也感到一份支撑，一种依靠。2016，我不再单打独斗了。
    
    </summary>
    
      <category term="生活感悟" scheme="http://www.sguotao.com/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="生活" scheme="http://www.sguotao.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>【读书笔记】解忧杂货店</title>
    <link href="http://www.sguotao.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2016-02-20-%E8%A7%A3%E5%BF%A7%E6%9D%82%E8%B4%A7%E5%BA%97.html"/>
    <id>http://www.sguotao.com/读书笔记-2016-02-20-解忧杂货店.html</id>
    <published>2016-02-20T04:00:00.000Z</published>
    <updated>2017-06-08T10:37:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>真的要到很久之后，才会明白，每一个选择只要努力过，都是正确的选择。</p>
</blockquote>
<a id="more"></a>
<p>几个看似独立的故事，互相都存在羁绊，让人觉着这是发生在小镇里一个个普普通通的故事，但正式因为平凡，才有撼动人心的力量。</p>
<h2 id="回答在牛奶箱里"><a href="#回答在牛奶箱里" class="headerlink" title="回答在牛奶箱里"></a>回答在牛奶箱里</h2><p>深爱的男友身患绝症，年轻的女孩在爱情和梦想间徘徊。</p>
<blockquote>
<p>有一天，我对他说：<br>“我比任何人都爱你，想要永远和你在一起，如果我放弃比赛就能让你好起来，我会毫不犹豫地放弃。但如果不是这样，我希望坚持我对梦想。因为一直以来追寻着梦想，我才活出了自我，而你喜欢的也正是这样的我。我没有一刻忘记过你，但请让我去追逐梦想吧。”<br>听完这番话，病床上的他流下泪来。他对我说：<br>“我早就在等你这句话了。看到你为了我而烦恼，我很难过。让深爱的人放弃梦想，这比死还让我痛苦。即使分隔两地，我们的心也会永远在一起。你不要有任何顾虑，我希望你无怨无悔地去追寻梦想。”</p>
</blockquote>
<p>年轻女孩找到了阅读自己地图的方法，从那天起，她不再迷茫，重新投身到训练中，因为她明白，陪伴在他身边并不是照顾他的唯一方式。深爱的男友还是离开了人世，但女孩从他临终时满足的表情，和那句“谢谢你带给我的梦想”，得到了更有价值的东西。</p>
<h2 id="深夜的口琴声"><a href="#深夜的口琴声" class="headerlink" title="深夜的口琴声"></a>深夜的口琴声</h2><p>克郎为了音乐梦想离家漂泊，却在现实中寸步难行。</p>
<blockquote>
<p>你对音乐的执着追求，绝不是白白付出。<br>我相信，将会有人因为你的歌而得到救赎。你创作的音乐也必将流传下去。<br>请你始终坚信这一点，坚信到生命最后一刻。</p>
</blockquote>
<p>当克朗扛着少年在火力奔跑，他自己也不知道往哪儿跑，红光与黑暗，同时将他包围。在他生命最后一刻，仍要坚持相信。这里我看到的不是为了梦想的执着坚持，打动我的反而是父亲的支持。我们焦虑，是因为我们找不到问题的答案，徘徊在是与非的选择上，其实，每一个选择只要努力过，都是正确的选择。</p>
<h2 id="在思域车上等到天亮"><a href="#在思域车上等到天亮" class="headerlink" title="在思域车上等到天亮"></a>在思域车上等到天亮</h2><p>绿河怀了有妇之夫的孩子，为应该生下来还是堕胎而纠结。</p>
<blockquote>
<p>虽然至今为止的道路绝非一片坦途，但想到正因为活着才有机会感受到痛楚，我就成功克服了种种恐惧。</p>
</blockquote>
<h2 id="听着披头士默祷"><a href="#听着披头士默祷" class="headerlink" title="听着披头士默祷"></a>听着披头士默祷</h2><p>少年浩介面临家庭巨变，挣扎在亲情与未来的迷茫中。<br>人与人之间情断义绝，并不需要什么具体的理由。就算表面上有，也很可能只是心离开的结果，事后才编造出的借口而已。因为倘若心没有离开，当将会导致关系破裂的事态发生时，理应有人努力去挽救。如果没有，说明其实关系早已破裂。</p>
<blockquote>
<p>关于家人，除了积极向上的旅行，家人应该尽可能在一起。因为反感、厌倦等理由而离开，不是家人应有的姿态。<br>无论现在多么不开心，你要相信，明天会比今天更好。</p>
</blockquote>
<h2 id="来自天上的祈祷"><a href="#来自天上的祈祷" class="headerlink" title="来自天上的祈祷"></a>来自天上的祈祷</h2><blockquote>
<p>如果把来找我咨询的人比喻成迷途的羔羊，通常他们手上都有地图，却没有去看，或是不知道自己目前的位置。但我相信你不属于这两种情况。你的地图是一张白纸，所以即使想决定目的地，也不知道路在哪里。地图是一张白纸，这当然很伤脑筋。任何人都会不知所措。可是换个角度来看，正因为是一张白纸，才可以随心所欲地描绘地图。一切全在你自己。对你来说，一切都是自由的，在你面前是无限的可能。这可是很棒的事啊。我衷心祈祷你可以相信自己，无悔地燃烧自己的人生。</p>
</blockquote>
<p>这是浪矢杂货店最后的一封回信，不知道是不是初为人父的关系，看到这里，想到了四个月大，能冲我咿咿呀呀的女儿，我想，上面似乎也是我想对女儿说的话。就像希拉里说的一样“我第一次成为你的母亲，你第一次成为我的女儿，让我们彼此关照，共同成长”。如果将来的某一天，女儿也像小说中的人物，在人生的十字路口，不知道该何去何从时，我能否像浪矢杂货店的爷爷一样，告诉她看地图的方式。我多想告诉她，要到很久之后，你就会明白，每一个选择只要努力过，都是正确的选择。</p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/读书笔记-2016-02-20-解忧杂货店.html">http://www.sguotao.com/读书笔记-2016-02-20-解忧杂货店.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;真的要到很久之后，才会明白，每一个选择只要努力过，都是正确的选择。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://www.sguotao.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://www.sguotao.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="解忧杂货店" scheme="http://www.sguotao.com/tags/%E8%A7%A3%E5%BF%A7%E6%9D%82%E8%B4%A7%E5%BA%97/"/>
    
  </entry>
  
</feed>
