<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Scott-小白</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.sguotao.com/"/>
  <updated>2017-04-27T02:48:27.000Z</updated>
  <id>http://www.sguotao.com/</id>
  
  <author>
    <name>Scott</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android内存泄露</title>
    <link href="http://www.sguotao.com//blog/2017/03/Android%E8%BF%9B%E9%98%B6-2017-03-24-android-memory-leak.html"/>
    <id>http://www.sguotao.com//blog/2017/03/Android进阶-2017-03-24-android-memory-leak.html</id>
    <published>2017-03-24T02:27:04.000Z</published>
    <updated>2017-04-27T02:48:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内存泄露与内存溢出"><a href="#内存泄露与内存溢出" class="headerlink" title="内存泄露与内存溢出"></a>内存泄露与内存溢出</h2><h3 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h3><p>内存泄露(Memory Leak)是指无用对象（不再使用的对象）持续占有内存，或者无用对象的内存得不到及时释放，从而造成内存空间得不到有效的利用。在Java中，内存泄露的原因，通常是长生命周期的对象，持有短生命周期对象的引用。在《深入理解Java虚拟机》中的解释是，当无用对象一直被有用对象引用，导致无用对象可达，JVM无法对无用对象完成回收。从而造成内存泄露。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170327149058275225194.png" alt="内存泄露"></p>
<h3 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h3><p>内存溢出(Out of Memory)是指程序在运行过程中，无法申请到足够的的内存导致的一种错误。内存泄露是会导致内存溢出，但不是导致内存溢出的唯一原因。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170327149058290012605.png" alt="20170327149058290012605.png"></p>
<h2 id="Java中的内存泄露"><a href="#Java中的内存泄露" class="headerlink" title="Java中的内存泄露"></a>Java中的内存泄露</h2><h3 id="Java-内存分配"><a href="#Java-内存分配" class="headerlink" title="Java 内存分配"></a>Java 内存分配</h3><p>Java中的内存分配主要分三块，静态存储区，栈区和堆区。</p>
<ul>
<li>静态存储区，编译时分配，存在于程序的整个运行期间，主要用于存放静态数据和常量。</li>
<li>栈区，在方法执行时，用于存放方法内部的局部变量，方法结束后，内存释放。</li>
<li>堆区，通常用来存放new出来的对象，由JVM进行回收处理。</li>
</ul>
<h3 id="四种引用类型"><a href="#四种引用类型" class="headerlink" title="四种引用类型"></a>四种引用类型</h3><p><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170329149077275371348.png" alt="20170329149077275371348.png"><br>从JDK1.2开始，Java将对象的引用分为了强引用、软引用、弱引用和虚引用。</p>
<ul>
<li>强引用(Strong Reference),平时使用最多的一种引用，<strong>如果一个对象的引用方式是强引用，垃圾回收器不会对该对象进行回收，即使出现了内存空间不足的情况，JVM会抛出Out of Memory,也不会对强引用的对象进行回收。</strong></li>
<li>软引用(Soft Reference),在对象的引用强度上若于强引用，对于弱引用的对象，<strong>当内存不足时，JVM会回收软引用对象，释放内存空间</strong>。通常情况下，缓存的创建，适合使用软引用的方式。</li>
<li>弱引用(Weak Reference),在对象的引用强度上，弱于软引用，相对于强引用对象的不可回收，弱引用的对象，不存在这种情况，<strong>在垃圾回收器工作时，不论内存空间是否充足，都会对弱引用的对象进行回收。</strong>弱引用的作用，主要在于解决强引用对象之前的耦合关系，如在集合类中，任何Java对象都可以作为键来使用，当一个键值对被放入到集合中，集合对象本身就对这些键和值产生引用，如果是强引用，只要集合对象本身存在，其中包含的键和值就不会被回收，当集合包含的键和值越来越多时，最后会消耗掉JVM中的全部内存。</li>
<li>虚引用(Phantom Reference)，使用的情况并不多见，主要用来实现比较清晰的内存控制，这对于内存有限的移动设备是很有意义的。<strong>虚引用用来跟踪对象被垃圾回收器回收的活动</strong>，虚引用和软引用，弱引用的一个明显的区别是，虚引用必须和引用队列联合使用，通过检查引用队列中的内容，可以判断一个对象是否即将被回收。</li>
</ul>
<p>一个对象的引用类型有多个，怎么判断？<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170329149077630884381.png" alt="20170329149077630884381.png"><br>判定规则如下：</p>
<ul>
<li>单条引用链上的可达性，以最弱的一个引用类型来决定；</li>
<li>多条引用链上的可达性，以最强的一个引用类型来决定；</li>
</ul>
<p>我们假设上图中，1和3为强引用，5为软引用，7为弱引用。对于对象5的引用类型，在路径1–5中，5为软引用类型，依据规则1，对象5为软引用类型。在路径3–7中，7为弱引用类型，所以对象5为弱引用类型。依据规则2，多条引用链上的可达性，以最强的一个引用类型决定，因此，对象5的引用类型为软引用类型。</p>
<h2 id="内存泄露检测工具"><a href="#内存泄露检测工具" class="headerlink" title="内存泄露检测工具"></a>内存泄露检测工具</h2><h3 id="Monitors"><a href="#Monitors" class="headerlink" title="Monitors"></a>Monitors</h3><p>Memory Monitors是AndroidStudio自带的一个性能检测工具，主要包含以下几个功能：</p>
<ul>
<li>实时查看app的内存使用情况；</li>
<li>能够比较直观的了解到app的运行卡顿是否跟GC的频繁操作有关；</li>
<li>能够了解到app的crash是否跟内存溢出有关；</li>
<li>能够发现内存抖动(在短时间内分配大量内存，频繁的引起GC操作)</li>
</ul>
<p><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170401149101636441749.png" alt="20170401149101636441749.png"></p>
<h3 id="DDMS-Dump"><a href="#DDMS-Dump" class="headerlink" title="DDMS Dump"></a>DDMS Dump</h3><p><img src="http://7u2np3.com1.z0.glb.clouddn.com/2017040114910150822979.png" alt="2017040114910150822979.png"><br><strong>什么是Java Heap Dump？</strong>首先需要搞明白什么是Java Heap，Java Heap是分配给实例类和数组对象运行数据区，所有Java线程在运行期间共享heap中的数据，Java Heap Dump相当于在应用运行时，某个时间点进行一次快照，在AndroidStudio中，快照会被保存为.hprof类型的文件，保存在captures目录中。</p>
<p>分析.hprof文件，我们可以将.hprof视图分成A、B、C三个部分，在A部分中，可以看到app的整个堆内存信息，显示了在堆内存中的所有的java类。</p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Total Count</td>
<td style="text-align:center">内存中，当前Java类的实例数量</td>
</tr>
<tr>
<td style="text-align:center">Heap Count</td>
<td style="text-align:center">堆内存中，当前Java类的实例数量</td>
</tr>
<tr>
<td style="text-align:center">Size of</td>
<td style="text-align:center">当前Java类每个实例对象需要占用内存的物理大小</td>
</tr>
<tr>
<td style="text-align:center">Shallow Size</td>
<td style="text-align:center">当前Java实例对象占有的内存大小</td>
</tr>
<tr>
<td style="text-align:center">Retained Size</td>
<td style="text-align:center">释放当前Java实例对象后，节省的内存大小</td>
</tr>
</tbody>
</table>
<p>当选中A区域中的某个Java类，可以在B区域中看到选中Java类的所有实例对象。</p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Depth</td>
<td style="text-align:center">当前对象的深度</td>
</tr>
<tr>
<td style="text-align:center">Shallow Size</td>
<td style="text-align:center">当前对象占有的内存大小</td>
</tr>
<tr>
<td style="text-align:center">Dominating Size</td>
<td style="text-align:center">当前对象可支配的内存大小</td>
</tr>
</tbody>
</table>
<p>在B中看到选中Java类的所有实例对象的同时，在C区域能够看到哪些对象引用了该对象。</p>
<p><strong>什么是Allocation Tracker？</strong>Allocation Tracker主要用来追踪内存分配信息，Start Allocation Tracking 相当于在程序运行时，某个时间节点，对内存分配信息进行一次快照，生成的快照文件被保存为.alloc类型，保存在captures目录中。Allocation Tracker 也可以在Devices Monitor中启动，在Devices Monitor中使用时，需要设备有Root权限。</p>
<h3 id="MAT"><a href="#MAT" class="headerlink" title="MAT"></a>MAT</h3><p>MAT(Eclipse Memory Analyzer)是一个堆转储文件分析工具，在Monitor的快照文件(.hprof)，需要转换成MAT可以打开的标准.hprof文件，使用Mat工具打开转换后的.hprof文件，会生成一个内存消耗整体状况的报告，从饼状图中，可以比较直观地看到哪些对象占用了多少的内存空间。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170419149258510813625.png" alt="20170419149258510813625.png"><br>这里介绍一下，MAT给我们提供的几个分析的维度。</p>
<ul>
<li>Histogram，在该视图中可以清晰的看出内存中对象的数量，及所占用内存空间的大小。</li>
<li>Dominator Tree:在该视图中，可以在线程的角度观察到哪些对象占用内存空间。</li>
<li>Top Consumers:从包，对象等角度，显示内存的占用情况，能够比较直观的找出占用内存比较多的对象。</li>
<li>Leak Suspects:分析内存泄露的情况，生成一份报表，给出一些problem的建议。</li>
</ul>
<p>下面介绍一些常用的操作，视图中支持正则表达式筛选，可以过滤出我们比较关心的对象，可以以列表或者树形的结构显示出来，其中：</p>
<ul>
<li>with incoming references:过滤出那些类引用了当前选中的类；</li>
<li>with outcoming references:过滤出当前选中类引用了哪些类；</li>
</ul>
<p><img src="http://7u2np3.com1.z0.glb.clouddn.com/2017042014926559112895.png" alt="2017042014926559112895.png"></p>
<p>垃圾回收器会对虚拟机的内存空间，即堆空间中已经存在的对象进行识别，如果对象正在被引用，那么称其为存活对象，如果对象不在被引用，则为垃圾回收器回收的对象，这部分对象占用的内存空间可以被回收。</p>
<p>在垃圾回收机制中有一组元素被称为根元素集合，它们是一组被虚拟机直接引用的对象。堆空间中的每个对象都是由一个根元素为起点被层层调用的。所以，一个对象如果被一个存活的根元素所引用，就会被认为是存活对象，不能被回收。这时，可以通过分析一个对象到根元素的引用路径来分析该对象为什么不能够被顺利回收。</p>
<p>当选中某个对象，通过Merge Shortest Paths to GC Root的操作，可以显示对象之间的排除了软引用，弱引用和虚引用的引用关系，这样我们看到的就是被选中对象是否还存在强引用，通过分析 ，能够直接找到内存没有释放的原因。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170420149269042589662.png" alt="20170420149269042589662.png"></p>
<h2 id="开发中常见内存泄露的场景"><a href="#开发中常见内存泄露的场景" class="headerlink" title="开发中常见内存泄露的场景"></a>开发中常见内存泄露的场景</h2><h3 id="1-Context对象使用不当；"><a href="#1-Context对象使用不当；" class="headerlink" title="1.Context对象使用不当；"></a>1.Context对象使用不当；</h3><p>在Android中经常使用的单例模式，如果使用不当，会出现内存泄露，泄露的主要原因是因为，单例模式中的静态成员变量的生命周期与应用的生命周期一样长。比较常见的场景是，经常在一些工具类中使用单例模式，如xxManager,xxHelper，xxUtils,这些工具类中需要使用Context,由于Activity是间接继承Context，当Activity退出时，单例对象中持有了它的引用，导致Activity回收失败，从而出现内存泄露。处理方式是使用Application,由于Application的生命周期贯穿整个应用，所以当这些工具类需要使用到Context时，使用getApplication()或者getApplicationContext()。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Util</span> &#123;</div><div class="line">        <span class="keyword">private</span> Context mContext;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Util sInstance;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Util</span>(<span class="params">Context context</span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.mContext = context;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Util <span class="title">getInstance</span>(<span class="params">Context context</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (sInstance == <span class="literal">null</span>) &#123;</div><div class="line"><span class="comment">//                sInstance = new Util(context);</span></div><div class="line">                sInstance = <span class="keyword">new</span> Util(context.getApplicationContext());</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> sInstance;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="2-内部类使用不当"><a href="#2-内部类使用不当" class="headerlink" title="2.内部类使用不当"></a>2.内部类使用不当</h3><p>当使用非静态的内部类时，如果出现内部类持有外部类的引用，就会出现内存泄露，优化方法，可以使用静态的内部类，这样内部类就不在持有外部类的引用，不会影响GC对于外部类的回收。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 静态成员变量</div><div class="line">     */</div><div class="line">    public static <span class="type">InnerClass</span> innerClass = <span class="literal">null</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.activity_my);</div><div class="line"></div><div class="line">        innerClass = <span class="keyword">new</span> <span class="type">InnerClass</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</div><div class="line"></div><div class="line">        public void doSomeThing() &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-Handler的异步消息通信"><a href="#3-Handler的异步消息通信" class="headerlink" title="3.Handler的异步消息通信"></a>3.Handler的异步消息通信</h3><p>在使用Handler时出现内存泄露的主要原因是Handler的生命周期与Activity的生命周期不一致，当应用启动时，创建UI主线程Looper对象，Looper实现了简单的消息队列，主线程Looper对象存在整个应用的生命周期中。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HandlerActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Handler</span> mHandler = <span class="keyword">new</span> <span class="type">Handler</span>() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        public void handleMessage(<span class="type">Message</span> msg) &#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.activity_main);</div><div class="line">        mHandler.sendMessageDelayed(<span class="type">Message</span>.obtain(), <span class="number">10</span>*<span class="number">000</span>);</div><div class="line">        finish();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当在Actiivity中使用Handler时，就可能会产生内存泄露，究其根本原因，是我们使用的非静态内部类(或者匿名内部类)默认隐性持有外部类的引用，静态内部类不会持有外部类的引用。在Activity结束时，由于Message是延迟消息，会在主线程的消息队列中，该消息持有Activity中的Handler的引用，Handler默认持有Activity的引用，直至该消息被处理完。此时导致Activity对象无法被回收，就会出现内存泄露。优化方法，可以使用静态内部类继承Handler对象，或者在Activity的onDestory()方法中，调用mHandler.removeCallbacksAndMessages(null);</p>
<h3 id="4-Bitmap使用不当"><a href="#4-Bitmap使用不当" class="headerlink" title="4.Bitmap使用不当"></a>4.Bitmap使用不当</h3><p>使用Bitmap如果回收不及时，也会出现内存泄露。原因在于Bitmap类没有对外创建对象的构造方法，获得Bitmap对象只能通过BitmapFactory中的各种静态方法，生成Bitmap对象是通过JNI调用底层c来实现的。所以，当我们获取一个Bitmap对象时，其对应的内存中包含两部分内容，一部分是Java，一部分是c,Java部分的内存可以通过GC进行回收，但是c部分的内存GC是不会进行自动回收的，所以，我们在使用Bitmap对象时，需要调用recycle()来主动释放c部分的内存。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 判断是否已经回收</span></div><div class="line"><span class="keyword">if</span>(bitmap != <span class="literal">null</span> &amp;&amp; !bitmap.isRecycled())&#123; </div><div class="line">        <span class="comment">// 回收并且置为null</span></div><div class="line">        bitmap.recycle(); </div><div class="line">        bitmap = <span class="literal">null</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-资源性对象没有及时关闭"><a href="#5-资源性对象没有及时关闭" class="headerlink" title="5.资源性对象没有及时关闭"></a>5.资源性对象没有及时关闭</h3><p>当我们使用一些资源性对象时，如果没有做关闭操作，也会出现内存泄露，常见的资源性对象包括(Cursor、ContentProvider、File、Stream)等。还有一类如EventBus、BroadCastReceiver在注册后，为了避免重复注册，需要在退出时及时的销毁。</p>
<h3 id="6-集合列表相关"><a href="#6-集合列表相关" class="headerlink" title="6.集合列表相关"></a>6.集合列表相关</h3><p>集合类如果仅仅有添加元素的方法，而没有相应的删除机制，导致内存被占用。如果这个集合类是全局性的变量 (比如类中的静态属性，全局性的 map 等即有静态引用或 final 一直指向它)，那么没有相应的删除机制，很可能导致集合所占用的内存只增不减。</p>
<h3 id="7-Native中存在内存泄露"><a href="#7-Native中存在内存泄露" class="headerlink" title="7.Native中存在内存泄露"></a>7.Native中存在内存泄露</h3><p>由于Native层的代码多用c或c++来实现，GC无法对这部分内存进行会后处理，这时可能会出现内存泄露，这时候就需要c工程师帮助分析，如Malloc的内存是否做了free处理，指针使用完成后，是否进行了置空处理等等。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol>
<li><a href="http://www.jianshu.com/p/e97ed5d8a403" target="_blank" rel="external">科普：内存泄漏与内存溢出</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/l-JavaMemoryLeak/" target="_blank" rel="external">Java的内存泄漏</a></li>
<li><a href="https://segmentfault.com/a/1190000006852540" target="_blank" rel="external">Android 内存泄露总结</a></li>
<li><a href="https://segmentfault.com/a/1190000003910496" target="_blank" rel="external">Java四种引用类型</a></li>
<li><a href="http://blog.csdn.net/itomge/article/details/48719527" target="_blank" rel="external">MAT使用教程</a></li>
</ol>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/blog/2017/03/Android进阶-2017-03-24-android-memory-leak.html">http://www.sguotao.com/blog/2017/03/Android进阶-2017-03-24-android-memory-leak.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;内存泄露与内存溢出&quot;&gt;&lt;a href=&quot;#内存泄露与内存溢出&quot; class=&quot;headerlink&quot; title=&quot;内存泄露与内存溢出&quot;&gt;&lt;/a&gt;内存泄露与内存溢出&lt;/h2&gt;&lt;h3 id=&quot;内存泄露&quot;&gt;&lt;a href=&quot;#内存泄露&quot; class=&quot;headerli
    
    </summary>
    
      <category term="Android进阶" scheme="http://www.sguotao.com/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android" scheme="http://www.sguotao.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative样式整理</title>
    <link href="http://www.sguotao.com//blog/2017/03/ReactNative-2017-04-25-rn-css.html"/>
    <id>http://www.sguotao.com//blog/2017/03/ReactNative-2017-04-25-rn-css.html</id>
    <published>2017-03-24T02:27:04.000Z</published>
    <updated>2017-04-27T03:04:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>ReactNative的样式是CSS样式的一个子集，并且属性名称与CSS中规定的也不完全相同。</p>
<h2 id="引入样式的几种方法"><a href="#引入样式的几种方法" class="headerlink" title="引入样式的几种方法"></a>引入样式的几种方法</h2><p>常见的引用样式的几种方法，包括内嵌方式，外联方式和混合方式，还可以把样式定义在单独的文件中，通过import引用。</p>
<h3 id="1-内嵌方式"><a href="#1-内嵌方式" class="headerlink" title="1. 内嵌方式"></a>1. 内嵌方式</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">export <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">appProject</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;<span class="type">View</span> style=&#123;</div><div class="line">                &#123;</div><div class="line">                marginTop:<span class="number">200</span>,</div><div class="line">                marginLeft:<span class="number">5</span>,</div><div class="line">                marginRight:<span class="number">5</span>,</div><div class="line">                height:<span class="number">84</span>,</div><div class="line">                flexDirection:<span class="symbol">'ro</span>w',</div><div class="line">                backgroundColor:'#<span class="type">FF0067</span>',</div><div class="line">                &#125;</div><div class="line">                &#125;&gt;</div><div class="line">            &lt;/<span class="type">View</span>&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-外联方式"><a href="#2-外联方式" class="headerlink" title="2. 外联方式"></a>2. 外联方式</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="string">const</span> <span class="string">Styles</span> <span class="string">=</span> <span class="string">StyleSheet.create(&#123;</span></div><div class="line"><span class="attr">    container:</span> <span class="string">&#123;</span></div><div class="line"><span class="attr">        marginTop:</span><span class="number">200</span><span class="string">,</span></div><div class="line"><span class="attr">        marginLeft:</span><span class="number">5</span><span class="string">,</span></div><div class="line"><span class="attr">        marginRight:</span><span class="number">5</span><span class="string">,</span></div><div class="line"><span class="attr">        height:</span><span class="number">84</span><span class="string">,</span></div><div class="line"><span class="attr">        flexDirection:</span><span class="string">'row'</span><span class="string">,</span></div><div class="line"><span class="attr">        backgroundColor:</span><span class="string">'#FF0067'</span><span class="string">,</span></div><div class="line">    <span class="string">&#125;</span></div><div class="line"><span class="string">&#125;);</span></div></pre></td></tr></table></figure>
<h3 id="3-混合方式"><a href="#3-混合方式" class="headerlink" title="3. 混合方式"></a>3. 混合方式</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">export <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">appProject</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="comment">//外层容器</span></div><div class="line">            &lt;<span class="type">View</span> style=&#123;[<span class="type">Styles</span>.container,<span class="type">Styles</span>.bg,&#123;color:<span class="symbol">'re</span>d'&#125;]&#125;&gt;</div><div class="line">            &lt;/<span class="type">View</span>&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-import引用"><a href="#4-import引用" class="headerlink" title="4.import引用"></a>4.import引用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    StyleSheet,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">    <span class="attr">container</span>: &#123;</div><div class="line">        <span class="attr">marginTop</span>:<span class="number">200</span>,</div><div class="line">        <span class="attr">marginLeft</span>:<span class="number">5</span>,</div><div class="line">        <span class="attr">marginRight</span>:<span class="number">5</span>,</div><div class="line">        <span class="attr">height</span>:<span class="number">84</span>,</div><div class="line">        <span class="attr">flexDirection</span>:<span class="string">'row'</span>,</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">bg</span>:&#123;</div><div class="line">        <span class="attr">backgroundColor</span>:<span class="string">'#FF0067'</span>,</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">module</span>.exports = styles;</div></pre></td></tr></table></figure>
<p>通过import进行引入</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./styles/style'</span>;</div></pre></td></tr></table></figure>
<h2 id="常见的属性及说明"><a href="#常见的属性及说明" class="headerlink" title="常见的属性及说明"></a>常见的属性及说明</h2><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h3><table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">取值</th>
<th style="text-align:center">对应css属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">backgroundColor</td>
<td style="text-align:center">color</td>
<td style="text-align:center">对应 CSS 中的 background-color 属性</td>
</tr>
</tbody>
</table>
<h3 id="2-宽高尺寸"><a href="#2-宽高尺寸" class="headerlink" title="2.宽高尺寸"></a>2.宽高尺寸</h3><table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">取值</th>
<th style="text-align:center">对应css属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">width</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 width 属性</td>
</tr>
<tr>
<td style="text-align:center">height</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 height 属性</td>
</tr>
</tbody>
</table>
<h3 id="3-外边距相关-margin"><a href="#3-外边距相关-margin" class="headerlink" title="3.外边距相关(margin)"></a>3.外边距相关(margin)</h3><table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">取值</th>
<th style="text-align:center">对应css属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">margin</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 margin 属性，不同的是，只能定义一个参数，用以表示上、右、下、左4个方位的外补白</td>
</tr>
<tr>
<td style="text-align:center">marginHorizontal</td>
<td style="text-align:center">number</td>
<td style="text-align:center">CSS中没有对应的属性，相当于同时设置marginRight和marginLeft</td>
</tr>
<tr>
<td style="text-align:center">marginVertical</td>
<td style="text-align:center">number</td>
<td style="text-align:center">CSS中没有对应的属性，相当于同时设置marginTop和marginBottom</td>
</tr>
<tr>
<td style="text-align:center">marginTop</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 margin-top 属性</td>
</tr>
<tr>
<td style="text-align:center">marginRight</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 margin-right 属性</td>
</tr>
<tr>
<td style="text-align:center">marginBottom</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 margin-bottom 属性</td>
</tr>
<tr>
<td style="text-align:center">marginLeft</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 margin-left 属性</td>
</tr>
</tbody>
</table>
<h3 id="4-内边距相关-padding"><a href="#4-内边距相关-padding" class="headerlink" title="4.内边距相关(padding)"></a>4.内边距相关(padding)</h3><table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">取值</th>
<th style="text-align:center">对应css属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">padding</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 padding 属性，不同的是，只能定义一个参数，用以表示上、右、下、左4个方位的内补白</td>
</tr>
<tr>
<td style="text-align:center">paddingHorizontal</td>
<td style="text-align:center">number</td>
<td style="text-align:center">CSS中没有对应的属性，相当于同时设置paddingRight和paddingLeft</td>
</tr>
<tr>
<td style="text-align:center">paddingVertical</td>
<td style="text-align:center">number</td>
<td style="text-align:center">CSS中没有对应的属性，相当于同时设置paddingTop和paddingBottom</td>
</tr>
<tr>
<td style="text-align:center">paddingTop</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 padding-top 属性</td>
</tr>
<tr>
<td style="text-align:center">paddingRight</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 padding-right 属性</td>
</tr>
<tr>
<td style="text-align:center">paddingBottom</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 padding-bottom 属性</td>
</tr>
<tr>
<td style="text-align:center">paddingLeft</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 padding-left 属性</td>
</tr>
</tbody>
</table>
<h3 id="5-边框相关-border"><a href="#5-边框相关-border" class="headerlink" title="5.边框相关(border)"></a>5.边框相关(border)</h3><table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">取值</th>
<th style="text-align:center">对应css属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">borderStyle</td>
<td style="text-align:center">solid, dotted, dashed</td>
<td style="text-align:center">对应 CSS 中的 border-style 属性，但阉割了 none, hidden, double, groove, ridge, inset, outset 取值，且无方向分拆属性</td>
</tr>
<tr>
<td style="text-align:center">borderWidth</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 border-width 属性</td>
</tr>
<tr>
<td style="text-align:center">borderTopWidth</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 border-top-width 属性</td>
</tr>
<tr>
<td style="text-align:center">borderRightWidth</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 border-right-width 属性</td>
</tr>
<tr>
<td style="text-align:center">borderBottomWidth</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 border-bottom-width 属性</td>
</tr>
<tr>
<td style="text-align:center">borderLeftWidth</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 border-left-width 属性</td>
</tr>
<tr>
<td style="text-align:center">borderColor</td>
<td style="text-align:center">color</td>
<td style="text-align:center">对应 CSS 中的 border-color 属性</td>
</tr>
<tr>
<td style="text-align:center">borderTopColor</td>
<td style="text-align:center">color</td>
<td style="text-align:center">对应 CSS 中的 border-top-color 属性</td>
</tr>
<tr>
<td style="text-align:center">borderRightColor</td>
<td style="text-align:center">color</td>
<td style="text-align:center">对应 CSS 中的 border-right-color 属性</td>
</tr>
<tr>
<td style="text-align:center">borderBottomColor</td>
<td style="text-align:center">color</td>
<td style="text-align:center">对应 CSS 中的 border-bottom-color 属性</td>
</tr>
<tr>
<td style="text-align:center">borderLeftColor</td>
<td style="text-align:center">color</td>
<td style="text-align:center">对应 CSS 中的 border-left-color 属性</td>
</tr>
<tr>
<td style="text-align:center">borderRadius</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 border-radius 属性</td>
</tr>
<tr>
<td style="text-align:center">borderTopLeftRadius</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 border-top-left-radius 属性</td>
</tr>
<tr>
<td style="text-align:center">borderTopRightRadius</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 border-top-right-radius 属性</td>
</tr>
<tr>
<td style="text-align:center">borderBottomLeftRadius</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 border-bottom-left-radius 属性</td>
</tr>
<tr>
<td style="text-align:center">borderBottomRightRadius</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 border-bottom-right-radius 属性</td>
</tr>
</tbody>
</table>
<h3 id="6-位置相关-position"><a href="#6-位置相关-position" class="headerlink" title="6.位置相关(position)"></a>6.位置相关(position)</h3><table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">取值</th>
<th style="text-align:center">对应css属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">position</td>
<td style="text-align:center">absolute, relative</td>
<td style="text-align:center">对应 CSS 中的 position 属性，但阉割了 static, fixed 取值</td>
</tr>
<tr>
<td style="text-align:center">top</td>
<td style="text-align:center">number&gt;</td>
<td style="text-align:center">对应 CSS 中的 top 属性</td>
</tr>
<tr>
<td style="text-align:center">right</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 right 属性</td>
</tr>
<tr>
<td style="text-align:center">bottom</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 bottom 属性</td>
</tr>
<tr>
<td style="text-align:center">left</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 left 属性</td>
</tr>
</tbody>
</table>
<h3 id="7-文本相关-Text"><a href="#7-文本相关-Text" class="headerlink" title="7.文本相关(Text)"></a>7.文本相关(Text)</h3><table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">取值</th>
<th style="text-align:center">对应css属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">color</td>
<td style="text-align:center">color</td>
<td style="text-align:center">对应 CSS 中的 color 属性</td>
</tr>
<tr>
<td style="text-align:center">fontFamily</td>
<td style="text-align:center">string</td>
<td style="text-align:center">对应 CSS 中的 font-family 属性</td>
</tr>
<tr>
<td style="text-align:center">fontSize</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 font-size 属性</td>
</tr>
<tr>
<td style="text-align:center">fontStyle</td>
<td style="text-align:center">normal, italic</td>
<td style="text-align:center">对应 CSS 中的 font-style 属性，但阉割了 oblique 取值</td>
</tr>
<tr>
<td style="text-align:center">fontWeight</td>
<td style="text-align:center">normal, bold 100~900</td>
<td style="text-align:center">对应 CSS 中的 font-weight 属性，但阉割了 bolder, lighter 取值</td>
</tr>
<tr>
<td style="text-align:center">lineHeight</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 line-height 属性</td>
</tr>
<tr>
<td style="text-align:center">textAlign</td>
<td style="text-align:center">auto, left, right, center, justifyiOS</td>
<td style="text-align:center">对应 CSS 中的 text-align 属性，增加了 auto 取值</td>
</tr>
<tr>
<td style="text-align:center">textAlignVertical<sup>Android</sup></td>
<td style="text-align:center">auto, top, bottom, center</td>
<td style="text-align:center">对应 CSS 中的 vertical-align 属性，增加了 auto 取值，center 取代了 middle，并阉割了 baseline, sub 等值</td>
</tr>
<tr>
<td style="text-align:center">textShadowColor</td>
<td style="text-align:center">color</td>
<td style="text-align:center">对应 CSS 中的 text-shadow 属性中的颜色定义</td>
</tr>
<tr>
<td style="text-align:center">textShadowOffset</td>
<td style="text-align:center">{width: number, height: number}</td>
<td style="text-align:center">对应 CSS 中的 text-shadow 属性中的阴影偏移定义</td>
</tr>
<tr>
<td style="text-align:center">textShadowRadius</td>
<td style="text-align:center">number</td>
<td style="text-align:center">在 CSS 中，阴影的圆角大小取决于元素的圆角定义，不需要额外定义</td>
</tr>
<tr>
<td style="text-align:center">letterSpacing<sup>iOS</sup></td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 letter-spacing 属性，但取值不同</td>
</tr>
<tr>
<td style="text-align:center">textDecorationColor<sup>iOS</sup></td>
<td style="text-align:center">color</td>
<td style="text-align:center">对应 CSS 中的 text-decoration-color 属性</td>
</tr>
<tr>
<td style="text-align:center">textDecorationLine<sup>iOS</sup></td>
<td style="text-align:center">none, underline, line-through, underline line-through</td>
<td style="text-align:center">对应 CSS 中的 text-decoration-line 属性，但阉割了 overline, blink 取值</td>
</tr>
<tr>
<td style="text-align:center">textDecorationStyle<sup>iOS</sup></td>
<td style="text-align:center">solid, double, dotted, dashed</td>
<td style="text-align:center">对应 CSS 中的 text-decoration-style 属性，但阉割了 wavy 取值</td>
</tr>
<tr>
<td style="text-align:center">writingDirection<sup>iOS</sup></td>
<td style="text-align:center">auto, ltr, rtl</td>
<td style="text-align:center">对应 CSS 中的 direction 属性，增加了 auto 取值</td>
</tr>
</tbody>
</table>
<h3 id="8-弹性布局相关-Flex"><a href="#8-弹性布局相关-Flex" class="headerlink" title="8.弹性布局相关(Flex)"></a>8.弹性布局相关(Flex)</h3><table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">取值</th>
<th style="text-align:center">对应css属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">flex</td>
<td style="text-align:center">number</td>
<td style="text-align:center">对应 CSS 中的 flex 属性</td>
</tr>
<tr>
<td style="text-align:center">flexDirection</td>
<td style="text-align:center">row, column</td>
<td style="text-align:center">对应 CSS 中的 flex-direction 属性，但阉割了 row-reverse, column-reverse 取值</td>
</tr>
<tr>
<td style="text-align:center">flexWrap</td>
<td style="text-align:center">wrap, nowrap</td>
<td style="text-align:center">对应 CSS 中的 flex-wrap 属性，但阉割了 wrap-reverse 取值</td>
</tr>
<tr>
<td style="text-align:center">justifyContent</td>
<td style="text-align:center">flex-start, flex-end, center, space-between, space-around</td>
<td style="text-align:center">对应 CSS 中的 justify-content 属性，但阉割了 stretch 取值。</td>
</tr>
<tr>
<td style="text-align:center">alignItems</td>
<td style="text-align:center">flex-start, flex-end, center, stretch</td>
<td style="text-align:center">对应 CSS 中的 align-items 属性，但阉割了 baseline 取值。</td>
</tr>
<tr>
<td style="text-align:center">alignSelf</td>
<td style="text-align:center">auto, flex-start, flex-end, center, stretch</td>
<td style="text-align:center">对应 CSS 中的 align-self 属性，但阉割了 baseline 取值</td>
</tr>
</tbody>
</table>
<h3 id="9-转换相关-transform"><a href="#9-转换相关-transform" class="headerlink" title="9.转换相关(transform)"></a>9.转换相关(transform)</h3><table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">取值</th>
<th style="text-align:center">对应css属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">transform</td>
<td style="text-align:center">[{perspective: number}, {rotate: string}, {rotateX: string}, {rotateY: string}, {rotateZ: string}, {scale: number}, {scaleX: number}, {scaleY: number}, {translateX: number}, {translateY: number}, {skewX: string}, {skewY: string}]</td>
<td style="text-align:center">对应 CSS 中的 transform 属性</td>
</tr>
<tr>
<td style="text-align:center">transformMatrix</td>
<td style="text-align:center">TransformMatrixPropType</td>
<td style="text-align:center">类似于 CSS 中 transform 属性的 matrix() 和 matrix3d() 函数</td>
</tr>
<tr>
<td style="text-align:center">backfaceVisibility</td>
<td style="text-align:center">visible, hidden</td>
<td style="text-align:center">对应 CSS 中的 backface-visibility 属性</td>
</tr>
</tbody>
</table>
<h3 id="10-图片相关"><a href="#10-图片相关" class="headerlink" title="10.图片相关"></a>10.图片相关</h3><table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">取值</th>
<th style="text-align:center">对应css属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">resizeMode</td>
<td style="text-align:center">cover, contain, stretch</td>
<td style="text-align:center">contain是指无论如何图片都包含在指定区域内，假设设置的宽度高度比图片大，则图片居中显示，否则，图片等比缩小显示</td>
</tr>
<tr>
<td style="text-align:center">overflow</td>
<td style="text-align:center">visible, hidden</td>
<td style="text-align:center">超出部分是否显示，hidden为隐藏</td>
</tr>
<tr>
<td style="text-align:center">tintColor</td>
<td style="text-align:center">number</td>
<td style="text-align:center">着色，rgb字符串类型</td>
</tr>
<tr>
<td style="text-align:center">opacity</td>
<td style="text-align:center">number</td>
<td style="text-align:center">透明度</td>
</tr>
</tbody>
</table>
<h3 id="11-图像变换"><a href="#11-图像变换" class="headerlink" title="11.图像变换"></a>11.图像变换</h3><table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">取值</th>
<th style="text-align:center">对应css属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">rotation</td>
<td style="text-align:center">–</td>
<td style="text-align:center">旋转</td>
</tr>
<tr>
<td style="text-align:center">scaleX</td>
<td style="text-align:center">–</td>
<td style="text-align:center">水平方向缩放</td>
</tr>
<tr>
<td style="text-align:center">scaleY</td>
<td style="text-align:center">–</td>
<td style="text-align:center">垂直方向缩放</td>
</tr>
<tr>
<td style="text-align:center">translateX</td>
<td style="text-align:center">–</td>
<td style="text-align:center">水平方向平移</td>
</tr>
<tr>
<td style="text-align:center">translateY</td>
<td style="text-align:center">–</td>
<td style="text-align:center">水平方向平移</td>
</tr>
</tbody>
</table>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/blog/2017/03/ReactNative-2017-04-25-rn-css.html">http://www.sguotao.com/blog/2017/03/ReactNative-2017-04-25-rn-css.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ReactNative的样式是CSS样式的一个子集，并且属性名称与CSS中规定的也不完全相同。&lt;/p&gt;
&lt;h2 id=&quot;引入样式的几种方法&quot;&gt;&lt;a href=&quot;#引入样式的几种方法&quot; class=&quot;headerlink&quot; title=&quot;引入样式的几种方法&quot;&gt;&lt;/a&gt;引入样式
    
    </summary>
    
      <category term="ReactNative" scheme="http://www.sguotao.com/categories/ReactNative/"/>
    
    
      <category term="ReactNative" scheme="http://www.sguotao.com/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>Android动态加载机制</title>
    <link href="http://www.sguotao.com//blog/2017/03/%E6%8F%92%E4%BB%B6%E6%A1%86%E6%9E%B6-2017-03-17-classloader.html"/>
    <id>http://www.sguotao.com//blog/2017/03/插件框架-2017-03-17-classloader.html</id>
    <published>2017-03-17T02:27:04.000Z</published>
    <updated>2017-04-27T03:08:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java的类加载机制ClassLoader"><a href="#Java的类加载机制ClassLoader" class="headerlink" title="Java的类加载机制ClassLoader"></a>Java的类加载机制ClassLoader</h2><p>我们编写的java代码，最终会编译成.class字节码的形式，一个完整的Java程序，通常会由若干个.class文件组成，在程序运行时，通过该程序的入口函数来调用系统的各个功能，但是程序启动时，并不会一次性将.class文件加载到内存中，根据程序的需要，通过Java的类加载机制来动态加载.class文件，ClassLoader就是来实现.class文件的动态加载的。</p>
<h2 id="Java中各类加载器的关系"><a href="#Java中各类加载器的关系" class="headerlink" title="Java中各类加载器的关系"></a>Java中各类加载器的关系</h2><p><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170317148974200061820.png" alt="20170317148974200061820.png"><br>Java默认会提供三个类加载器，分别为BootStrapClassLoader,ExtClassLoader和AppClassLoader;</p>
<ul>
<li>BootStrapLoader，启动类加载器，是Java类加载层次中最顶层的类加载器，由c代码编写，负责加载JDK中的核心类库（包括JRE classes目录下的.class文件，libs目录下的jar文件）。可以使用System.getProperty(“sun.boot.class.path”)来显示BootStrapLoader加载的jar和.class文件；</li>
<li>ExtClassLoader,扩展类加载器，负责加载Java的扩展类库，默认加载/jre/lib/ext目录下的所有jar和.class文件。可以通过可以使用System.getProperty(“java.ext.dirs”)来显示ExtClassLoader加载的jar和.class文件；</li>
<li>AppClassLoader,系统类加载器，负责加载classpath目录下所有的jar和class文件。</li>
</ul>
<h2 id="Java类加载的实现过程"><a href="#Java类加载的实现过程" class="headerlink" title="Java类加载的实现过程"></a>Java类加载的实现过程</h2><p><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170317148974217438657.jpg" alt="20170317148974217438657.jpg"></p>
<ul>
<li>执行程序代码，找到JRE所在目录；</li>
<li>找到jvm.dll(Windows)或者libjvm.so(Linux);</li>
<li>启动JVM，并进行初始化工作</li>
<li>创建BootStrapClassLoader;</li>
<li>BootStrapClassLoader会加载ExtClassLoader，并设定ExtClassLoader的parent为BootStrapClassLoader;</li>
<li>BootStrapClassLoader会加载AppClassLoader,并设定AppClassLoader的parent为ExtClassLoader;</li>
</ul>
<p>当AppClassLoader开始加载xxx.class时，类加载器会现将加载的任务交给其parent来完成，如果parent找不到，则自己负责加载。所以在加载xxx.class时的顺序是，BootstrapClassLoader –&gt; ExtClassLoader –&gt; AppClassLoader，如果都找不到，则抛出ClassNotFoundException。这就是非常有名的双亲委托模型。</p>
<p>使用双亲委托模型，有效地解决了.class字节码重复加载的问题，当parent已经加载类某各类的.class字节码时，子类就没有必要再重新进行加载。举个例子，来说明一下双亲委托模型。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170317148974220124844.png" alt="20170317148974220124844.png"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 取得SomeClass的Class实例</span></div><div class="line">   Class c = Class.forName(<span class="string">"SomeClass"</span>);</div><div class="line">   <span class="comment">// 取得ClassLoader</span></div><div class="line">   ClassLoader loader = c.getClassLoader();</div><div class="line">   System.out.println(loader);</div><div class="line">   <span class="comment">// 取得父ClassLoader</span></div><div class="line">   System.out.println(loader.getParent());</div><div class="line">   <span class="comment">// 再取得父ClassLoader</span></div><div class="line">   System.out.println(loader.getParent().getParent());</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sun.misc.Launcher\$AppClassLoader@<span class="number">19821f</span></div><div class="line">sun.misc.Launcher\$ExtClassLoader<span class="meta">@addbf</span>1</div><div class="line"><span class="keyword">null</span></div></pre></td></tr></table></figure>
<p>由于SomeClass是自定义的一个Java类，通常会java.class.path中产生字节码，首先AppClassLoader会将加载的任务交给其parent,ExtClassLaoder,ExtClassLoader将加载任务交给其parent，BootStrapClassLoader,由于BootStrapLoader在其目录(sun.boot.class.path)下没有找到该类的字节码，所以由ExtClassLoader来加载，ExtClassLoader在其目录(java.ext.dirs)也没有发现SomeClass的字节码，交给AppClassLoader进行加载，AppClassLoader在(java.class.path)中找到，并进行加载。</p>
<p>加载SomeClass的ClassLoader是AppClassLoader,其parent是ExtClassLoader,<br>而ExtClassLoader的parent是null，这是因为BootStrapClassLoader是由c代码编写的，在JVM中并没有对应的实例对象，所以显示为null。</p>
<h2 id="Dalvik与JVM"><a href="#Dalvik与JVM" class="headerlink" title="Dalvik与JVM"></a>Dalvik与JVM</h2><p>在Java中，把一些Java类编译成.class文件，通过ClassLoader进行加载，但是在Android上边，情况有所不同，主要的原因在于Android中使用的虚拟机是Dalvik。Android中的Dalvik和Java中的JVM都是将对应的Java类加载到内存中运行。不同的是JVM加载的是.class字节码文件，或是通过defineClass方式产生class，进行加载。Dalvik加载的是.dex文件，.dex文件是Android对.class文件进行了优化，更加适合内存和处理器有限的系统。</p>
<ul>
<li>Dalvik是基于寄存器的，而JVM是基于栈的。</li>
<li>Dalvik运行dex文件，而JVM运行java字节码</li>
<li>自Android 2.2开始，Dalvik支持JIT（just-in-time，即时编译技术）。</li>
</ul>
<p>很长时间以来，Dalvik虚拟机一直被用户指责为拖慢安卓系统运行速度不如IOS的根源。2014年6月25日,Android L 正式亮相于召开的谷歌I/O大会，Android L 改动幅度较大，谷歌将直接删除Dalvik，代替它的是传闻已久的ART。ART,即Android Runtime。ART 的机制与 Dalvik 不同。在Dalvik下，应用每次运行的时候，字节码都需要通过即时编译器（just in time,JIT）转换为机器码，这会拖慢应用的运行效率，而在ART 环境中，应用在第一次安装的时候，字节码就会预先编译成机器码，使其成为真正的本地应用。这个过程叫做预编译（AOT,Ahead-Of-Time)。这样的话，应用的启动(首次)和执行都会变得更加快速。</p>
<h2 id="DexClassLoader与PathClassLoader"><a href="#DexClassLoader与PathClassLoader" class="headerlink" title="DexClassLoader与PathClassLoader"></a>DexClassLoader与PathClassLoader</h2><p>在使用Java虚拟机时，我们经常自定义继承自ClassLoader的类加载器。然后通过defineClass方法来从一个二进制流中加载Class。而在Android中我们无法这么使用，Android中ClassLoader的defineClass方法具体是调用VMClassLoader的defineClass本地静态方法。而这个本地方法什么都没做，只是抛出了一个“UnsupportedOperationException”异常。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(String name, <span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</div><div class="line">        <span class="keyword">throws</span> ClassFormatError</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"can't load this type of class file"</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>既然在Dalvik虚拟机里，ClassLoader不好用，那么Android官方为了解决这个问题，帮我们从ClassLoader中派生出了两个类：DexClassLoader和PathClassLoader。先来看一下DexClassLoader和PahtClassLoader的继承关系。</p>
<p><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170322149015010153287.png" alt="20170322149015010153287.png"></p>
<h3 id="DexClassLoader"><a href="#DexClassLoader" class="headerlink" title="DexClassLoader"></a>DexClassLoader</h3><p>DexClassLoader可以加载jar,apk,dex,可以从SD卡进行加载，可以实现dex的动态加载与更新，DexClassLoader要有一个app私有且可写的目录来存储经过优化的.odex文件。构造函数如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DexClassLoader</span> <span class="keyword">extends</span> <span class="title">BaseDexClassLoader</span> </span>&#123;</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 *</div><div class="line">		 * <span class="doctag">@param</span> dexPath .dex文件路径,多个文件路径使用':'分隔</div><div class="line">		 * <span class="doctag">@param</span> optimizedDirectory .dex文件优化后生成的.odex文件的路径</div><div class="line">		 * <span class="doctag">@param</span> librarySearchPath 动态库路径</div><div class="line">		 * <span class="doctag">@param</span> parent 双亲委派模式,指定父类加载器</div><div class="line">		 */</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">DexClassLoader</span><span class="params">(String dexPath, String optimizedDirectory, String librarySearchPath, ClassLoader parent)</span> </span>&#123;</div><div class="line">			<span class="keyword">super</span>((String)<span class="keyword">null</span>, (File)<span class="keyword">null</span>, (String)<span class="keyword">null</span>, (ClassLoader)<span class="keyword">null</span>);</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Stub!"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="PathClassLoader"><a href="#PathClassLoader" class="headerlink" title="PathClassLoader"></a>PathClassLoader</h3><p>PathClassLoader只能加载已经安装的apk文件。Android系统默认使用的类加载器。构造函数如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathClassLoader</span> <span class="keyword">extends</span> <span class="title">BaseDexClassLoader</span> </span>&#123;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">PathClassLoader</span><span class="params">(String dexPath, ClassLoader parent)</span> </span>&#123;</div><div class="line">			<span class="keyword">super</span>((String)<span class="keyword">null</span>, (File)<span class="keyword">null</span>, (String)<span class="keyword">null</span>, (ClassLoader)<span class="keyword">null</span>);</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Stub!"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">/**</span></div><div class="line">		 *</div><div class="line">		 * <span class="doctag">@param</span> dexPath .dex文件路径</div><div class="line">		 * <span class="doctag">@param</span> librarySearchPath 本地库路径</div><div class="line">		 * <span class="doctag">@param</span> parent 双亲委派模式,指定父类加载器</div><div class="line">		 */</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">PathClassLoader</span><span class="params">(String dexPath, String librarySearchPath, ClassLoader parent)</span> </span>&#123;</div><div class="line">			<span class="keyword">super</span>((String)<span class="keyword">null</span>, (File)<span class="keyword">null</span>, (String)<span class="keyword">null</span>, (ClassLoader)<span class="keyword">null</span>);</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Stub!"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="DexClassLoader与PathClassLoader的比较"><a href="#DexClassLoader与PathClassLoader的比较" class="headerlink" title="DexClassLoader与PathClassLoader的比较"></a>DexClassLoader与PathClassLoader的比较</h3><p>通过两个类加载构造函数的对比发现，区别在于DexClassLoader构造函数中的参数optimizedDirectory。Google官方文档中给出optimizedDirectory的说明是，用来存储经过优化后的.odex文件的路径。optimizedDirectory必须是一个内部存储路径，DexClassLoader可以通过构造函数指定optimizedDirectory，所以DexClassLoader可以实现动态加载，外部的.jar/.dex文件，优化后会存在在optimizedDirectory目录中。PathClassLoader由于没有指定该路径，所以只能加载内部的，已经安装的apk中的.odex文件。</p>
<p><img src="http://7u2np3.com1.z0.glb.clouddn.com/20170322149015373793574.png" alt="20170322149015373793574.png"></p>
<p>整个类加载过程可以简单描述为上面的时序图。ClassLoader在加载过程中，通过loadClass方法，调用BaseDexClassLoader中重载的findClass方法，该方法会遍历DexPathList列表。DexPathList的创建过程如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">BaseDexClassLoader</span><span class="params">(String dexPath, File optimizedDirectory,</span></span></div><div class="line">                              String libraryPath, ClassLoader parent) &#123;</div><div class="line">        <span class="keyword">super</span>(parent);</div><div class="line">        <span class="keyword">this</span>.originalPath = dexPath;</div><div class="line">        <span class="keyword">this</span>.pathList = <span class="keyword">new</span> DexPathList(<span class="keyword">this</span>, dexPath, libraryPath, optimizedDirectory);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>optimizedDirectory用来缓存优化过的.odex文件，在DexClassLoader中可以通过构造函数进行制定，在PathClassLoader中，optimizedDirectory为null，会直接使用系统中已经安装的apk文件的.odex目录。DexPathList完整的创建过程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">DexPathList</span><span class="params">(ClassLoader definingContext, String dexPath,</span></span></div><div class="line">                       String libraryPath, File optimizedDirectory) &#123;</div><div class="line">        ……</div><div class="line">        <span class="keyword">this</span>.dexElements = makeDexElements(splitDexPath(dexPath), optimizedDirectory);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Element[] makeDexElements(ArrayList&lt;File&gt; files,</div><div class="line">                                             File optimizedDirectory) &#123;</div><div class="line">        ArrayList&lt;Element&gt; elements = <span class="keyword">new</span> ArrayList&lt;Element&gt;();</div><div class="line">        <span class="keyword">for</span> (File file : files) &#123;</div><div class="line">            ZipFile zip = <span class="keyword">null</span>;</div><div class="line">            DexFile dex = <span class="keyword">null</span>;</div><div class="line">            String name = file.getName();</div><div class="line">            <span class="keyword">if</span> (name.endsWith(DEX_SUFFIX)) &#123;</div><div class="line">                dex = loadDexFile(file, optimizedDirectory);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.endsWith(APK_SUFFIX) || name.endsWith(JAR_SUFFIX)</div><div class="line">                || name.endsWith(ZIP_SUFFIX)) &#123;</div><div class="line">                zip = <span class="keyword">new</span> ZipFile(file);</div><div class="line">            &#125;</div><div class="line">            ……</div><div class="line">            <span class="keyword">if</span> ((zip != <span class="keyword">null</span>) || (dex != <span class="keyword">null</span>)) &#123;</div><div class="line">                elements.add(<span class="keyword">new</span> Element(file, zip, dex));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> elements.toArray(<span class="keyword">new</span> Element[elements.size()]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> DexFile <span class="title">loadDexFile</span><span class="params">(File file, File optimizedDirectory)</span></span></div><div class="line">        <span class="keyword">throws</span> IOException &#123;</div><div class="line">        <span class="keyword">if</span> (optimizedDirectory == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DexFile(file);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            String optimizedPath = optimizedPathFor(file, optimizedDirectory);</div><div class="line">            <span class="keyword">return</span> DexFile.loadDex(file.getPath(), optimizedPath, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Converts a dex/jar file path and an output directory to an</div><div class="line">     * output file path for an associated optimized dex file.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">optimizedPathFor</span><span class="params">(File path,</span></span></div><div class="line">                                           File optimizedDirectory) &#123;</div><div class="line">        String fileName = path.getName();</div><div class="line">        <span class="keyword">if</span> (!fileName.endsWith(DEX_SUFFIX)) &#123;</div><div class="line">            <span class="keyword">int</span> lastDot = fileName.lastIndexOf(<span class="string">"."</span>);</div><div class="line">            <span class="keyword">if</span> (lastDot &lt; <span class="number">0</span>) &#123;</div><div class="line">                fileName += DEX_SUFFIX;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                StringBuilder sb = <span class="keyword">new</span> StringBuilder(lastDot + <span class="number">4</span>);</div><div class="line">                sb.append(fileName, <span class="number">0</span>, lastDot);</div><div class="line">                sb.append(DEX_SUFFIX);</div><div class="line">                fileName = sb.toString();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        File result = <span class="keyword">new</span> File(optimizedDirectory, fileName);</div><div class="line">        <span class="keyword">return</span> result.getPath();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>1.<a href="http://blog.csdn.net/xyang81/article/details/7292380" target="_blank" rel="external">深入分析Java ClassLoader原理</a><br>2.<a href="http://blog.csdn.net/irelandken/article/details/7048817" target="_blank" rel="external">分析BootstrapClassLoader/ExtClassLoader/AppClassLoader的加载路径 及”父委托机制”</a><br>3.<a href="https://openhome.cc/Gossip/JavaEssence/ClassLoader.html" target="_blank" rel="external">簡介類別載入器</a><br>4.<a href="http://www.infoq.com/cn/articles/android-in-depth-dalvik" target="_blank" rel="external">Java虚拟机Dalvik</a><br>5<a href="http://www.jianshu.com/p/669fc4858194" target="_blank" rel="external">Android动态加载——DexClassloader分析</a></p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/blog/2017/03/插件框架-2017-03-17-classloader.html">http://www.sguotao.com/blog/2017/03/插件框架-2017-03-17-classloader.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java的类加载机制ClassLoader&quot;&gt;&lt;a href=&quot;#Java的类加载机制ClassLoader&quot; class=&quot;headerlink&quot; title=&quot;Java的类加载机制ClassLoader&quot;&gt;&lt;/a&gt;Java的类加载机制ClassLoader&lt;/
    
    </summary>
    
      <category term="插件框架" scheme="http://www.sguotao.com/categories/%E6%8F%92%E4%BB%B6%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="插件框架" scheme="http://www.sguotao.com/tags/%E6%8F%92%E4%BB%B6%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>【读书笔记】追风筝的人</title>
    <link href="http://www.sguotao.com//blog/2017/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2017-01-04-%E8%BF%BD%E9%A3%8E%E7%AD%9D%E7%9A%84%E4%BA%BA.html"/>
    <id>http://www.sguotao.com//blog/2017/01/读书笔记-2017-01-04-追风筝的人.html</id>
    <published>2017-01-04T04:00:00.000Z</published>
    <updated>2017-04-27T03:13:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>为你，千千万万遍</p>
<p>阿米尔问哈桑为什么知道被切断绳线的风筝的掉落地点，<br>哈桑肯定会对阿米尔说，我就是知道，然后反问，我什么时候骗过你。<br>阿米尔轻声说，我怎么知道有没有骗过我。<br>哈桑发誓，为了你，我宁可啃烂泥。阿米尔进一步确定，你真的会为我啃烂泥？<br>哈桑坚定的说，我肯定，然后又说，但是你又怎么能忍心让我啃烂泥。</p>
<p>同哈桑洋溢着笑脸对阿米尔说：为你，千千万万遍。</p>
<p>一个是主人，一个是仆人；<br>一个是普什图，一个是哈扎拉；<br>一个是逊尼派，一个是什叶派；</p>
<p>从他们出生的那一刻起，他们的命运就被这些他们所不能理解的标签所分隔开来，尽管他们是亲密无间的朋友，尽管他们事实上拥有同一位父亲。无论是平凡的阿米尔和哈桑，还是高高在上的查希尔国王或者卡尔扎伊，都不得不接受社会为他们预定的座位——阿米尔不再是阿米尔，哈桑也不再是哈桑，他们必须戴上社会分给他们的面具。</p>
<p>哈桑总是说“为你，千千万万遍”，而生性懦弱的阿米尔却选择沉默冷酷的逃避，这样的悲剧性结果并不单单是个性差异所造成的，在这些年少无知的孩子的潜意识里早已被灌输了相应于自身社会地位的“应该”与“不应该”，一个哈扎拉仆人理应为主人尽忠，而高贵的普什图少爷不值得为一个卑贱的哈扎拉仆人冒任何风险。</p>
<p>“阿米尔和哈桑，喀布尔的统治者”，这样的誓言只能是石榴树下的童话，“王子与贫儿”不可能成为兄弟，因为他们命中注定不平等。包括二十年后，阿米尔重返阿富汗的自我救赎行为，也只不过是在获知自己与哈桑的同父异母兄弟关系之后对身世的无奈认可，也就是说，他仍然没有证明自己已经找到了“重新成为好人的路”。</p>
<p>我们少年的时候，总是意气风发，三五结伴，促膝长谈。那是在我们其乐融融的环境中构建的虚拟场景，属于物理学讲究的理想状态，然而在残酷的现实面前，在微弱的友谊遇到挑战的时刻，只要有一方露出破绽，友谊的桥梁必然坍塌。</p>
<p>于是当阿米尔在看到哈桑被大一些的孩子欺负甚至猥亵的时候，他选择沉默和逃避；与此同时，哈桑却为了阿米尔的风筝坚定不动摇的和对手较量，对手残忍的揭示阿米尔和哈桑之间的主仆关系，哈桑大声反驳说两个人是朋友。躲在角落里不敢出现的阿米尔听到这句话不但没有一点激励也没有丝毫感动，他心底里的怯懦终于将他的灵魂吞噬，于是悲剧发生。</p>
<p>这就是我们对友谊最大的误解，认为它是万能的。</p>
<p>即使是存在这样的问题，《追风筝的人》也还是一本出色的小说。主和仆、贵族和贱民、朋友和兄弟，历史和现实，种种转变都被刻画得生动而细腻。放在历史的宏大背景下，更洞见人生和人性的复杂。</p>
<p>友谊和爱。</p>
<p>是在困难之中由弱变强的柔韧派还是在权衡利弊之中土崩瓦解的懦弱派。</p>
<p>谁敢真的站出来举起右手发誓，我从来没有辜负过任何一段纯粹的友谊，谁敢真的抬头挺胸说自己对朋友忠心不二。</p>
<p>我们总是太自信，对友谊误解，对自己的爱误解，对不可能的事信以为真。</p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/blog/2017/01/读书笔记-2017-01-04-追风筝的人.html">http://www.sguotao.com/blog/2017/01/读书笔记-2017-01-04-追风筝的人.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为你，千千万万遍&lt;/p&gt;
&lt;p&gt;阿米尔问哈桑为什么知道被切断绳线的风筝的掉落地点，&lt;br&gt;哈桑肯定会对阿米尔说，我就是知道，然后反问，我什么时候骗过你。&lt;br&gt;阿米尔轻声说，我怎么知道有没有骗过我。&lt;br&gt;哈桑发誓，为了你，我宁可啃烂泥。阿米尔进一步确定，你真的会为我啃烂泥
    
    </summary>
    
      <category term="读书笔记" scheme="http://www.sguotao.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://www.sguotao.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>怎样才能让别人觉得与你合作愉快</title>
    <link href="http://www.sguotao.com//blog/2016/08/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F-2016-08-17-pleasure-working-with-you.html"/>
    <id>http://www.sguotao.com//blog/2016/08/生活感悟-2016-08-17-pleasure-working-with-you.html</id>
    <published>2016-08-17T09:00:00.000Z</published>
    <updated>2017-04-27T03:12:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>文章作者：咪喵<br>文章来源： TalentGuide </p>
</blockquote>
<p>为什么有的人，明明事情做得不少，却永远没人说他好？有的人，不管做什么都得到周围人众口一词的称赞？</p>
<p>真的是因为两个人做的事差很多吗？也许是。<br>也许，只是一些小习惯改变了他们的口碑。</p>
<h2 id="1-收到请回答"><a href="#1-收到请回答" class="headerlink" title="1. 收到请回答"></a>1. 收到请回答</h2><p>一些人，交给他的事情永远没下文。你不知道他收到了没有，是不是正在做，已经做到了什么进展，啥时候能交付。即使这件事他已经做完了，不去问，他也永远不会告诉你。</p>
<ol>
<li>收到任务，请告诉对方“我收到了。”</li>
<li>需要时间消化，请告诉对方“我看一下，晚点（给出具体时间段更佳）给你答复。”</li>
<li>事情有进展时，及时周知相关人等最新进度。</li>
<li>事情完成时，通知相关方，并感谢在其中给过帮助的人。</li>
</ol>
<p>做到这些，不需要很多时间，却会让与你合作的人感到轻松愉快。</p>
<h2 id="2-要做就别抱怨"><a href="#2-要做就别抱怨" class="headerlink" title="2. 要做就别抱怨"></a>2. 要做就别抱怨</h2><p>有的人，接受任务时永远不情不愿，嘴里没完没了地抱怨，最后虽仍然接下了任务，却留下了难以合作的印象。</p>
<p>如果别人的行为确实给自己带来了麻烦或是有为难之处，可以清晰告知对方自己难做的原因，说清楚希望对方如何改进，并告知这样的改进会给双方带来什么好处。</p>
<p>比如对方总给你扔急活，你为了这个急活不得不加班加点，到处求人。正确的做法是<strong>告诉对方这件事有哪些环节，分别需要多长时间，以后请提早多少天告知，以便更好的完成。这次帮忙加急，下不为例</strong>。这样对方能理解你这次加急赶完是帮了他忙，而不会抱怨每次给你事情都推三阻四还完成得不好。</p>
<h2 id="3-推进事情要推到有进展才算数"><a href="#3-推进事情要推到有进展才算数" class="headerlink" title="3. 推进事情要推到有进展才算数"></a>3. 推进事情要推到有进展才算数</h2><p>有些人，推进一件事的方法是：每隔一段时间，发封不痛不痒的邮件，抄送所有人，摆个样子跟进一下，也不在乎对方是否给了结果。仿佛在说“你看，我推过了，是对方不给做，推不动不关我事哦。出了问题责任是他是他还是他。”</p>
<p>如果是自家孩子病了，有哪位家长会说“我给医生发邮件了，他没回我，所以病治不了了。”显然，孩子生病时家长都是心急火燎的，医生不在会找护士，找主管，找院长，找媒体。用尽一切可用的渠道，一切可用的方法，直到医生给孩子看病为止。</p>
<p>当说一件事情推不动时，扪心自问自己真的做到了像家长为生病的孩子找医生那样努力吗？真的已经用尽了一切可用的力量，找尽了一切可找的人去推动这件事吗？</p>
<p>装模作样推一推是没有意义的，一定要推到这件事有实质进展为止。<strong>实质进展是对方给排期、给解决方案、给具体处理这件事的人</strong>。如果什么都没拿到，那根本不算推进过一件事。</p>
<h2 id="4-做不到早说"><a href="#4-做不到早说" class="headerlink" title="4. 做不到早说"></a>4. 做不到早说</h2><p>有的人，交给他的事情，不问永远没问题，一问全是问题。拖过了截止期做不到，罗列出一堆原因，都是ABCDE的问题，与他无关。</p>
<p>OK，就算ABCDE的问题确实与他无关，为什么不能在发现有这些问题时及时反馈呢？自己解决不了的问题，及时反馈并暴露，让有能力解决的人去解决，是靠谱最重要的表现之一。</p>
<p>又有人说，我要是暴露了这些问题得罪了别人怎么办？请问不暴露这些问题，任由时间资源浪费，事情最终没做到，就谁都不得罪了吗？<strong>作为一个团队，成事是最重要的。暴露问题是为了解决问题，而不是为了挑事，关键是把握分寸</strong>。</p>
<p>还有人说，跟别人没关系，就是堆给我的活太多了，我做不完怎么办？如果是这种情况，更要尽早反馈了。或许你花了大量时间在一件优先级比较低的事情上，导致最重要的事情没有做完。结果把自己累得半死，还谁都不满意。<strong>发现自己做不完，就要第一时间跟相关方确认优先级，力保最重要的事情能够及时完成。如果被插入了其他优先级更高的事，也要尽快知会事情被推迟的相关方</strong>。</p>
<h2 id="5-功劳是大家的"><a href="#5-功劳是大家的" class="headerlink" title="5. 功劳是大家的"></a>5. 功劳是大家的</h2><p>有些人，干活的时候一天八回地狂催别人。活干完了，人没影了，汇报工作成果时只字不提其他人，仿佛活全是他自己一人干的。这样的人，执行力再好，下次再找人干活时，也难得到别人心甘情愿的帮忙。</p>
<p><strong>无论别人是帮了多小的忙，在事情结束后也要表示感谢</strong>。道谢要不嫌隆重，能当面谢的尽量当面去谢，能单独打电话谢的就不要讲其他事情时顺便谢，发邮件表示感谢的话尽量抄送对方老板详细说明感谢的事由。这些事情并不费劲，却会让别人更愿意帮助你。</p>
<h2 id="6-别吐槽，给解决方案"><a href="#6-别吐槽，给解决方案" class="headerlink" title="6. 别吐槽，给解决方案"></a>6. 别吐槽，给解决方案</h2><p>有的人，你一找他解决问题，就开启吐槽模式，内容全是“我有多辛苦多不容易，能做的我都做了，这些问题全是因为balabala……”</p>
<p>每当这时我都好想告诉对方“亲，没有人关心你的心路历程。”我不关心你有多辛苦多不容易你做了多少事情，为什么别人就是没按照你设定的剧本做。我只知道现在有一个问题，我找你只想知道“怎样解决这个问题”。</p>
<p><strong>当有一个问题时，请直奔主题，给解决方案</strong>。</p>
<h2 id="7-敢作敢当"><a href="#7-敢作敢当" class="headerlink" title="7. 敢作敢当"></a>7. 敢作敢当</h2><p>当事情搞砸时，最次的做法是想尽办法推卸责任，最好的做法是<strong>诚恳道歉，评估影响范围，想尽办法用最快速度修正错误，弥补损失</strong>。</p>
<p>不要耍滑头，得意于自己把责任都推出去了，推卸得越成功，实际越失败。不要怕承担，勇于承担责任的人，别人才敢赋予你更大的责任。</p>
<h2 id="8-结语"><a href="#8-结语" class="headerlink" title="8. 结语"></a>8. 结语</h2><p>做到上面这些条，说难不难，说易也不易。说白了，就是要多操些心，多费些力。</p>
<p>有的人说一份工作而已，干嘛把自己搞这么累。我就做好自己这部分，别人的事我不管，跟我没关系，只要出事了别怪我头上就行。当然，若真这么想，没什么不行的，您高兴就好。只是请不要再抱怨为什么自己怀才不遇，升职加薪总是比别人慢。多劳多得，很公平，不是么？</p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/blog/2016/08/生活感悟-2016-08-17-pleasure-working-with-you.html">http://www.sguotao.com/blog/2016/08/生活感悟-2016-08-17-pleasure-working-with-you.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;文章作者：咪喵&lt;br&gt;文章来源： TalentGuide &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么有的人，明明事情做得不少，却永远没人说他好？有的人，不管做什么都得到周围人众口一词的称赞？&lt;/p&gt;
&lt;p&gt;真的是因为两个人做的事差很多吗？也
    
    </summary>
    
      <category term="生活感悟" scheme="http://www.sguotao.com/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="生活感悟" scheme="http://www.sguotao.com/tags/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>和光同尘，静水流深</title>
    <link href="http://www.sguotao.com//blog/2016/05/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F-2016-05-09-getdown-to-my-work.html"/>
    <id>http://www.sguotao.com//blog/2016/05/生活感悟-2016-05-09-getdown-to-my-work.html</id>
    <published>2016-05-08T09:00:00.000Z</published>
    <updated>2017-04-27T03:12:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>北京时间，2016年5月1日，完成了自己人生中一件非常重要的事情，我结婚了，当自己去看婚礼视频的时候，那因紧张而僵硬的表情，在大方自如的媳妇面前，感觉是那么的不协调，我对自己说，我是多么的幸运，能遇到这样的女孩，同时，我也感到一份支撑，一种依靠。2016，我不再单打独斗了。</p>
<p>总想快速从结婚的喜悦中调整到繁忙的工作中来，2016年，对于公司也是非常重要的一年，能成为其中的一员，见证公司和自己的成长，我想着本身也是一种缘分，希望自己能在2016年剩下的日子里，看到自己持续的成长。</p>
<p>今天看到一篇博客，其中的一些文字，让自己感触很深：</p>
<ol>
<li>好奇心比雄心走得更远：很多人对未来空有满腔的雄心壮志，往往不如对技术要有一份好奇心，一份探索欲，再加上一份执着的人。</li>
<li>要有open的心态：曾经的我也只是把自己的所思所得都放入自己的云笔记，很少整理，这其实不利于技术发展，有空应该多整理自己零散的知识点，觉得不错的点可以拿出来写成博客，那是对能力的又一层提升。另外，在低头做技术的同时，还应该有空抬头看世界，不能闭门造车。</li>
<li>天道酬勤：学历只能代表过去，能力代表现在，潜力代表未来！ 你不把自己逼一把，你压根不知道自己有多优秀，只要努力去学习，去挖掘潜力，进而提升自我技术修为，未来不再是梦！共勉之！</li>
</ol>
<p>解决问题的方式：遇到问题，一定要先尝试自己解决，解决不了再请教他人。这是对自己的一个锻炼，也是对他人的一个尊重，可以有多种途径自行搜索：</p>
<ol>
<li>百度一下，很多时候还是能有所帮助的，不要过分强调google，完全抛弃百度，毕竟中文看起来比较快；</li>
<li>先中文关键词google一下；再英文关键词google一下；</li>
<li>stackoverflow.com、知乎等技术问答网站内直接搜索；</li>
<li>查看官方文档；</li>
<li>如果有源码，尝试直接看源码，看能否解决；</li>
<li>有空可以多逛逛github，多看看Google官方文档，多关注社区，定会收获不少；</li>
</ol>
<p>当然，最最重要的是<strong>能静得下心，持之以恒地专研技术</strong>。</p>
<p>以前，自己总是用“和光同尘，静水流深”来勉励自己，现在更加觉着这句话的重要。浮躁是在自己这个年纪，甚至是现在这个社会，比较普遍的现象。希望自己不要眼高手低，脚踏实地的走好现在的路，低调做人，高调做事。</p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/blog/2016/05/生活感悟-2016-05-09-getdown-to-my-work.html">http://www.sguotao.com/blog/2016/05/生活感悟-2016-05-09-getdown-to-my-work.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;北京时间，2016年5月1日，完成了自己人生中一件非常重要的事情，我结婚了，当自己去看婚礼视频的时候，那因紧张而僵硬的表情，在大方自如的媳妇面前，感觉是那么的不协调，我对自己说，我是多么的幸运，能遇到这样的女孩，同时，我也感到一份支撑，一种依靠。2016，我不再单打独斗了。
    
    </summary>
    
      <category term="生活感悟" scheme="http://www.sguotao.com/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="生活感悟" scheme="http://www.sguotao.com/tags/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>【RxJava】一 RxJava是什么</title>
    <link href="http://www.sguotao.com//blog/2016/01/RxJava-2016-01-25.html"/>
    <id>http://www.sguotao.com//blog/2016/01/RxJava-2016-01-25.html</id>
    <published>2016-01-25T02:27:04.000Z</published>
    <updated>2017-04-27T03:06:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-RxJava是什么？"><a href="#1-RxJava是什么？" class="headerlink" title="1.RxJava是什么？"></a>1.RxJava是什么？</h2><p>GitHub官方给出的解释：</p>
<blockquote>
<p>RxJava – Reactive Extensions for the JVM – a library for composing asynchronous and event-based programs using observable sequences for the Java VM.</p>
</blockquote>
<p>即一个运行在JVM上的库，通过一个<strong>可观测的序列</strong>，组成的<strong>异步的</strong>、<strong>基于事件的</strong>程序。</p>
<h2 id="2-为什么要使用RxJava"><a href="#2-为什么要使用RxJava" class="headerlink" title="2.为什么要使用RxJava?"></a>2.为什么要使用RxJava?</h2><p>在平时的开发中，当遇到如进行访问网络请求，数据库的查询操作，文件读写操作等耗时操作时，都会放在子线程中来进行。<br>让复杂的业务逻辑，回归简单和清晰。</p>
<h2 id="3-怎样使用RxJava"><a href="#3-怎样使用RxJava" class="headerlink" title="3.怎样使用RxJava?"></a>3.怎样使用RxJava?</h2><h3 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h3><p><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">https://github.com/ReactiveX/RxJava</a></p>
<p>RxAndroid响应式开发</p>
<p>1，Rx是响应式编程的意思，本质是观察者模式，是以观察者（Observer）和订阅者（Subscriber)为基础的异步响应方式。<br>2，在Android编程时，经常会使用后台线程，那么就可以使用这种方式，目前的异步编程方式都会导致一些问题，如：</p>
<p>Asynctasks can easily lead to memory leaks.<br>CursorLoaders with a ContentProvider require a large amount of configuration and boilerplate code to setup.<br>Services are intentded for longer running background tasks and not fast-finishing operations,such as making<br>a network call or loading content from a database.<br>访问网络接口调用返回数据，尤其在使用接口回调时，处理数据比较麻烦。</p>
<p>Rx模式以及优点<br>1，使用观察者模式；<br>    创建：Rx可以方便的创建事件流和数据流；<br>    组合：Rx使用查询式的操作符组合和变换数据流；<br>    监听：Rx可以订阅任何可观察数据流并执行操作；<br>2，简化代码<br>    函数式风格:对可观察数据流使用无副作用的输入输出函数，避免了程序里错综复杂的状态；<br>    简化代码:Rx的操作符通常可以将复杂的难题简化成为很少的几行代码；<br>    异步错误处理:传统的try/catch没办法处理异步计算，Rx提供了合适的错误处理机制；<br>    轻松使用并发:Rx的Observerables和Schedulers让开发者可以摆脱底层的线程同步和各种并发问题。</p>
<p>响应式编程<br>    Rx提供了一系列的操作符，你可以使用它们来过滤（filter）、选择（select）、变换（transform)、<br>    结合（combine)和组合（compose)多个Observable，这些操作符让执行和复合变得非常高效。</p>
<pre><code>你可以把Observable当做Iterable的推送方式的等价物，使用Iterable,消费者从生产者哪里获取数据，
线程阻塞直至数据准备好。使用Observable，在数据准备好时，生产者将数据推送给消费者。数据可以同步
或异步的到达，这种方式更灵活。
</code></pre><p>RxJava的观察者模式<br>    观察者模式面向的需求是：A对象（观察者）对B对象（被观察者）的某种变化高度敏感，<br>    需要在B变化的一瞬间做出反应。</p>
<pre><code>RxJava有四个基本概念：
    Observable（可观察者,即被观察者）
    Observer（观察者）
    subscribe（订阅）
    事件

Observable和Observer通过subscribe()方法实现订阅关系，从而Observerable可以在需要的时候发出事件来通知Observer。
</code></pre><p>RxJava基本实现<br>    1.创建Observer<br>        Observer即观察者，它决定事件触发的时候将有怎样的行为。RxJava中的Observer接口实现方式：<br>    2.创建Observable<br>        Observable即被观察者，它决定什么时候触发事件以及触发怎样的事件。RxJava使用create()方法<br>        来创建一个Observable，并为它定义事件触发规则；<br>    3.Subscribe(订阅)<br>        创建了Observable和Observer之后，再用subscribe()方法将它们联结起来，整条链子就可以工作了。</p>
<p>创建观察者<br>    在异步模型中创建观察者；<br>    定义一个方法，它完成某些任务，然后从异步调用中返回一个值，这个方法时观察者的一部分。<br>    将这个异步调用本身定义为一个Observable<br>    观察者通过订阅（Subscribe)操作关联到那个Observable；<br>    继续业务逻辑，等方法返回时，Observable会发射结果，观察者的方法会开始处理结果或结果集；</p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/blog/2016/01/RxJava-2016-01-25.html">http://www.sguotao.com/blog/2016/01/RxJava-2016-01-25.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-RxJava是什么？&quot;&gt;&lt;a href=&quot;#1-RxJava是什么？&quot; class=&quot;headerlink&quot; title=&quot;1.RxJava是什么？&quot;&gt;&lt;/a&gt;1.RxJava是什么？&lt;/h2&gt;&lt;p&gt;GitHub官方给出的解释：&lt;/p&gt;
&lt;blockquote
    
    </summary>
    
      <category term="RxJava" scheme="http://www.sguotao.com/categories/RxJava/"/>
    
    
      <category term="RxJava" scheme="http://www.sguotao.com/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>听了好多道理，却还是做不好工作</title>
    <link href="http://www.sguotao.com//blog/2015/12/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F-2015-12-30-executive-ability.html"/>
    <id>http://www.sguotao.com//blog/2015/12/生活感悟-2015-12-30-executive-ability.html</id>
    <published>2015-12-30T13:18:59.000Z</published>
    <updated>2017-04-27T03:11:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>文章来源：微信公众号</p>
</blockquote>
<p>海尔的企业文化内刊上，刊着一张员工砸冰箱的黑白照片。这件事发生在1985年，海尔公司涣散不堪，只能长期靠借钱维持工厂运营。砸冰箱事件源于一封举报信，用户反映海尔的电冰箱有质量问题。经检查，这类不合格的冰箱还有76台，张瑞敏当即决定把冰箱全部砸掉，并由生产者自己动手。</p>
<p>至此，“具备责任心、做好每一个细节”的理念深深刻在每一个员工心里。海尔的管理精髓之一是：日事日毕，日清日高。强调高效的执行力，把每天的工作做完、做好。在此理念下，海尔从一个濒临倒闭的小厂，蜕变为享誉国内外的大集团。执行力的力量功不可没。</p>
<p>我的老大Ella在创业前，曾在腾讯干过几年，当时工作中他们提得最多的一个词，就是<strong>“执行力”</strong>。这个习惯让她在以后的创业中受益匪浅。<br>Ella曾问过阿里高管：论人才储备，阿里18罗汉，占据各部高层，为什么他们有那么多人可用？</p>
<p>对方回答：平凡人做非凡事。企业偏爱执行力强的平凡人，愿意帮助这样的员工成长。执行力对职业发展的重要性可见一斑。再有想法不去执行，也是空谈。那么，执行力具体指的是什么？从概念上讲，它包含三个方面：完成任务的意愿、完成任务的能力、完成任务的程度。我用三个小故事来分别解释这三个方面：</p>
<ol>
<li><p>我有个朋友，一直口口声声说暗恋一名女孩儿，却从来没有展开追求。他并不是不知道怎么追女孩，在给别人建议时，他头头是道。<br>“你每天给她买早餐，悄悄放在桌上，坚持三个月，肯定成！”<br>“你为什么不这样做？”<br>“不行不行，现在还不是时候，我再等等吧。”<br>等着等着，然后就没有然后了。女孩跟别人好了。心中思绪涌动，但不愿付诸行动。<br><strong>此乃缺乏执行的意愿。</strong></p>
</li>
<li><p>一群老鼠开会，研究怎样才能躲避猫的袭击。有老鼠提议说：不如在猫脖子上挂一个铃铛，猫一靠近，我们就能听到然后逃跑了。大家纷纷赞同这是个好点子，鼠老大决定就这么办！那么问题来了，谁去挂这个铃铛呢？所有老鼠都低着头，谁也不愿意接这个任务，做就等于死。直到鼠老大去世，这个决定依然没有被实施。<br><strong>究其原因，是老鼠们根本不具备执行它的能力。</strong></p>
</li>
<li><p>闺蜜梅梅一个月前定下减肥计划——每天坚持跑步半小时。一个月来，她一天也没落下，但减肥大业毫无成效，这让我很困惑。在陪她跑了一次之后，我彻底明白其中原因：半小时时间里，有10分钟她在做准备工作，10分钟在停下来喝水休息，剩下10分钟才是真正运动的时间。<br><strong>执行程度低，看似完成了目标，实则收效甚微。</strong></p>
</li>
</ol>
<p>以上三个故事，都是缺乏执行力的表现。在职场中，因为多次没有完成工作任务而被解雇的例子比比皆是，相信你也碰到或耳闻过。而执行力强的那些人，总是晋升最快的一类。你可能要问了：道理我都懂，可为什么执行起来这么困难呢？</p>
<p>Lagou将执行力不足的原因总结为三点：</p>
<ul>
<li>目标定得太离谱；</li>
<li>想得多却做得少；</li>
<li>拖延后潦草收场；</li>
</ul>
<p>为了摆脱“听了很多道理，却依然做不好工作”的困扰，Lagou 针对原因对症下药，精心准备了10条既有用、又易操作的小技巧，来助你提高执行力，使职场之路更加顺畅。</p>
<h2 id="1-明确目标"><a href="#1-明确目标" class="headerlink" title="1.明确目标"></a>1.明确目标</h2><p>很多时候你会发现，决定好了的事情，执行起来却非常困难，这通常是目标设定不清晰导致的。目标超过个人能力、目标过大、周期过长、不能分解、指向不明、不掌握资源等等，都会导致目标难以执行。在设定目标的时候，首先要去判定目标的明确性，这时候，我们可以用到著名的“SMART原则”，来衡量已定目标的明确与否。“SMART原则”是：</p>
<ul>
<li>目标必须是具体的(Specific);</li>
<li>目标必须是可以衡量的(Measurable);</li>
<li>目标必须是可以达到的(Attainable);</li>
<li>目标必须和其他目标具有相关性(Relevant);</li>
<li>目标必须具有明确的截止期限(Time-based)。</li>
</ul>
<p>例如：你接到一项任务，做一款H5，旨在通过H5实现用户的转化，促使他们去注册你公司的APP。你把这项任务的目标设定为——尽最大可能做出一款能够刷爆朋友圈的H5，实现用户的高效转化——这会让你在实施这项任务时感到茫然。</p>
<p>运用SMART原则，此项目标的设定应为：在两周的时间内（明确期限），做一款H5，实现1万的用户转化（具体目标、可衡量）。在设定这个量的时候，应当考虑渠道数和粉丝数，并参考以往的推广案例里，它们的转化率是多少。如果推广渠道的粉丝总数才5万，你设定1万的转化量，那几乎是不切实际的。</p>
<h2 id="2-将目标分解成多个小目标"><a href="#2-将目标分解成多个小目标" class="headerlink" title="2.将目标分解成多个小目标"></a>2.将目标分解成多个小目标</h2><p>目标过大、周期过长的任务，会让人不知从何下手。在处理一项庞杂的事务时，很容易出现本末倒置、战线延长的现象。成功hold住大目标的秘诀在于，将之分解为一个个小目标，安排好时间，逐一攻破。目标分解的经典案例是一个关于马拉松的故事：1984年东京国际马拉松邀请赛中，一个名不见经传的山本田一出人意料地夺得冠军，他的技巧在于把路程分解成几个小目标：银行、大树、红房子。他说：“比赛开始后，我就以百米冲刺的速度奋力向第一个目标冲去，到达第一个目标后，我同样的速度冲向第二个目标— —40多公里的路程就被我分解成这么几个小目标轻松地跑完了。”</p>
<h2 id="3-设定奖励机制"><a href="#3-设定奖励机制" class="headerlink" title="3.设定奖励机制"></a>3.设定奖励机制</h2><p>为自己完成目标设定一个奖励，会让你更有动力去做这件事。比如在你面临一项棘手的任务时，告诉自己如果完成了，就可以去买一个你心仪已久的东西，这会让你更有动力去朝目标努力。同样，可以将奖励机制细分在每个小目标里。每完成一个部分，给自己一个小小的奖励，既能减轻困难感，又能让你更有动力去完成下一个目标。</p>
<h2 id="4-寻找执行后果的吸引力"><a href="#4-寻找执行后果的吸引力" class="headerlink" title="4.寻找执行后果的吸引力"></a>4.寻找执行后果的吸引力</h2><p>在执行任务之前，先去考量完成目标能给你带来的好处。这里的好处可能是：得到领导的肯定、同事的赞许、职位晋升的可能、金钱收入、经验值增长……这样，你的行动就有了一个具有吸引力的目的地，吸引你主动向前，提高执行力。</p>
<h2 id="5-寻找同伴"><a href="#5-寻找同伴" class="headerlink" title="5.寻找同伴"></a>5.寻找同伴</h2><p>行为是具有传染性的。试想，如果你与他人共同完成一项任务，当你看到别人已经行动了，你好意思待着不动么？同伴的参与会督促你尽快执行任务，在“自己不能做得比别人差”的心理作用下，让你的执行效果更加地好。</p>
<h2 id="6-在公共场合公开进度-寻求监督"><a href="#6-在公共场合公开进度-寻求监督" class="headerlink" title="6.在公共场合公开进度,寻求监督"></a>6.在公共场合公开进度,寻求监督</h2><p>很多时候，面子是促进一个人完成目标的重要因素。把你要做的事写在公开场合，让朋友监督，说出去的话，泼出去的水，在众目睽睽之下，为了不丢脸，硬着头皮熬夜也要把这件事做完。</p>
<h2 id="7-五分钟打扫房间法则"><a href="#7-五分钟打扫房间法则" class="headerlink" title="7.五分钟打扫房间法则"></a>7.五分钟打扫房间法则</h2><p>告诉自己只花5分钟去打扫一下房间，看起来很快很简单的样子。事实上，一旦你开始打扫，你就很可能不会在5分钟之后真的停止打扫。打扫后的改观让你得到了成就感，并且想要一鼓作气打扫完毕。在这种观念下，想要再拖延一段时间在开始的想法，就被攻破了。</p>
<h2 id="8-设定一个你难以承受的惩罚措施"><a href="#8-设定一个你难以承受的惩罚措施" class="headerlink" title="8.设定一个你难以承受的惩罚措施"></a>8.设定一个你难以承受的惩罚措施</h2><p>为自己设定一个完不成目标就必须接受的惩罚措施，而且，这个惩罚必须是你很难承受的。比如，在你经济紧张的情况下，告诉朋友，如果自己没有达到目标，就给他一千块钱，并立下字据。如果输了那一千，你很可能接下来的日子会十分拮据，避免不受到惩罚，会迫使你提高执行力。</p>
<p>《为学》里曾说到：</p>
<blockquote>
<p>“自恃其聪与敏而不学者，自败者也；不自限其昏与庸而力学不卷者，自力者也。”</p>
</blockquote>
<p>智力有高低，思想有深浅，但如果不付诸行动去执行，一切都是无用的。在职业成长过程中，执行力才是最好的催促剂。就如老大Ella所说的：“甩开膀子干，赢过一切造作。每一个人，无论今天是什么起点，一切皆有可能。”</p>
<p>新的一年马上要来了，开始行动吧!!</p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/blog/2015/12/生活感悟-2015-12-30-executive-ability.html">http://www.sguotao.com/blog/2015/12/生活感悟-2015-12-30-executive-ability.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;文章来源：微信公众号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;海尔的企业文化内刊上，刊着一张员工砸冰箱的黑白照片。这件事发生在1985年，海尔公司涣散不堪，只能长期靠借钱维持工厂运营。砸冰箱事件源于一封举报信，用户反映海尔的电冰箱有质量问题。经检
    
    </summary>
    
      <category term="生活感悟" scheme="http://www.sguotao.com/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="生活感悟" scheme="http://www.sguotao.com/tags/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>Hello 2015</title>
    <link href="http://www.sguotao.com//blog/2015/01/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F-2015-01-21-my-2014.html"/>
    <id>http://www.sguotao.com//blog/2015/01/生活感悟-2015-01-21-my-2014.html</id>
    <published>2015-01-01T04:00:00.000Z</published>
    <updated>2017-04-27T03:10:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>都说开通博客，要写篇文章纪念一下，借此感谢Github，Jekyll,MarkDown,感谢像闫肃,黄玄这样的爱分享的童鞋，2014年对我来说，是很重要的一年，认识了很多人，失去了很多人，总得来说，成长了很多，借此写一篇，纪念我逝去的2014。</p>
<h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>2014年，换了工作，离开了PBI，离开了原来熟悉的环境，离开了熟悉的同事，告别了朝九晚五熟悉的生活节奏，当然也搬离了住了2年的海淀，一切都像当年，从学校出来，搬到海淀的情景。时光荏苒，场景再现，不变的是自己，变了的是身边的人。</p>
<p>以前都是在Android源码的环境下，编译代码，调试应用，曾经一度以为自己对很多知识已经足够了解了，可是突然到了一个更大的平台，你才发现，突来的状况，还是会让你措手不及，所以，当你以为自己很牛了，那是因为你见识的还不够多，在更大的🐂面前，你还是攻击力只有5的渣儿渣儿。</p>
<p>来到了Letv，一切都要从零开始，昨天的已经成为过去，对于未来，还需要今天的积攒，未来还有很长的路要走。</p>
<h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p>2014年，研究生进入了第二年，习惯了没有休息日的节奏，突然闲下来，还会有些不适应。在读研之前，没有认真的想过，自己为什么要读，可能是因为曾经考研未果的不甘吧。如果说，读研的收获是为了见识的更多，学到的更多，那我最大的收获，就是认识了很多小伙伴，是他们让我改变了很多，让我发现自己很多性格上的缺点，从而去弥补不足。</p>
<p>2014年，顺利的通过了开题报告，接下来就安心的准备毕业答辩了，在准备的过程中，把工作中内容和答辩的内容结合起来，深入的去了解移动流媒体的内容，相信在未来的工作中，会有很大的帮助。</p>
<h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p>2014年，去了江西的三清山，当时还没想到，那竟然是最后一次和同事们一起出去玩，好在当时还没有这种离别的情绪，不然也不会玩的这么尽兴。2015年了，衷心的祝森涛，田田，尚喆，赵哥，晶晶…一切都好。</p>
<p>2014年，去了筹划了已久的西藏，认识了能歌善舞的ZuoZuo，特别会聊天的DiDi，还有原原，感谢徐老师拍的照片和视频，本想写一篇日记记录一下来着，看来只能把这事儿推到2015了，很感慨，为什么人们都说你们变黑了，唯独说我变白了呢？</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>那时我们有梦，<br>关于青春，关于爱情，<br>关于穿于世界的旅行。</p>
</blockquote>
<p>2014年，错过了一些人，有些是因为客观的原因，更多的是因为自己。杰伦结婚了，我们的青春岁月也结束了；科比，阿伦最后一年征战NBA，以后再想看他们打球，只能去翻看以前的视频了，从来没想过他们离开的日子，他们就老了。以后再做错事儿，再也不能拿自己年轻当借口了，遇到合适的人，不能再错过了。</p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/blog/2015/01/生活感悟-2015-01-21-my-2014.html">http://www.sguotao.com/blog/2015/01/生活感悟-2015-01-21-my-2014.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;动机&quot;&gt;&lt;a href=&quot;#动机&quot; class=&quot;headerlink&quot; title=&quot;动机&quot;&gt;&lt;/a&gt;动机&lt;/h3&gt;&lt;p&gt;都说开通博客，要写篇文章纪念一下，借此感谢Github，Jekyll,MarkDown,感谢像闫肃,黄玄这样的爱分享的童鞋，2014年对我来
    
    </summary>
    
      <category term="生活感悟" scheme="http://www.sguotao.com/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="生活感悟" scheme="http://www.sguotao.com/tags/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>Android基础16 传感器</title>
    <link href="http://www.sguotao.com//blog/2011/08/Android%E5%9F%BA%E7%A1%80-2011-08-14-android-basic-16.html"/>
    <id>http://www.sguotao.com//blog/2011/08/Android基础-2011-08-14-android-basic-16.html</id>
    <published>2011-08-16T02:27:04.000Z</published>
    <updated>2017-04-27T02:45:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-传感器"><a href="#1-传感器" class="headerlink" title="1. 传感器"></a>1. 传感器</h2><p>传感器类型：方向、加速度(重力)、光线、磁场、距离(临近性)、温度等。 </p>
<table>
<thead>
<tr>
<th>方向传感器</th>
<th style="text-align:center">Sensor.TYPE_ORIENTATION</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>加速度(重力)传感器 | Sensor.TYPE_ACCELEROMETER<br>光线传感器 | Sensor.TYPE_LIGHT<br>磁场传感器 | Sensor.TYPE_MAGNETIC_FIELD<br>距离(临近性)传感器 | Sensor.TYPE_PROXIMITY<br>温度传感器 | Sensor.TYPE_TEMPERATURE</p>
<p>代码实现：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取某种类型的感应器</span></div><div class="line">Sensor <span class="section">sensor</span> = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);</div><div class="line"><span class="comment">//注册监听，获取传感器变化值</span></div><div class="line">sensorManager.registerListener(listener, <span class="section">sensor</span>, SensorManager.SENSOR_DELAY_GAME);</div></pre></td></tr></table></figure>
<p>上面第三个参数为采样率：最快、游戏、普通、用户界面。当应用程序请求特定的采样率时，其实只是对传感器子系统的一个建议，不保证特定的采样率可用。</p>
<table>
<thead>
<tr>
<th>最快</th>
<th style="text-align:center">SensorManager.SENSOR_DELAY_FASTEST</th>
<th style="text-align:center">最低延迟，一般不是特别敏感的处理不推荐使用，该种模式可能造成手机电力大量消耗，由于传递的为原始数据，算法不处理好将会影响游戏逻辑和UI的性能。</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p> 游戏 | SensorManager.SENSOR_DELAY_GAME | 游戏延迟，一般绝大多数的实时性较高的游戏都使用该级别。<br>普通 | SensorManager.SENSOR_DELAY_NORMAL | 标准延迟，对于一般的益智类或EASY级别的游戏可以使用，但过低的采样率可能对一些赛车类游戏有跳帧现象。<br>用户界面 | SensorManager.SENSOR_DELAY_UI | 一般对于屏幕方向自动旋转使用，相对节省电能和逻辑处理，一般游戏开发中我们不使用。</p>
<p>下面介绍如何获取加速度(重力)传感器和方向传感器的测量值：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> TextView accelerometer;</div><div class="line">	<span class="keyword">private</span> TextView orientation;</div><div class="line">	<span class="keyword">private</span> SensorManager sensorManager;</div><div class="line">	</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.main);</div><div class="line">        <span class="comment">//①获取感应器管理器</span></div><div class="line">        sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);</div><div class="line">        accelerometer = (TextView) findViewById(R.id.accelerometer);  </div><div class="line">        orientation = (TextView) findViewById(R.id.orientation);  </div><div class="line">    &#125;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//②获取重力加速度传感器</span></div><div class="line">		Sensor sensor = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);</div><div class="line">		<span class="comment">//③注册监听器</span></div><div class="line">	 	sensorManager.registerListener(listener, sensor, SensorManager.SENSOR_DELAY_GAME);	</div><div class="line">		Sensor sensor1 = sensorManager.getDefaultSensor(Sensor.TYPE_ORIENTATION);<span class="comment">//获取方向传感器</span></div><div class="line">		sensorManager.registerListener(listener, sensor1, SensorManager.SENSOR_DELAY_GAME);	</div><div class="line">		<span class="keyword">super</span>.onResume();</div><div class="line">	&#125; </div><div class="line">    <span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//④注消所有传感器监听</span></div><div class="line">    	sensorManager.unregisterListener(listener); </div><div class="line">		<span class="keyword">super</span>.onPause();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">private</span> SensorEventListener listener = <span class="keyword">new</span> SensorEventListener() &#123;		</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSensorChanged</span><span class="params">(SensorEvent event)</span> </span>&#123;<span class="comment">//当传感器的值发生变化			</span></div><div class="line">			<span class="keyword">float</span> x = event.values[SensorManager.DATA_X];      </div><div class="line">        	<span class="keyword">float</span> y = event.values[SensorManager.DATA_Y];      </div><div class="line">		    <span class="keyword">float</span> z = event.values[SensorManager.DATA_Z];  </div><div class="line">		<span class="keyword">switch</span> (event.sensor.getType()) &#123;</div><div class="line">			<span class="keyword">case</span> Sensor.TYPE_ACCELEROMETER:</div><div class="line">				accelerometer.setText(<span class="string">"Accelerometer Sensor: "</span> + x + <span class="string">", "</span> + y + <span class="string">", "</span> + z); </div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> Sensor.TYPE_ORIENTATION:</div><div class="line">				orientation.setText(<span class="string">"Orientation Sensor: "</span> + x + <span class="string">", "</span> + y + <span class="string">", "</span> + z); </div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;		</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAccuracyChanged</span><span class="params">(Sensor sensor, <span class="keyword">int</span> accuracy)</span> </span>&#123;<span class="comment">//当传感器的精度变化时	</span></div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>方法orientation.setText(x，y，z);参数的含义</strong></p>
<ol>
<li>x该值表示方位，0代表北（North）；90代表东（East）；180代表南（South）；270代表西（West）如果x值正好是这4个值之一，并且手机是水平放置，手机的顶部对准的方向就是该值代表的方向。</li>
<li>y值表示倾斜度，或手机翘起的程度。当手机绕着X轴倾斜时该值发生变化。y值的取值范围是-180≤y值 ≤180。</li>
<li>z值来测量桌子等物体的倾斜度。<br>z值表示手机沿着Y轴的滚动角度。表示手机沿着Y轴的滚动角度。取值范围是-90≤z值≤90。假设将手机屏幕朝上水平放在桌面上，这时如果桌面是平的，z值应为0。将手机左侧逐渐抬起时，z值逐渐变小，直到手机垂直于桌面放置，这时z值是-90。将手机右侧逐渐抬起时，z值逐渐增大，    直到手机垂直于桌面放置，这时z值是90。在垂直位置时继续向右或向左滚动，z值会继续在-90至90之间变化。</li>
</ol>
<p>假设将手机屏幕朝上水平放在桌子上，这时如果桌子是完全水平的，y值应该是0（由于很少有桌子是绝对水平的，因此，该值很可能不为0，但一般都是-5和5之间的某个值）。这时从手机顶部开始抬起，直到将手机沿X轴旋转180度（屏幕向下水平放在桌面上）。在这个旋转过程中，y值会在0到-180之间变化，也就是说，从手机顶部抬起时，y的值会逐渐变小，直到等于-180。如果从手机底部开始抬起，直到将手机沿X轴旋转180度，这时y值会在0到180之间变化。也就是y值会逐渐增大，直到等于180。可以利用y值和使用方向传感器（案例：指南针）</p>
<h2 id="2-NinePatch图片"><a href="#2-NinePatch图片" class="headerlink" title="2. NinePatch图片"></a>2. NinePatch图片</h2><p><img src="http://obovytgzz.bkt.clouddn.com/9patch1.png" alt="图片1"><br>NinePatch是一种很有用的PNG图片格式，它可以在特定区域随文字大小进行缩放。如下：</p>
<p>从上图可以看到，背景图片的中间区域会随着文字的大小进行缩放。背景图片是一张NinePatch图片。 NinePatch图片可以使用android自带的draw9patch工具来制作，该工具在SDK安装路径的tools目录下。执行该工具，然后点击“File”-&gt;“open 9-path”打开一张用于制作NinePatch图片的原来图片。在画布的上方和左方的边上画线指定缩放区域，勾选“Show patches”可显示画定的区域，绿色为固定大小区域，红色为缩放区域，文字会摆放在红色区域。制作完后，点击“File” “save 9-path”保存图片，draw9patch工具会自动为图片加上*.9.png后缀。</p>
<p>把制作好的图片拷贝进项目的res/drawable目录，然后编写代码。如下：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;TextView android:layout_width=<span class="string">"wrap_content"</span> </div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    android:<span class="built_in">text</span>=<span class="string">"退出"</span> android:textColor=<span class="string">"#330000"</span></div><div class="line">    android:<span class="built_in">background</span>=<span class="string">"@drawable/button"</span>/&gt;</div></pre></td></tr></table></figure>
<p><img src="http://obovytgzz.bkt.clouddn.com/9patch2.png" alt="图片2"></p>
<h2 id="3-触摸事件"><a href="#3-触摸事件" class="headerlink" title="3. 触摸事件"></a>3. 触摸事件</h2><h3 id="3-1-拖拽"><a href="#3-1-拖拽" class="headerlink" title="3.1 拖拽"></a>3.1 拖拽</h3><p>XML配置：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;ImageView  </div><div class="line">		android:<span class="built_in">id</span>=<span class="string">"@+id/img"</span></div><div class="line">	    android:layout_width=<span class="string">"wrap_content"</span> </div><div class="line">	    android:layout_height=<span class="string">"wrap_content"</span> </div><div class="line">	    android:scaleType=<span class="string">"matrix"</span></div><div class="line">	    android:src=<span class="string">"@drawable/bb2"</span>   /&gt;</div></pre></td></tr></table></figure>
<p>Java代码实现：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">ImageView imageView = (ImageView) findViewById(R.id.img);</div><div class="line">imageView.setOnTouchListener(<span class="keyword">new</span> MyListener());</div><div class="line"><span class="keyword">private</span> final <span class="keyword">class</span> <span class="title">MyListener</span> <span class="title">implements</span> <span class="title">OnTouchListener</span> &#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">float</span> x;	</div><div class="line">		<span class="keyword">private</span> <span class="keyword">float</span> y;</div><div class="line">		<span class="keyword">private</span> Matrix startMatrix = <span class="keyword">new</span> Matrix();</div><div class="line">		<span class="keyword">private</span> Matrix matrix = <span class="keyword">new</span> Matrix();</div><div class="line">		<span class="function"><span class="keyword">public</span> boolean <span class="title">onTouch</span>(<span class="params">View v, MotionEvent <span class="keyword">event</span></span>) </span>&#123;</div><div class="line">			<span class="keyword">switch</span> (<span class="keyword">event</span>.getAction()) &#123;</div><div class="line">				<span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">					x = <span class="keyword">event</span>.getX();</div><div class="line">					y = <span class="keyword">event</span>.getY();</div><div class="line">					startMatrix.<span class="keyword">set</span>(imageView.getImageMatrix());</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">					matrix.<span class="keyword">set</span>(startMatrix);</div><div class="line">					matrix.postTranslate(<span class="keyword">event</span>.getX() - x, <span class="keyword">event</span>.getY() - y);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			imageView.setImageMatrix(matrix);</div><div class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-2-多点触控"><a href="#3-2-多点触控" class="headerlink" title="3.2 多点触控"></a>3.2 多点触控</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> final <span class="keyword">class</span> <span class="title">MyListener</span> <span class="title">implements</span> <span class="title">OnTouchListener</span> &#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">float</span> x;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">float</span> y;</div><div class="line">		<span class="keyword">private</span> Matrix matrix = <span class="keyword">new</span> Matrix();</div><div class="line">		<span class="keyword">private</span> Matrix startMatrix = <span class="keyword">new</span> Matrix();</div><div class="line">		<span class="keyword">private</span> <span class="keyword">int</span> type;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">float</span> startDis;</div><div class="line">		<span class="keyword">private</span> PointF point;</div><div class="line">		<span class="function"><span class="keyword">public</span> boolean <span class="title">onTouch</span>(<span class="params">View v, MotionEvent <span class="keyword">event</span></span>) </span>&#123;</div><div class="line">			System.<span class="keyword">out</span>.println(<span class="keyword">event</span>.getAction());</div><div class="line">			<span class="keyword">switch</span> (<span class="keyword">event</span>.getAction()) &#123;</div><div class="line">				<span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">					type = <span class="number">1</span>;</div><div class="line">					x = <span class="keyword">event</span>.getX();</div><div class="line">					y = <span class="keyword">event</span>.getY();</div><div class="line">					startMatrix.<span class="keyword">set</span>(imageView.getImageMatrix());</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">					matrix.<span class="keyword">set</span>(startMatrix);</div><div class="line">					<span class="keyword">if</span> (type == <span class="number">1</span>)</div><div class="line">						matrix.postTranslate(<span class="keyword">event</span>.getX() - x, <span class="keyword">event</span>.getY() - y);</div><div class="line">					<span class="keyword">else</span> &#123;</div><div class="line">						<span class="keyword">float</span> scale = getDis(<span class="keyword">event</span>) / startDis;</div><div class="line">						matrix.postScale(scale, scale, point.x, point.y);</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">case</span> MotionEvent.ACTION_POINTER_DOWN:</div><div class="line">					type = <span class="number">2</span>;</div><div class="line">					startMatrix.<span class="keyword">set</span>(imageView.getImageMatrix());</div><div class="line">					startDis = getDis(<span class="keyword">event</span>);</div><div class="line">					point = getPoint(<span class="keyword">event</span>);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			imageView.setImageMatrix(matrix);</div><div class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">getDis</span>(<span class="params">MotionEvent <span class="keyword">event</span></span>) </span>&#123;</div><div class="line">		<span class="keyword">float</span> a = <span class="keyword">event</span>.getX(<span class="number">1</span>) - <span class="keyword">event</span>.getX(<span class="number">0</span>);</div><div class="line">		<span class="keyword">float</span> b = <span class="keyword">event</span>.getY(<span class="number">1</span>) - <span class="keyword">event</span>.getY(<span class="number">0</span>);</div><div class="line">		<span class="keyword">return</span> (<span class="keyword">float</span>) Math.sqrt(a * a + b * b);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> PointF <span class="title">getPoint</span>(<span class="params">MotionEvent <span class="keyword">event</span></span>) </span>&#123;</div><div class="line">		<span class="keyword">float</span> x = (<span class="keyword">event</span>.getX(<span class="number">0</span>) + <span class="keyword">event</span>.getX(<span class="number">1</span>)) / <span class="number">2</span>;</div><div class="line">		<span class="keyword">float</span> y = (<span class="keyword">event</span>.getY(<span class="number">0</span>) + <span class="keyword">event</span>.getY(<span class="number">1</span>)) / <span class="number">2</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> PointF(x, y);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-读取SIM卡"><a href="#4-读取SIM卡" class="headerlink" title="4. 读取SIM卡"></a>4. 读取SIM卡</h2><p>文档位置：<br>android-sdk-windows\platforms\android-8\sources\ContactsProvider\src\com\android\providers\contacts\ CallLogProvider.java</p>
<h3 id="4-1-判断SIM卡属于那个运营商"><a href="#4-1-判断SIM卡属于那个运营商" class="headerlink" title="4.1 判断SIM卡属于那个运营商"></a>4.1 判断SIM卡属于那个运营商</h3><p>SIM卡的IMSI码是SIM卡唯一标识：IMSI 国际移动用户识别码（IMSI：International Mobile Subscriber Identification Number）是区别移动用户的标志，储存在SIM卡中，可用于区别移动用户的有效信息。IMSI由MCC、MNC、MSIN组成，其中MCC为移动国家号码，由3位数字组成，唯一地识别移动客户所属的国家，我国为460；MNC为网络id，由2位数字组成，用于识别移动客户所归属的移动网络，中国移动为00，中国联通为01,中国电信为03；MSIN为移动客户识别码，采用等长11位数字构成。唯一地识别国内GSM.移动通信网中移动客户。所以要区分是移动还是联通，只需取得SIM卡中的MNC字段即可。<br>需要权限</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.READ_PHONE_STATE"</span> /&gt;</div><div class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.ACCESS_COARSE_LOCATION"</span> /&gt;</div></pre></td></tr></table></figure>
<p>Java代码实现：<br>第一种方法:获取手机的IMSI码,并判断是中国移动\中国联通\中国电信</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">TelephonyManager telManager = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);</div><div class="line">        String imsi = telManager.getSubscriberId();</div><div class="line"> <span class="keyword">if</span>(imsi!=null)&#123;</div><div class="line"><span class="comment">//因为移动网络编号46000下的IMSI已经用完,所以虚拟了一个46002编号，134/159号段使用了此编号</span></div><div class="line">        <span class="keyword">if</span>(imsi.<span class="keyword">startsWith</span>(<span class="string">"46000"</span>) || imsi.<span class="keyword">startsWith</span>(<span class="string">"46002"</span>))&#123;  <span class="comment">//中国移动</span></div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(imsi.<span class="keyword">startsWith</span>(<span class="string">"46001"</span>))&#123; <span class="comment">//中国联通        </span></div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(imsi.<span class="keyword">startsWith</span>(<span class="string">"46003"</span>))&#123; <span class="comment">//中国电信</span></div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第二种方法</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">TelephonyManager telManager = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);</div><div class="line">        String <span class="keyword">operator</span> = telManager.getSimOperator();</div><div class="line"> <span class="keyword">if</span>(<span class="keyword">operator</span>!=<span class="literal">null</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">operator</span>.<span class="keyword">equals</span>(<span class="string">"46000"</span>) || <span class="keyword">operator</span>.<span class="keyword">equals</span>(<span class="string">"46002"</span>))&#123;  <span class="comment">//中国移动</span></div><div class="line">        &#125;<span class="function"><span class="keyword">else</span> <span class="title">if</span>(<span class="params"><span class="keyword">operator</span>.<span class="keyword">equals</span>(<span class="string">"46001"</span></span>))</span>&#123;<span class="comment">//中国联通</span></div><div class="line">        &#125;<span class="function"><span class="keyword">else</span> <span class="title">if</span>(<span class="params"><span class="keyword">operator</span>.<span class="keyword">equals</span>(<span class="string">"46003"</span></span>))</span>&#123;<span class="comment">//中国电信</span></div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-2-从SIM卡中获取联系人信息"><a href="#4-2-从SIM卡中获取联系人信息" class="headerlink" title="4.2 从SIM卡中获取联系人信息"></a>4.2 从SIM卡中获取联系人信息</h3><p>Android系统内部通过Contentprovider对外共享Sim卡存放的联系人等信息，你可以通过操作Contentprovider来实现Sim卡信息的添删改查操作。 需要权限：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.READ_PHONE_STATE"</span>/&gt;</div></pre></td></tr></table></figure>
<p>Java代码实现：</p>
<figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Uri uri = Uri.parse(<span class="string">"content://icc/adn"</span>)<span class="comment">;</span></div><div class="line">		Cursor <span class="keyword">c</span> = getContentResolver().query(uri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>)<span class="comment">;</span></div><div class="line">		while (<span class="keyword">c</span>.moveToNext())</div><div class="line">			System.out.println(<span class="keyword">c</span>.getString(<span class="keyword">c</span>.getColumnIndex(<span class="string">"name"</span>)) + <span class="string">": "</span> </div><div class="line">        + <span class="keyword">c</span>.getString(<span class="keyword">c</span>.getColumnIndex(<span class="string">"number"</span>)))<span class="comment">;</span></div></pre></td></tr></table></figure>
<h3 id="4-3-删除呼叫记录"><a href="#4-3-删除呼叫记录" class="headerlink" title="4.3 删除呼叫记录"></a>4.3 删除呼叫记录</h3><p>需要权限</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.READ_CONTACTS"</span> /&gt;</div><div class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.WRITE_CONTACTS"</span> /&gt;</div></pre></td></tr></table></figure>
<p>负责存放呼叫记录的内容提供者源码在ContactsProvider项目下：</p>
<ol>
<li>源码路径：com\android\providers\contacts\CallLogProvider.java</li>
<li>使用到的数据库在：/data/data/com.android.providers.contacts/databases/contacts2.db</li>
<li>表名:calls</li>
</ol>
<p><strong>呼叫记录有三种类型</strong></p>
<ol>
<li>来电：CallLog.Calls.INCOMING_TYPE （常量值：1）</li>
<li>外拔：CallLog.Calls.OUTGOING_TYPE（常量值：2）</li>
<li>未接：CallLog.Calls.MISSED_TYPE（常量值：3）</li>
</ol>
<p>删除指定号码的来电或未接呼叫记录：Java代码实现：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">IncomingCallLogContentObserver observer = <span class="keyword">new</span> IncomingCallLogContentObserver(<span class="keyword">new</span> Handler());</div><div class="line">observer.setNumber(<span class="string">"5554"</span>);</div><div class="line">getContentResolver().registerContentObserver(CallLog.Calls.CONTENT_URI, <span class="literal">true</span>, observer);</div><div class="line"><span class="keyword">private</span> <span class="keyword">class</span> IncomingCallLogContentObserver <span class="keyword">extends</span> ContentObserver &#123;</div><div class="line">        <span class="keyword">private</span> <span class="built_in">String</span> <span class="built_in">number</span>;</div><div class="line">        <span class="keyword">public</span> IncomingCallLogContentObserver(Handler handler)&#123;    	 </div><div class="line">      	  <span class="keyword">super</span>(handler);      	 </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> <span class="built_in">void</span> setNumber(<span class="built_in">String</span> <span class="built_in">number</span>)&#123;</div><div class="line">        	 <span class="keyword">this</span>.number = <span class="built_in">number</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> <span class="built_in">void</span> onChange(<span class="built_in">boolean</span> paramBoolean)&#123;</div><div class="line">        	ContentResolver contentResolver = getContentResolver();</div><div class="line">        	<span class="keyword">if</span>(<span class="built_in">number</span>!=<span class="literal">null</span>)&#123;              </div><div class="line">              Uri localUri = CallLog.Calls.CONTENT_URI;</div><div class="line"> Cursor cursor = contentResolver.query(localUri, <span class="keyword">new</span> <span class="built_in">String</span>[]&#123;<span class="string">"_id"</span>&#125;, <span class="string">"number=? AND (type=1 OR type=3)"</span>, </div><div class="line">              		<span class="keyword">new</span> <span class="built_in">String</span>[]&#123;<span class="built_in">number</span>&#125;, <span class="string">"_id desc limit 1"</span>);</div><div class="line">              <span class="keyword">if</span>(cursor.moveToFirst())&#123;</div><div class="line">  	            contentResolver.delete(localUri, <span class="string">"_id=?"</span>, <span class="keyword">new</span> <span class="built_in">String</span>[]&#123;cursor.getString(<span class="number">0</span>)&#125;);</div><div class="line">              &#125;</div><div class="line">              cursor.close();</div><div class="line">        	&#125;</div><div class="line">            contentResolver.unregisterContentObserver(<span class="keyword">this</span>);</div><div class="line">        &#125;｝</div></pre></td></tr></table></figure>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/blog/2011/08/Android基础-2011-08-14-android-basic-16.html">http://www.sguotao.com/blog/2011/08/Android基础-2011-08-14-android-basic-16.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-传感器&quot;&gt;&lt;a href=&quot;#1-传感器&quot; class=&quot;headerlink&quot; title=&quot;1. 传感器&quot;&gt;&lt;/a&gt;1. 传感器&lt;/h2&gt;&lt;p&gt;传感器类型：方向、加速度(重力)、光线、磁场、距离(临近性)、温度等。 &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
    
    </summary>
    
      <category term="Android基础" scheme="http://www.sguotao.com/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://www.sguotao.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android基础15 动画特效</title>
    <link href="http://www.sguotao.com//blog/2011/08/Android%E5%9F%BA%E7%A1%80-2011-08-13-android-basic-15.html"/>
    <id>http://www.sguotao.com//blog/2011/08/Android基础-2011-08-13-android-basic-15.html</id>
    <published>2011-08-13T02:27:04.000Z</published>
    <updated>2017-04-27T02:45:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Tween动画"><a href="#1-Tween动画" class="headerlink" title="1. Tween动画"></a>1. Tween动画</h2><p>将某个组件以渐变的方式实现透明、缩放、移动、旋转等动画效果。<br><img src="http://obovytgzz.bkt.clouddn.com/anni1.png" alt="图片1"></p>
<p>详见文档android-sdk-windows/docs/guide/topics/resources/animation-resource.html</p>
<h2 id="2-Frame动画"><a href="#2-Frame动画" class="headerlink" title="2. Frame动画"></a>2. Frame动画</h2><p>通过多个画面连续播放实现动画效果，开发步骤：</p>
<ul>
<li>把准备好的图片放进项目res/ drawable下。</li>
<li>在项目的res目录下创建文件夹anim，然后在anim文件夹下面定义动画XML文件，文件名称        可以自定义。当然也可以采用编码方式定义动画效果（使用AnimationDrawable类）。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">animation-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="attr">android:oneshot</span>=<span class="string">"false"</span>&gt;</div><div class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/girl_1"</span> <span class="attr">android:duration</span>=<span class="string">"200"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/girl_2"</span> <span class="attr">android:duration</span>=<span class="string">"200"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/girl_3"</span> <span class="attr">android:duration</span>=<span class="string">"200"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">animation-list</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>为View控件绑定动画效果。调用代表动画的AnimationDrawable的start()方法开始动画。<br>详见文档 android-sdk-windows/docs/guide/topics/resources/animation-resource.html</li>
</ul>
<h2 id="3-使用动画切换Activity"><a href="#3-使用动画切换Activity" class="headerlink" title="3. 使用动画切换Activity"></a>3. 使用动画切换Activity</h2><p>在startActivity()方法调用之后调用<br>overridePendingTransition(int enterAnim, int exitAnim)方法<br>enterAnim 进入的动画资源id<br>exitAnim 退出的动画    资源id</p>
<h2 id="4-使用动画翻页"><a href="#4-使用动画翻页" class="headerlink" title="4. 使用动画翻页"></a>4. 使用动画翻页</h2><p>XML配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ViewFlipper</span></span></div><div class="line">	<span class="attr">android:id</span>=<span class="string">"@+id/viewFlipper"</span></div><div class="line">	<span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></div><div class="line">	<span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span>&gt;</div><div class="line">   	<span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">	    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">	    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">   		<span class="attr">android:src</span>=<span class="string">"@drawable/bb2"</span>/&gt;</div><div class="line">   	<span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">	    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">	    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">   		<span class="attr">android:src</span>=<span class="string">"@drawable/bb3"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">ViewFlipper</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Java代码</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> boolean <span class="title">onTouchEvent</span>(<span class="params">MotionEvent <span class="keyword">event</span></span>) </span>&#123;</div><div class="line">	ViewFlipper viewFlipper = (ViewFlipper) findViewById(R.id.viewFlipper);</div><div class="line">	<span class="keyword">switch</span> (<span class="keyword">event</span>.getAction()) &#123;</div><div class="line">		<span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">			start = <span class="keyword">event</span>.getX();</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">			<span class="keyword">float</span> end = <span class="keyword">event</span>.getX();</div><div class="line">			<span class="keyword">if</span> (end &gt; start) &#123;</div><div class="line">				viewFlipper.setInAnimation(<span class="keyword">this</span>, R.anim.previous_enter);</div><div class="line">				viewFlipper.setOutAnimation(<span class="keyword">this</span>, R.anim.previous_exit);</div><div class="line">				viewFlipper.showPrevious();</div><div class="line">			&#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">end &lt; start</span>) </span>&#123;</div><div class="line">				viewFlipper.setInAnimation(<span class="keyword">this</span>, R.anim.next_enter);</div><div class="line">				viewFlipper.setOutAnimation(<span class="keyword">this</span>, R.anim.next_exit);</div><div class="line">				viewFlipper.showNext();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> super.onTouchEvent(<span class="keyword">event</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-动画练习"><a href="#5-动画练习" class="headerlink" title="5. 动画练习"></a>5. 动画练习</h2><h3 id="5-1-本例要实现对ImageView对象进行渐变尺寸缩放动画效果"><a href="#5-1-本例要实现对ImageView对象进行渐变尺寸缩放动画效果" class="headerlink" title="5.1 本例要实现对ImageView对象进行渐变尺寸缩放动画效果"></a>5.1 本例要实现对ImageView对象进行渐变尺寸缩放动画效果</h3><ul>
<li>在项目的res目录下创建文件夹anim，然后在anim文件夹下面定义动画XML文件,文件名称可以自定义，如：scale.xml，内容如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"> <span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">scale</span> <span class="attr">android:interpolator</span>=<span class="string">"@android:anim/accelerate_decelerate_interpolator"</span> </span></div><div class="line">        <span class="attr">android:fromXScale</span>=<span class="string">"0.0"</span> </div><div class="line">        <span class="attr">android:fromYScale</span>=<span class="string">"0.0"</span>  </div><div class="line">        <span class="attr">android:toXScale</span>=<span class="string">"5"</span> </div><div class="line">        <span class="attr">android:toYScale</span>=<span class="string">"5"</span> </div><div class="line">        <span class="attr">android:pivotX</span>=<span class="string">"50%"</span> </div><div class="line">        <span class="attr">android:pivotY</span>=<span class="string">"50%"</span> </div><div class="line">        <span class="attr">android:fillAfter</span>=<span class="string">"false"</span> </div><div class="line">        <span class="attr">android:duration</span>=<span class="string">"5000"</span>  /&gt; </div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
<p>动画的进度使用interpolator控制，android提供了几个Interpolator 子类，实现了不同的速度曲线，如LinearInterpolator实现了匀速效果、Accelerateinterpolator实现了加速效果、DecelerateInterpolator实现了减速效果等。还可以定义自己的Interpolator子类，实现抛物线、自由落体等物理效果。</p>
<p>fromXScale（浮点型） 属性为动画起始时X坐标上的缩放尺寸<br>fromYScale（浮点型） 属性为动画起始时Y坐标上的缩放尺寸<br>toXScale（浮点型）   属性为动画结束时X坐标上的缩放尺寸<br>toYScale（浮点型）   属性为动画结束时Y坐标上的缩放尺寸</p>
<p>说明: 以上四种属性值<br>0.0表示收缩到没有<br>1.0表示正常无缩放<br>值小于1.0表示收缩<br>值大于1.0表示放大<br>pivotX（浮点型）     属性为动画相对于物件的X坐标的开始位置<br>pivotY（浮点型）     属性为动画相对于物件的Y坐标的开始位置 </p>
<p>说明:<br>以上两个属性值 从0%-100%中取值<br>50%为物件的X或Y方向坐标上的中点位置<br>duration（长整型）属性为动画持续时间 。说明:   时间以毫秒为单位<br>fillAfter（布尔型）属性当设置为true，该动画转化在动画结束后被应用</p>
<ul>
<li>在layout文件添加&lt;ImageView&gt;节点：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span>&gt;</div><div class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">   <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">   <span class="attr">android:src</span>=<span class="string">"@drawable/icon"</span></div><div class="line">   <span class="attr">android:id</span>=<span class="string">"@+id/imageView"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>说明：除了可以对&lt;ImageView&gt;实现动画效果，其实也可以对其他View实现动画效果，如：&lt;TextView&gt;</p>
<ul>
<li>在Activity里对ImageView使用前面定义好的动画效果：</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">AnimationActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	public void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(<span class="type">R</span>.layout.main);</div><div class="line">		<span class="type">ImageView</span> imageView = (<span class="type">ImageView</span>)<span class="keyword">this</span>.findViewById(<span class="type">R</span>.id.imageView);</div><div class="line">		<span class="comment">//加载动画XML文件,生成动画指令</span></div><div class="line">		<span class="type">Animation</span> animation = <span class="type">AnimationUtils</span>.loadAnimation(<span class="keyword">this</span>, <span class="type">R</span>.anim.scale);</div><div class="line">		<span class="comment">//开始执行动画</span></div><div class="line">		imageView.startAnimation(animation);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>备注：上面采用的是xml文件定义动画效果，作为代替，也可以采用编码方式实现。下面采用编码方式实现上述例子同样的效果：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">AnimationActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span>	</div><div class="line">	public void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(<span class="type">R</span>.layout.main);</div><div class="line">		<span class="type">ImageView</span> imageView = (<span class="type">ImageView</span>)<span class="keyword">this</span>.findViewById(<span class="type">R</span>.id.imageView);</div><div class="line">		<span class="type">ScaleAnimation</span> animation = <span class="keyword">new</span> <span class="type">ScaleAnimation</span>(<span class="number">0.0</span>f, <span class="number">5</span>f, <span class="number">0.0</span>f, <span class="number">5</span>f, </div><div class="line">		<span class="type">Animation</span>.<span class="type">RELATIVE_TO_SELF</span>, <span class="number">0.5</span>f, <span class="type">Animation</span>.<span class="type">RELATIVE_TO_SELF</span>, <span class="number">0.5</span>f);</div><div class="line">		animation.setDuration(<span class="number">5000</span>); <span class="comment">//设置持续时间5秒</span></div><div class="line">		imageView.startAnimation(animation);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-2-其他动画效果定义例子"><a href="#5-2-其他动画效果定义例子" class="headerlink" title="5.2 其他动画效果定义例子"></a>5.2 其他动画效果定义例子</h3><ul>
<li>渐变透明度动画效果</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">alpha</span></span></div><div class="line">		<span class="attr">android:fromAlpha</span>=<span class="string">"0.1"</span>	</div><div class="line">		<span class="attr">android:toAlpha</span>=<span class="string">"1.0"</span></div><div class="line">		<span class="attr">android:duration</span>=<span class="string">"3000"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
<p>编码实现透明度动画效果：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">AnimationActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	public void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(<span class="type">R</span>.layout.main);</div><div class="line">		<span class="type">ImageView</span> imageView = (<span class="type">ImageView</span>)<span class="keyword">this</span>.findViewById(<span class="type">R</span>.id.imageView);</div><div class="line">		<span class="type">AlphaAnimation</span> animation = <span class="keyword">new</span> <span class="type">AlphaAnimation</span>(<span class="number">0.1</span>, <span class="number">1.0</span>); </div><div class="line">		animation.setDuration(<span class="number">5000</span>); <span class="comment">//设置持续时间5秒</span></div><div class="line">		imageView.startAnimation(animation);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>画面位置移动动画效果</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">translate</span></span></div><div class="line"><span class="attr">android:repeatCount</span>=<span class="string">"2"</span></div><div class="line"><span class="attr">android:fromXDelta</span>=<span class="string">"0"</span></div><div class="line"><span class="attr">android:fromYDelta</span>=<span class="string">"0"</span></div><div class="line"><span class="attr">android:toXDelta</span>=<span class="string">"120"</span></div><div class="line"><span class="attr">android:toYDelta</span>=<span class="string">"120"</span></div><div class="line"><span class="attr">android:duration</span>=<span class="string">"3000"</span>/&gt;</div><div class="line"><span class="comment">&lt;!-- fromXDelta fromYDelta 为动画起始时 X和Y坐标上的位置</span></div><div class="line">toXDelta toYDelta为动画结束起始时  X和Y坐标上的位置 --&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
<p>编码实现位置移动动画效果：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">AnimationActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	public void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(<span class="type">R</span>.layout.main);</div><div class="line">		<span class="type">ImageView</span> imageView = (<span class="type">ImageView</span>)<span class="keyword">this</span>.findViewById(<span class="type">R</span>.id.imageView);</div><div class="line">		<span class="type">TranslateAnimation</span> animation = <span class="keyword">new</span> <span class="type">TranslateAnimation</span>(<span class="number">0</span>, <span class="number">120</span>, <span class="number">0</span>, <span class="number">120</span>); </div><div class="line">		animation.setDuration(<span class="number">5000</span>); <span class="comment">//设置持续时间5秒</span></div><div class="line">		imageView.startAnimation(animation);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>画面旋转动画效果</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">rotate</span></span></div><div class="line"><span class="attr">android:interpolator</span>=<span class="string">"@android:anim/accelerate_interpolator"</span></div><div class="line"><span class="attr">android:repeatCount</span>=<span class="string">"2"</span></div><div class="line"><span class="attr">android:fromDegrees</span>=<span class="string">"0"</span></div><div class="line"><span class="attr">android:toDegrees</span>=<span class="string">"+360"</span></div><div class="line"><span class="attr">android:pivotX</span>=<span class="string">"50%"</span></div><div class="line"><span class="attr">android:pivotY</span>=<span class="string">"50%"</span></div><div class="line"><span class="attr">android:duration</span>=<span class="string">"3000"</span>/&gt;</div><div class="line"><span class="comment">&lt;!-- </span></div><div class="line">repeatCount 重复次数</div><div class="line">fromDegrees为动画起始时物件的角度:</div><div class="line">当角度为负数——表示逆时针旋转</div><div class="line">当角度为正数——表示顺时针旋转</div><div class="line">(负数fromDegrees——toDegrees正数:顺时针旋转)</div><div class="line">(负数fromDegrees——toDegrees负数:逆时针旋转)</div><div class="line">(正数fromDegrees——toDegrees正数:顺时针旋转)</div><div class="line">(正数fromDegrees——toDegrees负数:逆时针旋转)</div><div class="line">toDegrees属性为动画结束时物件旋转的角度 可以大于360度</div><div class="line">pivotX,pivotY  为动画相对于物件的X、Y坐标的开始位置。说明：以上两个属性值 从0%-100%中取值,50%为物件的X或Y方向坐标上的中点位置</div><div class="line"> --&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
<p>编码实现：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RotateAnimation animation = new RotateAnimation(<span class="number">0</span>, <span class="number">-90</span>, Animation.RELATIVE_TO_SELF, <span class="number">0.5</span>f, Animation.RELATIVE_TO_SELF, <span class="number">0.5</span>f);</div><div class="line">animation.setDuration(<span class="number">500</span>);</div><div class="line">imageView.startAnimation(animation);</div></pre></td></tr></table></figure>
<ul>
<li>Frame动画例子<br>a)    把准备好的图片放进项目res/ drawable下。图片有：girl_1.gif, girl_2.gif, girl_3.gif<br>b)    在项目的res目录下创建文件夹anim，然后在anim文件夹下面定义动画XML文件，文件名称可以自定义,如：frame.xml。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">animation-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:oneshot</span>=<span class="string">"false"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/girl_1"</span> <span class="attr">android:duration</span>=<span class="string">"200"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/girl_2"</span> <span class="attr">android:duration</span>=<span class="string">"200"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/girl_3"</span> <span class="attr">android:duration</span>=<span class="string">"200"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">animation-list</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面的XML就定义了一个Frame动画，其包含3帧动画，3帧动画中分别应用了drawable中的3张图片：girl_1.gif, girl_2.gif, girl_3.gif，每帧动画持续200毫秒。android:oneshot属性如果为true，表示动画只播放一次停止在最后一帧上，如果设置为false表示动画循环播放。</p>
<p>c)    为View控件绑定动画效果，调用代表动画的AnimationDrawable的start()方法开始动画。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">FrameActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="type">AnimationDrawable</span> animationDrawable;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	public void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(<span class="type">R</span>.layout.main);</div><div class="line">		<span class="type">ImageView</span> imageView = (<span class="type">ImageView</span>)<span class="keyword">this</span>.findViewById(<span class="type">R</span>.id.imageView);</div><div class="line">		imageView.setBackgroundResource(<span class="type">R</span>.anim.frame);</div><div class="line">		animationDrawable = (<span class="type">AnimationDrawable</span>) imageView.getBackground();</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	public boolean onTouchEvent(<span class="type">MotionEvent</span> event) &#123;</div><div class="line">		  <span class="keyword">if</span> (event.getAction() == <span class="type">MotionEvent</span>.<span class="type">ACTION_DOWN</span>) &#123;<span class="comment">//按下</span></div><div class="line">			  animationDrawable.start();</div><div class="line">			  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		  &#125;</div><div class="line">		  <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有一点需要强调的是：启动Frame动画的代码animationDrawable.start();不能应用在OnCreate()方法中，因为在OnCreate()中 AnimationDrawable还没有完全的与ImageView绑定。在OnCreate()中启动动画，只能看到第一张图片。这里在触摸事件中实现的。</p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/blog/2011/08/Android基础-2011-08-13-android-basic-15.html">http://www.sguotao.com/blog/2011/08/Android基础-2011-08-13-android-basic-15.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Tween动画&quot;&gt;&lt;a href=&quot;#1-Tween动画&quot; class=&quot;headerlink&quot; title=&quot;1. Tween动画&quot;&gt;&lt;/a&gt;1. Tween动画&lt;/h2&gt;&lt;p&gt;将某个组件以渐变的方式实现透明、缩放、移动、旋转等动画效果。&lt;br&gt;&lt;img s
    
    </summary>
    
      <category term="Android基础" scheme="http://www.sguotao.com/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://www.sguotao.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android基础14 样式与主题</title>
    <link href="http://www.sguotao.com//blog/2011/08/Android%E5%9F%BA%E7%A1%80-2011-08-12-android-basic-14.html"/>
    <id>http://www.sguotao.com//blog/2011/08/Android基础-2011-08-12-android-basic-14.html</id>
    <published>2011-08-12T02:27:04.000Z</published>
    <updated>2017-04-27T02:44:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-样式-style"><a href="#1-样式-style" class="headerlink" title="1. 样式(style)"></a>1. 样式(style)</h2><p>android中的样式和CSS样式作用相似，都是用于为界面元素定义显示风格，它是一个包含一个或者多个view控件属性的集合。如：需要定义字体的颜色和大小。在CSS中是这样定义的：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-class">.ncist</span>&#123;<span class="attribute">COLOR</span>:<span class="number">#0000CC</span>;<span class="attribute">font-size</span>:<span class="number">18px</span>;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以像这样使用上面的css样式：<div class="ncist">华北科技</div>，在Android中可以这样定义样式：在res/values/styles.xml文件中添加以下内容</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">“ncist”</span>&gt;</span><span class="xml"> <span class="comment">&lt;!-- 为样式定义一个全局唯一的名字--&gt;</span></span></div><div class="line">     <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">“android:textSize”</span>&gt;</span>18px<span class="tag">&lt;/<span class="name">item</span>&gt;</span> <span class="comment">&lt;!-- name属性的值为使用了该样式的View控件的属性 --&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>#0000CC<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在layout文件中可以像下面这样使用上面的android样式：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> <span class="attr">....</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">style</span>=<span class="string">"@style/ncist"</span></span></div><div class="line">        <span class="attr">.....</span>  /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>&lt;style&gt;元素中有一个parent属性。这个属性可以让当前样式继承一个父样式，并且具有父样式的值。当然，如果父样式的值不符合你的需求，你也可以对它进行修改，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"ncist"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>18px<span class="tag">&lt;/<span class="name">item</span>&gt;</span> <span class="comment">&lt;!-- name属性为样式要用在的View控件持有的属性 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>#0000CC<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"subncist"</span> <span class="attr">parent</span>=<span class="string">"@style/ncist"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>#FF0000<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>继承样式有两种定义方式</strong></p>
<ol>
<li>继承样式，在&lt;style&gt;标签中配置属性parent</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"style2"</span> <span class="attr">parent</span>=<span class="string">"@style/style1"</span>&gt;</span><span class="xml"></span></div><div class="line">			<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>#FF0000<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>继承样式，在name中引用其他样式</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"style2.style3"</span>&gt;</span><span class="xml"></span></div><div class="line">			<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>30sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>使用样式</strong><br>在layout文件的标签中配置style属性</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;Button  	style=<span class="string">"@style/style2.style3"</span></div><div class="line">	    		android:<span class="built_in">text</span>=<span class="string">"这是一个按钮"</span>/&gt;</div></pre></td></tr></table></figure>
<h2 id="2-主题-theme"><a href="#2-主题-theme" class="headerlink" title="2. 主题(theme)"></a>2. 主题(theme)</h2><p>android中主题也是用于为应用定义显示风格，它的定义和样式的定义相同，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">“ncistTheme</span>"&gt;</span><span class="undefined"></span></div><div class="line">	&lt;item name=“android:windowNoTitle”&gt;true&lt;/item&gt; &lt;!– 没标题 </div><div class="line">	&lt;item name=“android:windowFullscreen”&gt;?android:windowNoTitle&lt;/item&gt; &lt;!– 全屏显示 </div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面“?android:windowNoTitle”中的问号用于引用在当前主题中定义过的资源的值。下面代码显示在AndroidManifest.xml中如何为应用设置上面定义的主题：</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;application android:icon=<span class="string">"@drawable/icon"</span> android:label=<span class="string">"@string/app_name"</span></div><div class="line">     android:theme=<span class="string">"@style/ncistTheme"</span>&gt;</div><div class="line">   ......</div><div class="line">&lt;/application&gt;</div></pre></td></tr></table></figure>
<p>除了可以在AndroidManifest.xml中设置主题，同样也可以在代码中设置主题，如下：<br>setTheme(R.style.ncistTheme);</p>
<h2 id="3-样式与主题的区别"><a href="#3-样式与主题的区别" class="headerlink" title="3. 样式与主题的区别"></a>3. 样式与主题的区别</h2><p>尽管在定义上，样式和主题基本相同，但是它们使用的地方不同。</p>
<ol>
<li>样式用在单独的View，如：EditText、TextView等；</li>
<li>主题通过AndroidManifest.xml中的&lt;application&gt;和&lt;activity&gt;用在整个应用或者某个 Activity，主题对整个应用或某个Activity进行全局性影响。</li>
<li>如果一个应用使用了主题，同时应用下的view也使用了样式，那么当主题和样式属性发生冲突时，样式的优先级高于主题。</li>
</ol>
<p>另外android系统也定义了一些主题，例如：<br>&lt;activity android:theme=“@android:style/Theme.Dialog”&gt;，该主题可以让Activity看起来像一个对话框，还有透明主题：@android:style/Theme.Translucent 。如果需要查阅这些主题，可以在文档的referenceandroid–&gt;R.style 中查看。</p>
<p><strong>注意：如果使用android内置的样式，IDE自动提示的“_”要替换成“.”</strong></p>
<h2 id="4-国际化与屏幕适配"><a href="#4-国际化与屏幕适配" class="headerlink" title="4. 国际化与屏幕适配"></a>4. 国际化与屏幕适配</h2><h3 id="4-1-国际化"><a href="#4-1-国际化" class="headerlink" title="4.1 国际化"></a>4.1 国际化</h3><p><img src="http://obovytgzz.bkt.clouddn.com/i18n1.png" alt="图片1"><br>在values和drawable文件夹后加上语言以及地区名，程序中需要国际化的部分使用资源ID<br>values-en-rUS ；values-zh-rCN；values-zh-rTW</p>
<p><strong>匹配规则</strong></p>
<ol>
<li>在匹配资源时先会找语言、地区完全匹配的</li>
<li>如果没有地区匹配的，则查找语言匹配的<br>如果没有语言匹配的则找默认values</li>
</ol>
<h3 id="4-2-屏幕适配"><a href="#4-2-屏幕适配" class="headerlink" title="4.2 屏幕适配"></a>4.2 屏幕适配</h3><p><img src="http://obovytgzz.bkt.clouddn.com/i18n2.png" alt="图片2"><br>在layout文件夹后加上分辨率，系统会根据屏幕尺寸自动选择，注意分辨率中的乘号是“x”不是“*”，并且大的数字在“x”之前，否则编译无法通过；如果没有匹配的分辨率会找默认layout文件夹。</p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/blog/2011/08/Android基础-2011-08-12-android-basic-14.html">http://www.sguotao.com/blog/2011/08/Android基础-2011-08-12-android-basic-14.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-样式-style&quot;&gt;&lt;a href=&quot;#1-样式-style&quot; class=&quot;headerlink&quot; title=&quot;1. 样式(style)&quot;&gt;&lt;/a&gt;1. 样式(style)&lt;/h2&gt;&lt;p&gt;android中的样式和CSS样式作用相似，都是用于为界面元素定义显
    
    </summary>
    
      <category term="Android基础" scheme="http://www.sguotao.com/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://www.sguotao.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android基础13 常用UI（下）</title>
    <link href="http://www.sguotao.com//blog/2011/08/Android%E5%9F%BA%E7%A1%80-2011-08-11-android-basic-13.html"/>
    <id>http://www.sguotao.com//blog/2011/08/Android基础-2011-08-11-android-basic-13.html</id>
    <published>2011-08-11T02:27:04.000Z</published>
    <updated>2017-04-27T02:43:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-菜单-Menu"><a href="#1-菜单-Menu" class="headerlink" title="1.菜单(Menu)"></a>1.菜单(Menu)</h2><h3 id="1-1-普通menu"><a href="#1-1-普通menu" class="headerlink" title="1.1 普通menu"></a>1.1 普通menu</h3><p><img src="http://obovytgzz.bkt.clouddn.com/menu1.png" alt="图片1"></p>
<ol>
<li>重写Activity的onCreateOptionsMenu(Menu menu)方法，该方法用于创建选项菜单，在用户按下手机的“Menu”按钮时就会显示创建好的菜单，在onCreateOptionsMenu(Menu menu)方法内部可以调用Menu.add()方法实现菜单的添加。</li>
<li>重写Activity的onMenuItemSelected()方法，该方法用于处理菜单被选择事件</li>
<li>通过手机上提供的“MENU”按钮可以打开菜单，如果希望通过代码打开菜单，可以调用Activity的openOptionsMenu()方法。</li>
</ol>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MenuActivity"</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MENU_ADD = Menu.FIRST;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MENU_UPDATE = Menu.FIRST + <span class="number">1</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.menu); </div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">		menu.add(Menu.NONE, MENU_ADD, Menu.NONE, <span class="string">"添加"</span>);  </div><div class="line">		menu.add(Menu.NONE, MENU_UPDATE, Menu.NONE, <span class="string">"更新"</span>);</div><div class="line">		<span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onCreateOptionsMenu</span><span class="params">(menu)</span></span>; &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onMenuItemSelected</span><span class="params">(<span class="keyword">int</span> featureId, MenuItem item)</span> </span>&#123;</div><div class="line">		<span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">	  	<span class="keyword">case</span> MENU_ADD:</div><div class="line">	       Log.i(TAG, <span class="string">"add was selected"</span>);</div><div class="line">	       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	  <span class="keyword">case</span> MENU_UPDATE:</div><div class="line">	       Log.i(TAG, <span class="string">"update was selected"</span>);</div><div class="line">	       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	  <span class="keyword">default</span>:</div><div class="line">              <span class="keyword">return</span> <span class="keyword">super</span>.onMenuItemSelected(featureId, item);</div><div class="line">&#125; &#125;	&#125;</div></pre></td></tr></table></figure>
<h3 id="1-2-SubMenu"><a href="#1-2-SubMenu" class="headerlink" title="1.2 SubMenu"></a>1.2 SubMenu</h3><ol>
<li>添加子菜单<br>调用menu对象的addSubMenu(final CharSequence title)，该方法返回一个SubMenu对象</li>
<li>添加子菜单的菜单项<br>调用SubMenu对象的add(CharSequence title) 方法</li>
</ol>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public boolean onCreateOptionsMenu(Menu menu) &#123;</div><div class="line">        menu.add(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">"苹果"</span>);</div><div class="line">        menu.add(<span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="string">"香蕉"</span>);</div><div class="line">        SubMenu subMenu = menu.addSubMenu(<span class="number">1</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="string">"桃子"</span>);</div><div class="line">        subMenu.add(<span class="number">2</span>, <span class="number">101</span>, <span class="number">101</span>, <span class="string">"大桃子"</span>);</div><div class="line">        subMenu.add(<span class="number">2</span>, <span class="number">102</span>, <span class="number">102</span>, <span class="string">"小桃子"</span>);</div><div class="line">        return true;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="1-3-Context-Menu"><a href="#1-3-Context-Menu" class="headerlink" title="1.3 Context Menu"></a>1.3 Context Menu</h3><p>类似于电脑上的右键，长按某个View之后弹出来的菜单。首先在main.xml里定义若干个按钮。首先要注册一下，在onCreate方法里，如下代码：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onCreate(<span class="keyword">Bundle </span>savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState)<span class="comment">;</span></div><div class="line">        setContentView(R.layout.main)<span class="comment">;</span></div><div class="line">        <span class="keyword">b1 </span>= (<span class="keyword">Button) </span>findViewById(R.id.<span class="keyword">b1);</span></div><div class="line">        <span class="keyword">b2 </span>= (<span class="keyword">Button) </span>findViewById(R.id.<span class="keyword">b2);</span></div><div class="line">        registerForContextMenu(<span class="keyword">b1);</span></div><div class="line">        registerForContextMenu(<span class="keyword">b2);</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>然后覆盖onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo)。</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Override</div><div class="line">    public void onCreateContextMenu(ContextMenu menu, View v,</div><div class="line">            ContextMenuInfo menuInfo) &#123;</div><div class="line">        if(v==<span class="keyword">b1)&#123;</span></div><div class="line">            menu.setHeaderTitle(<span class="string">"这是1"</span>)<span class="comment">;</span></div><div class="line">            menu.<span class="keyword">add(200, </span><span class="number">200</span>, <span class="number">200</span>, <span class="string">"Context Menu 1"</span>)<span class="comment">;</span></div><div class="line">            menu.<span class="keyword">add(200, </span><span class="number">201</span>, <span class="number">201</span>, <span class="string">"Context Menu 2"</span>)<span class="comment">;</span></div><div class="line">        &#125;</div><div class="line">        else if(v==<span class="keyword">b2)&#123;</span></div><div class="line">            menu.setHeaderTitle(<span class="string">"这是2"</span>)<span class="comment">;</span></div><div class="line">            menu.<span class="keyword">add(300, </span><span class="number">300</span>, <span class="number">300</span>, <span class="string">"C 1"</span>)<span class="comment">;</span></div><div class="line">            menu.<span class="keyword">add(300, </span><span class="number">301</span>, <span class="number">301</span>, <span class="string">"C 2"</span>)<span class="comment">;</span></div><div class="line">        &#125;</div><div class="line">        super.onCreateContextMenu(menu, v, menuInfo)<span class="comment">;</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="1-4-动态Menu"><a href="#1-4-动态Menu" class="headerlink" title="1.4 动态Menu"></a>1.4 动态Menu</h3><p><img src="http://obovytgzz.bkt.clouddn.com/menu2.png" alt="图片2"><br>动态菜单就是根据不同的界面有不同的菜单。下面的代码实现这样的功能：当主界面的某个TextView的值是“M“和“N”时，弹出不同的菜单。</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public boolean onPrepareOptionsMenu(Menu <span class="keyword">menu</span>) &#123;</div><div class="line">        String currentText = tv1.getText().toString();</div><div class="line">        <span class="keyword">if</span>(<span class="string">"M"</span>.equals(currentText))&#123;</div><div class="line">            <span class="keyword">menu</span>.<span class="keyword">clear</span>();<span class="comment">//先清掉菜单</span></div><div class="line">            MenuItem item = <span class="keyword">menu</span>.add(<span class="number">0</span>, <span class="number">400</span>, <span class="number">401</span>, <span class="string">"to N"</span>);<span class="comment">//可以通过点击这个菜单项来改变tv1的值这样(变成N)就可以测试了</span></div><div class="line">            item.setIcon(android.R.drawable.alert_dark_frame);<span class="comment">//android自带的图标</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(<span class="string">"N"</span>.equals(currentText))&#123;</div><div class="line">            <span class="keyword">menu</span>.<span class="keyword">clear</span>();<span class="comment">//先清掉菜单</span></div><div class="line">            MenuItem item = <span class="keyword">menu</span>.add(<span class="number">0</span>, <span class="number">401</span>, <span class="number">402</span>, <span class="string">"to M"</span>);<span class="comment">//可以通过点击这个菜单项来改变tv1的值这样(变成M)就可以测试了</span></div><div class="line">            item.setIcon(android.R.drawable.alert_light_frame);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">menu</span>.add(<span class="number">0</span>, <span class="number">402</span>, <span class="number">403</span>, <span class="string">"Now is "</span> + currentText);<span class="comment">//现在共有两个菜单子项</span></div><div class="line">        <span class="keyword">return</span> super.onPrepareOptionsMenu(<span class="keyword">menu</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="1-5-用xml文件方式创建Menu"><a href="#1-5-用xml文件方式创建Menu" class="headerlink" title="1.5 用xml文件方式创建Menu"></a>1.5 用xml文件方式创建Menu</h3><p>之前都是用代码的方法创建Menu,用xml配置文件也可以相当方便地制作菜单。<br>要res/目录下建一个文件夹，名为menu，下面建一个xml文件，名为menu_xml_file.xml，代码如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">group</span> <span class="attr">android:id</span>=<span class="string">"@+id/grout_main"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/menu_1"</span></span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"This 1"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/menu_2"</span> </span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"This 2"</span> /&gt; </div><div class="line"><span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在Activity中覆盖onCreateOptionsMenu(Menu menu)方法，代码如下：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        MenuInflater inflater = getMenuInflater();</div><div class="line">        inflater.inflate(R.menu.menu_xml_file, menu);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>其他的都和在Activity中制作菜单一样。</p>
<h2 id="2-手势识别-GestureOverlayView"><a href="#2-手势识别-GestureOverlayView" class="headerlink" title="2. 手势识别(GestureOverlayView)"></a>2. 手势识别(GestureOverlayView)</h2><p><img src="http://obovytgzz.bkt.clouddn.com/menu3.png" alt="图片3"></p>
<ol>
<li>建立手势库<br>使用SDK自带例子GestureBuilder建立手势库（位置：android-sdk-windows\samples\android-8\GestureBuilder）。使用GestureBuilder之前，你需要恢复其到开发环境，然后进行编绎并部署到手机上。此时，就可以使用GestureBuilder建立手势库，生成的手势库文件在SCDard上，默认文件名称为：gestures</li>
<li>在应用中加载手势库文件，然后开发手势识别代码。<br>把手势库文件gestures文件拷贝到项目的res/raw目录下。然后在布局文件中添加用于手势绘制的View：</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;android<span class="selector-class">.gesture</span><span class="selector-class">.GestureOverlayView</span></div><div class="line">		android:id=<span class="string">"@+id/gov"</span></div><div class="line">		android:layout_width=<span class="string">"fill_parent"</span></div><div class="line">		android:layout_height=<span class="string">"fill_parent"</span></div><div class="line">		android:gestureStrokeType=<span class="string">"multiple"</span>/&gt;</div></pre></td></tr></table></figure>
<ol>
<li>为View添加手势监听事件：gestureOverlayView.addOnGesturePerformedListener();</li>
<li>得到手势库：mLibrary = GestureLibraries.fromRawResource(this, R.raw.gestures);</li>
<li>加载手势库：mLibrary.load();</li>
</ol>
<p>大多数情况下，手势都是通过一笔完成。然而有一些特别的需求就需要通过多个笔画来实现，这时可以使用gestureStrokeType属性进行设置：android:gestureStrokeType=”multiple”</p>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> GestureOverlayView gestureOverlayView;</div><div class="line">    <span class="keyword">private</span> GestureLibrary mLibrary;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> state;</div><div class="line">    <span class="keyword">private</span> EditText addressText;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.main);</div><div class="line">        addressText = (EditText)<span class="keyword">this</span>.findViewById(R.id.address);</div><div class="line">        gestureOverlayView = (GestureOverlayView)<span class="keyword">this</span>.findViewById(R.id.gestures);</div><div class="line">        <span class="comment">//当用户完成一次Gesture绘制后，系统将自动调用Listener对象的onGesturePerformed()方法</span></div><div class="line">        gestureOverlayView.addOnGesturePerformedListener(<span class="keyword">new</span> GestureListener());</div><div class="line">        mLibrary = GestureLibraries.fromRawResource(<span class="keyword">this</span>, R.raw.gestures);</div><div class="line">        state = mLibrary.load();<span class="comment">//加载手势库</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GestureListener</span> <span class="keyword">implements</span> <span class="title">GestureOverlayView</span>.<span class="title">OnGesturePerformedListener</span></span>&#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGesturePerformed</span><span class="params">(GestureOverlayView overlay, Gesture gesture)</span> </span>&#123;</div><div class="line">			<span class="keyword">if</span>(state)&#123;</div><div class="line">				List&lt;Prediction&gt; predictions = mLibrary.recognize(gesture);</div><div class="line">				<span class="comment">//从手势库中查询匹配的内容，匹配的结果可能包括多个相似的结果，匹配度高的结果放在最前面</span></div><div class="line">				<span class="keyword">if</span>(!predictions.isEmpty())&#123;</div><div class="line">					Prediction prediction = predictions.get(<span class="number">0</span>);</div><div class="line">					<span class="comment">//prediction的score属性代表了与手势的相似程度name代表手势对应的名称</span></div><div class="line">					<span class="keyword">if</span>(prediction.score &gt; <span class="number">1</span>)&#123;</div><div class="line">						addressText.setText(prediction.name);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;    </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-编码实现软件界面"><a href="#3-编码实现软件界面" class="headerlink" title="3. 编码实现软件界面"></a>3. 编码实现软件界面</h2><p>Android除了可以使用xml实现软件界面，还可以通过编码方式实现软件的界面，而且在某种情况下只能采用编码方式实现软件的界面，例如：软件运行时需要根据运算结果决定显示某些内容。如果不是必须，建议使用xml，因为这样可以使应用遵守mvc设计模式，具有良好的软件分层结构。下面代码实现了如HelloWorld项目一样的软件界面：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">	public void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        <span class="type">LinearLayout</span> linearLayout = <span class="keyword">new</span> <span class="type">LinearLayout</span>(<span class="keyword">this</span>);</div><div class="line">        <span class="type">LinearLayout</span>.<span class="type">LayoutParams</span> layoutParams = <span class="keyword">new</span> <span class="type">LinearLayout</span>.<span class="type">LayoutParams</span>(</div><div class="line">        	<span class="type">ViewGroup</span>.<span class="type">LayoutParams</span>.<span class="type">FILL_PARENT</span>, <span class="type">ViewGroup</span>.<span class="type">LayoutParams</span>.<span class="type">FILL_PARENT</span>);</div><div class="line">        <span class="type">TextView</span> textView = <span class="keyword">new</span> <span class="type">TextView</span>(<span class="keyword">this</span>);</div><div class="line">        textView.setText(<span class="type">R</span>.string.hello);</div><div class="line">        textView.setId(<span class="number">34</span>);</div><div class="line">        <span class="type">LinearLayout</span>.<span class="type">LayoutParams</span> textParams = <span class="keyword">new</span> <span class="type">LinearLayout</span>.<span class="type">LayoutParams</span>(</div><div class="line">        	<span class="type">ViewGroup</span>.<span class="type">LayoutParams</span>.<span class="type">FILL_PARENT</span>, <span class="type">ViewGroup</span>.<span class="type">LayoutParams</span>.<span class="type">WRAP_CONTENT</span>);</div><div class="line">        linearLayout.addView(textView, textParams);</div><div class="line">        setContentView(linearLayout, layoutParams);       </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-网页视图-WebView"><a href="#4-网页视图-WebView" class="headerlink" title="4. 网页视图(WebView)"></a>4. 网页视图(WebView)</h2><p>因为android软件开发分工目前还没有细化，程序员往往需要负责软件界面的开发，虽然软件的界面图片已经由美工设计好了，但如果使用layout技术把软件做成如图片所示的界面确实很困难，而且也比较耗时。Android通过WebView实现了JS代码与Java代码互相通信的功能，使的android软件的界面开发也可以采用HTML网页技术，这样，广大网页美工可以参与进android软件的界面开发工作，从而让程序员从中解脱出来。</p>
<p>XML配置</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;WebView</div><div class="line"><span class="symbol">android:</span>id=<span class="string">"@+id/webView"</span></div><div class="line"><span class="symbol">android:</span>layout_width=<span class="string">"fill_parent"</span> </div><div class="line"><span class="symbol">android:</span>layout_height=<span class="string">"fill_parent"</span>	/&gt;</div></pre></td></tr></table></figure>
<p>在项目的assets目录放入index.html文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">jsondata</span>)</span>&#123;</div><div class="line">			        <span class="keyword">var</span> jsonobjs = <span class="built_in">eval</span>(jsondata);</div><div class="line">			        <span class="keyword">var</span> table = <span class="built_in">document</span>.getElementById(<span class="string">"personTable"</span>);</div><div class="line">			        <span class="keyword">for</span>(<span class="keyword">var</span> y=<span class="number">0</span>; y&lt;jsonobjs.length; y++)&#123;</div><div class="line">				        <span class="keyword">var</span> tr = table.insertRow(table.rows.length); </div><div class="line">				        <span class="keyword">var</span> td1 = tr.insertCell(<span class="number">0</span>);</div><div class="line">				        <span class="keyword">var</span> td2 = tr.insertCell(<span class="number">1</span>);</div><div class="line">				        td2.align = <span class="string">"center"</span>;</div><div class="line">				        <span class="keyword">var</span> td3 = tr.insertCell(<span class="number">2</span>);</div><div class="line">				        td3.align = <span class="string">"center"</span>;</div><div class="line">				        td1.innerHTML = jsonobjs[y].name; </div><div class="line">				        td2.innerHTML = jsonobjs[y].amount; </div><div class="line">				        td3.innerHTML = <span class="string">"&lt;a href='javascript:contact.call(\""</span>+ jsonobjs[y].phone+ <span class="string">"\")'&gt;"</span>+ jsonobjs[y].phone+ <span class="string">"&lt;/a&gt;"</span>; </div><div class="line">					&#125;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"javascript:contact.showcontacts()"</span>&gt;</span></div><div class="line">	   <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">id</span>=<span class="string">"personTable"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"30%"</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"30%"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>存款<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HtmlActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> WebView webView;</div><div class="line"><span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler();</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.main);</div><div class="line">        webView = (WebView)<span class="keyword">this</span>.findViewById(R.id.webView);</div><div class="line">        webView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</div><div class="line">        webView.getSettings().setSaveFormData(<span class="keyword">false</span>);</div><div class="line">        webView.getSettings().setSavePassword(<span class="keyword">false</span>);</div><div class="line">        webView.getSettings().setSupportZoom(<span class="keyword">false</span>);</div><div class="line">        webView.addJavascriptInterface(<span class="keyword">new</span> NcistJavaScript(), “ncist”);</div><div class="line">		<span class="comment">//addJavascriptInterface方法中要绑定的Java对象</span></div><div class="line">        webView.setWebChromeClient(<span class="keyword">new</span> NcistWebClient());</div><div class="line">        webView.loadUrl(<span class="string">"file:///android_asset/index.html"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NcistJavaScript</span></span>&#123;</div><div class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">personlist</span><span class="params">()</span></span>&#123;</div><div class="line">    	    webview.loadUrl(<span class="string">"javascript:contactlist('"</span>+ getPersonJson() + <span class="string">"')"</span>); </div><div class="line">		&#125;</div><div class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(<span class="keyword">final</span> String phone)</span></span>&#123;</div><div class="line">	    startActivity(<span class="keyword">new</span> Intent(Intent.ACTION_CALL, Uri.parse(<span class="string">"tel:"</span>+ phone)));</div><div class="line">    	&#125;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPersonJson</span><span class="params">()</span> </span>&#123;<span class="comment">//生成json字符串</span></div><div class="line">	   <span class="keyword">try</span> &#123;</div><div class="line">		JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</div><div class="line">		jsonObject.put(<span class="string">"id"</span>, <span class="number">56</span>);</div><div class="line">		jsonObject.put(<span class="string">"name"</span>, <span class="string">"老张"</span>);</div><div class="line">		jsonObject.put(<span class="string">"phone"</span>, <span class="string">"5556"</span>);    	</div><div class="line">		JSONObject jsonObject2 = <span class="keyword">new</span> JSONObject();</div><div class="line">		jsonObject2.put(<span class="string">"id"</span>, <span class="number">89</span>);</div><div class="line">		jsonObject2.put(<span class="string">"name"</span>, <span class="string">"老方"</span>);</div><div class="line">		jsonObject2.put(<span class="string">"phone"</span>, <span class="string">"5558"</span>);    	</div><div class="line">		JSONArray jsonArray = <span class="keyword">new</span> JSONArray();</div><div class="line">		jsonArray.put(jsonObject);</div><div class="line">		jsonArray.put(jsonObject2);    	</div><div class="line">		<span class="keyword">return</span> jsonArray.toString();</div><div class="line">	     &#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	     &#125;</div><div class="line">	   <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">	&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NcistWebClient</span> <span class="keyword">extends</span> <span class="title">WebChromeClient</span></span>&#123;</div><div class="line">    	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsAlert</span><span class="params">(WebView view, String url, String message, JsResult result)</span> </span>&#123;</div><div class="line">    	<span class="keyword">new</span> AlertDialog.Builder(HtmlActivity.<span class="keyword">this</span>) </div><div class="line">	.setTitle(<span class="string">"提示信息"</span>)       </div><div class="line">	.setMessage(message)           </div><div class="line">	.setPositiveButton(<span class="string">"确定"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener()&#123;</div><div class="line">	    	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialoginterface, <span class="keyword">int</span> i)</span></span>&#123;&#125;</div><div class="line">	&#125;).show();</div><div class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125; &#125;&#125;</div></pre></td></tr></table></figure>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/blog/2011/08/Android基础-2011-08-11-android-basic-13.html">http://www.sguotao.com/blog/2011/08/Android基础-2011-08-11-android-basic-13.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-菜单-Menu&quot;&gt;&lt;a href=&quot;#1-菜单-Menu&quot; class=&quot;headerlink&quot; title=&quot;1.菜单(Menu)&quot;&gt;&lt;/a&gt;1.菜单(Menu)&lt;/h2&gt;&lt;h3 id=&quot;1-1-普通menu&quot;&gt;&lt;a href=&quot;#1-1-普通menu&quot; c
    
    </summary>
    
      <category term="Android基础" scheme="http://www.sguotao.com/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://www.sguotao.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android基础12 常用UI（中）</title>
    <link href="http://www.sguotao.com//blog/2011/08/Android%E5%9F%BA%E7%A1%80-2011-08-10-android-basic-12.html"/>
    <id>http://www.sguotao.com//blog/2011/08/Android基础-2011-08-10-android-basic-12.html</id>
    <published>2011-08-10T02:27:04.000Z</published>
    <updated>2017-04-27T02:43:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-拖动条-SeekBar"><a href="#1-拖动条-SeekBar" class="headerlink" title="1. 拖动条(SeekBar)"></a>1. 拖动条(SeekBar)</h2><p><img src="http://obovytgzz.bkt.clouddn.com/ui1.png" alt="图片1"></p>
<ol>
<li>SeekBar.getProgress()获取拖动条当前值</li>
<li>调用setOnSeekBarChangeListener()方法，处理拖动条值变化事件，把SeekBar.OnSeekBarChangeListener实例作为参数传入。</li>
</ol>
<p>代码处理:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeekBarActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> SeekBar seekBar;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.seekbar);</div><div class="line">        seekBar = (SeekBar) findViewById(R.id.seekBar);</div><div class="line">        seekBar.setMax(<span class="number">100</span>);<span class="comment">//设置最大刻度</span></div><div class="line">        seekBar.setProgress(<span class="number">30</span>);<span class="comment">//设置当前刻度</span></div><div class="line">        seekBar.setOnSeekBarChangeListener(<span class="keyword">new</span> SeekBar.OnSeekBarChangeListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(SeekBar seekBar, <span class="keyword">int</span> progress, <span class="keyword">boolean</span> fromTouch)</span> </span>&#123;</div><div class="line">                Log.v(<span class="string">"onProgressChanged()"</span>, String.valueOf(progress) + <span class="string">", "</span> + String.valueOf(fromTouch));</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>&#123;<span class="comment">//开始拖动</span></div><div class="line">                Log.v(<span class="string">"onStartTrackingTouch()"</span>, String.valueOf(seekBar.getProgress()));</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStopTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>&#123;<span class="comment">//结束拖动</span></div><div class="line">                Log.v(<span class="string">"onStopTrackingTouch()"</span>, String.valueOf(seekBar.getProgress()));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        Button button = (Button)<span class="keyword">this</span>.findViewById(R.id.seekBarButton);</div><div class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;			</div><div class="line">	<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">		Toast.makeText(SeekBarActivity.<span class="keyword">this</span>, String.valueOf(seekBar.getProgress()), <span class="number">1</span>).show();</div><div class="line">	&#125;&#125;);</div><div class="line">    &#125;&#125;</div></pre></td></tr></table></figure>
<h2 id="2-进度条-ProgressBar"><a href="#2-进度条-ProgressBar" class="headerlink" title="2. 进度条(ProgressBar)"></a>2. 进度条(ProgressBar)</h2><p><img src="http://obovytgzz.bkt.clouddn.com/ui2.png" alt="图片2"><br>在布局xml文件中添加进度条代码：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ProgressBar </div><div class="line">    android:layout_width=<span class="string">"fill_parent"</span> </div><div class="line">    android:layout_height=<span class="string">"20px"</span></div><div class="line">    style=<span class="string">"?android:attr/progressBarStyleHorizontal"</span></div><div class="line">    android:<span class="built_in">id</span>=<span class="string">"@+id/downloadbar"</span>/&gt;</div></pre></td></tr></table></figure>
<p>在代码中操作进度条：</p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Progress</span>Bar.setMax(100);//设置最大刻度</div><div class="line"><span class="keyword">Progress</span>Bar.setProgress(0);//设置进度条的当前刻度，如果进度条的最大刻度为100，当前刻度为50，进度条将进行到一半。</div></pre></td></tr></table></figure>
<h2 id="3-输入内容自动完成文本框-AutoCompleteTextView"><a href="#3-输入内容自动完成文本框-AutoCompleteTextView" class="headerlink" title="3. 输入内容自动完成文本框(AutoCompleteTextView)"></a>3. 输入内容自动完成文本框(AutoCompleteTextView)</h2><p><img src="http://obovytgzz.bkt.clouddn.com/ui3.png" alt="图片3"><br>AutoCompleteTextView和EditText组件类似，都可以输入文本。但AutoCompleteTextView组件可以和一个字符串数组或List对象绑定，当用户输入两个及以上字符时，系统将在AutoCompleteTextView组件下方列出字符串数组中所有以输入字符开头的字符串，这一点和www.google.com的搜索框非常相似，当输入某一个要查找的字符串时，google搜索框就会列出以这个字符串开头的最热门的搜索字符串列表。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;AutoCompleteTextView</div><div class="line">   android:layout_width=<span class="string">"fill_parent“  android:layout_height="</span>wrap_content“</div><div class="line">  &lt;!– completionThreshold 指定至少输入几个字符后才会出现自动提示功能 </div><div class="line">   android:completionThreshold=<span class="string">"1“  </span></div><div class="line">   android:id="@+<span class="built_in">id</span>/<span class="built_in">name</span><span class="string">" /&gt;</span></div></pre></td></tr></table></figure>
<p>代码处理：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123; ……</div><div class="line">	<span class="keyword">String</span>[] names = &#123;<span class="string">"老张"</span>, <span class="string">"老方"</span>, <span class="string">"老毕"</span>, <span class="string">"李明"</span> , <span class="string">"李丽"</span>, <span class="string">"陈江"</span>, <span class="string">"abc"</span>, <span class="string">"acc"</span>&#125;;</div><div class="line">	AutoCompleteTextView nameText = (AutoCompleteTextView)<span class="keyword">this</span>.findViewById(R.id.name);</div><div class="line">ArrayAdapter&lt;<span class="keyword">String</span>&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;<span class="keyword">String</span>&gt;(<span class="keyword">this</span>, android.R.layout.simple_dropdown_item_1line, names);</div><div class="line">	nameText.setAdapter(adapter);&#125;</div></pre></td></tr></table></figure>
<h2 id="4-多次输入内容自动完成-MultiAutoCompleteTextView"><a href="#4-多次输入内容自动完成-MultiAutoCompleteTextView" class="headerlink" title="4. 多次输入内容自动完成(MultiAutoCompleteTextView)"></a>4. 多次输入内容自动完成(MultiAutoCompleteTextView)</h2><p><img src="http://obovytgzz.bkt.clouddn.com/ui4.png" alt="图片4"><br>除了AutoCompleteTextView控件外，我们还可以使用MultiAutoCompleteTextView控件来完成连续输入的功能。也就是说，当输入完一个字符串后，在该字符串后面输入一个逗号（,），在逗号前后可以有任意多个空格，然后再输入一个字符串，仍然会显示自动提示列表。使用MultiAutoCompleteTextView时，需要为它的setTokenizer()方法指定MultiAutoCompleteTextView.CommaTokenizer类对象实例，该对象表示采用逗号作为输入多个字符串的分隔符。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt; MultiAutoCompleteTextView</div><div class="line">   android:layout_width=<span class="string">"fill_parent“  android:layout_height="</span>wrap_content“</div><div class="line">  &lt;!– completionThreshold 指定至少输入几个字符后才会出现自动提示功能</div><div class="line">   android:completionThreshold=<span class="string">"1“  </span></div><div class="line">   android:id="@+<span class="built_in">id</span>/<span class="built_in">name</span><span class="string">" /&gt;</span></div></pre></td></tr></table></figure>
<p>代码处理</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> void onCreate(Bundle savedInstanceState) &#123;  <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">	setContentView(R.layout.main);</div><div class="line">     <span class="keyword">String</span>[] names = &#123;<span class="string">"老张"</span>, <span class="string">"老方"</span>, <span class="string">"老毕"</span>, <span class="string">"李明"</span> , <span class="string">"李丽"</span>, <span class="string">"陈江"</span>, <span class="string">"abc"</span>, <span class="string">"acc"</span>&#125;;</div><div class="line">     MultiAutoCompleteTextView nameText = (MultiAutoCompleteTextView)<span class="built_in">this</span>.findViewById(R.id.name);</div><div class="line">ArrayAdapter&lt;<span class="keyword">String</span>&gt; adapter = <span class="keyword">new</span> <span class="type">ArrayAdapter</span>&lt;<span class="keyword">String</span>&gt;(<span class="built_in">this</span>, 			  	       	android.R.layout.simple_dropdown_item_1line,names);</div><div class="line">     nameText.setAdapter(adapter);</div><div class="line">     nameText.setTokenizer(<span class="keyword">new</span> <span class="type">MultiAutoCompleteTextView</span>.CommaTokenizer());&#125;</div></pre></td></tr></table></figure>
<h2 id="5-列表视图-ListView"><a href="#5-列表视图-ListView" class="headerlink" title="5. 列表视图(ListView)"></a>5. 列表视图(ListView)</h2><p><img src="http://obovytgzz.bkt.clouddn.com/ui5.png" alt="图片5"><br>列表的显示需要三个元素：</p>
<ol>
<li>ListVeiw 用来展示列表的View。</li>
<li>适配器 用来把数据映射到ListView上的中介。</li>
<li>数据具体的将被映射的字符串，图片，或者基本组件。<br>根据列表的适配器类型，列表分为三种，ArrayAdapter，SimpleAdapter和SimpleCursorAdapter。<br>其中以ArrayAdapter最为简单，只能展示一行字。SimpleAdapter有最好的扩充性，可以自定义出各种效果。SimpleCursorAdapter可以认为是SimpleAdapter对数据库的简单结合，可以方面的把数据库的内容以列表的形式展示出来。</li>
</ol>
<h3 id="5-1-ArrayAdapter类型ListView"><a href="#5-1-ArrayAdapter类型ListView" class="headerlink" title="5.1 ArrayAdapter类型ListView"></a>5.1 ArrayAdapter类型ListView</h3><p><img src="http://obovytgzz.bkt.clouddn.com/ui6.png" alt="图片6"></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyListView</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="type">ListView</span> listView;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public void onCreate(<span class="type">Bundle</span> savedInstanceState)&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        listView = <span class="keyword">new</span> <span class="type">ListView</span>(<span class="keyword">this</span>);</div><div class="line">        listView.setAdapter(<span class="keyword">new</span> <span class="type">ArrayAdapter</span>&lt;<span class="type">String</span>&gt;(<span class="keyword">this</span>, 			android.<span class="type">R</span>.layout.simple_expandable_list_item_1,getData()));</div><div class="line">        setContentView(listView);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="type">List</span>&lt;<span class="type">String</span>&gt; getData()&#123;</div><div class="line">        <span class="type">List</span>&lt;<span class="type">String</span>&gt; data = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;<span class="type">String</span>&gt;();</div><div class="line">        data.add(<span class="string">"测试数据1"</span>);</div><div class="line">        data.add(<span class="string">"测试数据2"</span>);</div><div class="line">        data.add(<span class="string">"测试数据3"</span>);</div><div class="line">        data.add(<span class="string">"测试数据4"</span>);</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码使用了ArrayAdapter(Context context, int textViewResourceId, List<t> objects)来装配数据，要装配这些数据就需要一个连接ListView视图对象和数组数据的适配器来两者的适配工作，ArrayAdapter的构造需要三个参数，依次为this,布局文件（注意这里的布局文件描述的是列表的每一行的布局，android.R.layout.simple_list_item_1是系统定义好的布局文件只显示一行文字，数据源(一个List集合)。同时用setAdapter()完成适配的最后工作。</t></p>
<h3 id="5-2-SimpleCursorAdapter类型ListView"><a href="#5-2-SimpleCursorAdapter类型ListView" class="headerlink" title="5.2 SimpleCursorAdapter类型ListView"></a>5.2 SimpleCursorAdapter类型ListView</h3><p><img src="http://obovytgzz.bkt.clouddn.com/ui7.png" alt="图片7"></p>
<blockquote>
<p>sdk的解释是这样的：An easy adapter to map columns from a cursor to TextViews or ImageViews defined in an XML file. You can specify which columns you want, which views you want to display the columns, and the XML file that defines the appearance of these views。</p>
</blockquote>
<p>简单的说就是方便把从游标得到的数据进行列表显示，并可以把指定的列映射到对应的TextView中。<br>下面的程序是从电话簿中把联系人显示到类表中。先在通讯录中添加一个联系人作为数据库的数据。然后获得一个指向数据库的Cursor并且定义一个布局文件（当然也可以使用系统自带的）。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyListView2</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="type">ListView</span> listView;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public void onCreate(<span class="type">Bundle</span> savedInstanceState)&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        listView = <span class="keyword">new</span> <span class="type">ListView</span>(<span class="keyword">this</span>);</div><div class="line">        <span class="type">Cursor</span> cursor = getContentResolver().query(<span class="type">People</span>.<span class="type">CONTENT_URI</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</div><div class="line">        startManagingCursor(cursor);</div><div class="line">        <span class="type">ListAdapter</span> listAdapter = <span class="keyword">new</span> <span class="type">SimpleCursorAdapter</span>(<span class="keyword">this</span>, 		 	android.<span class="type">R</span>.layout.simple_expandable_list_item_1, </div><div class="line">                cursor,</div><div class="line">                <span class="keyword">new</span> <span class="type">String</span>[]&#123;<span class="type">People</span>.<span class="type">NAME</span>&#125;, </div><div class="line">                <span class="keyword">new</span> int[]&#123;android.<span class="type">R</span>.id.text1&#125;);</div><div class="line">        listView.setAdapter(listAdapter);</div><div class="line">        setContentView(listView);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Cursor cursor = getContentResolver().query(People.CONTENT_URI, null, null, null, null);先获得一个指向系统通讯录数据库的Cursor对象获得数据来源。startManagingCursor(cursor);我们将获得的Cursor对象交由Activity管理，这样Cursor的生命周期和Activity便能够自动同步，省去自己手动管理Cursor。</p>
<p>SimpleCursorAdapter 构造函数前面3个参数和ArrayAdapter是一样的，最后两个参数：一个包含数据库的列的String型数组，一个包含布局文件中对应组件id的int型数组。其作用是自动的将String型数组所表示的每一列数据映射到布局文件对应id的组件上。上面的代码，将NAME列的数据一次映射到布局文件的id为text1的组件上。<br>注意：需要在AndroidManifest.xml中如权限：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.READ_CONTACTS"</span>/&gt;</div></pre></td></tr></table></figure>
<h3 id="5-3-SimpleAdapter类型ListView"><a href="#5-3-SimpleAdapter类型ListView" class="headerlink" title="5.3 SimpleAdapter类型ListView"></a>5.3 SimpleAdapter类型ListView</h3><p><img src="http://obovytgzz.bkt.clouddn.com/ui8.png" alt="图片8"><br>SimpleAdapter的扩展性最好，可以定义各种各样的布局出来，可以放上ImageView（图片），还可以放上Button（按钮），CheckBox（复选框）等等。下面的代码都直接继承了ListActivity，ListActivity和普通的Activity没有太大的差别，不同就是对显示ListView做了许多优化，方面显示而已。下面的程序是实现一个带有图片的类表。</p>
<p>首先需要定义好一个用来显示每一个列内容的xml。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span> <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span> <span class="attr">android:id</span>=<span class="string">"@+id/img"</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"5px"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:id</span>=<span class="string">"@+id/title"</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"#FFFFFFFF"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"22px"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:id</span>=<span class="string">"@+id/info"</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"#FFFFFFFF"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"13px"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>实现代码：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class MyListView3 extends ListActivity &#123;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        SimpleAdapter adapter = <span class="keyword">new</span> SimpleAdapter(<span class="keyword">this</span>,getData(),R.layout.vlist,</div><div class="line">                <span class="keyword">new</span> <span class="keyword">String</span>[]&#123;<span class="string">"title"</span>,<span class="string">"info"</span>,<span class="string">"img"</span>&#125;,</div><div class="line">                <span class="keyword">new</span> <span class="built_in">int</span>[]&#123;R.id.title,R.id.info,R.id.img&#125;);</div><div class="line">        setListAdapter(adapter);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> List&lt;Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt;&gt; getData() &#123;</div><div class="line">        List&lt;Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt;&gt;();</div><div class="line">        Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt;();</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"title"</span>, <span class="string">"G1"</span>);</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"info"</span>, <span class="string">"google 1"</span>);</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"img"</span>, R.drawable.i1);</div><div class="line">        list.<span class="built_in">add</span>(<span class="built_in">map</span>);</div><div class="line"> </div><div class="line">        <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt;();</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"title"</span>, <span class="string">"G2"</span>);</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"info"</span>, <span class="string">"google 2"</span>);</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"img"</span>, R.drawable.i2);</div><div class="line">        list.<span class="built_in">add</span>(<span class="built_in">map</span>);</div><div class="line"> </div><div class="line">        <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt;();</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"title"</span>, <span class="string">"G3"</span>);</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"info"</span>, <span class="string">"google 3"</span>);</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"img"</span>, R.drawable.i3);</div><div class="line">        list.<span class="built_in">add</span>(<span class="built_in">map</span>);</div><div class="line">         </div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>使用simpleAdapter的数据用一般都是HashMap构成的List，list的每一节对应ListView的每一行。HashMap的每个键值数据映射到布局文件中对应id的组件上。因为系统没有对应的布局文件可用，我们可以自己定义一个布局vlist.xml。下面做适配，new一个SimpleAdapter参数依次是：this，布局文件（vlist.xml），HashMap的 title 和 info，img。布局文件的组件id，title，info，img。布局文件的各组件分别映射到HashMap的各元素上，完成适配。</p>
<h3 id="5-4-有按钮的ListView"><a href="#5-4-有按钮的ListView" class="headerlink" title="5.4 有按钮的ListView"></a>5.4 有按钮的ListView</h3><p><img src="http://obovytgzz.bkt.clouddn.com/ui9.png" alt="图片9"><br>但是有时候，列表不光会用来做显示用，同样可以在在上面添加按钮。添加按钮首先要写一个有按钮的xml文件，然后自然会想到用上面的方法定义一个适配器，然后将数据映射到布局文件上。但是事实并非这样，因为按钮是无法映射的，即使你成功的用布局文件显示出了按钮也无法添加按钮的响应，这时就要研究一下ListView是如何现实的了，而且必须要重写一个类继承BaseAdapter.下面的示例将显示一个按钮和一个图片,两行字如果单击按钮将删除此按钮的所在行。并告诉你ListView究竟是如何工作的。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span> <span class="attr">android:id</span>=<span class="string">"@+id/img"</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"5px"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:id</span>=<span class="string">"@+id/title"</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"#FFFFFFFF"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"22px"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:id</span>=<span class="string">"@+id/info"</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"#FFFFFFFF"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"13px"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:id</span>=<span class="string">"@+id/view_btn"</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"@string/s_view_btn"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"bottom|right"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>代码实现：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class MyListView4 extends ListActivity &#123;</div><div class="line">    <span class="keyword">private</span> List&lt;Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt;&gt; mData;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        mData = getData();</div><div class="line">        MyAdapter adapter = <span class="keyword">new</span> MyAdapter(<span class="keyword">this</span>);</div><div class="line">        setListAdapter(adapter);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> List&lt;Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt;&gt; getData() &#123;</div><div class="line">        List&lt;Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt;&gt;();</div><div class="line">        Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt;();</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"title"</span>, <span class="string">"G1"</span>);</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"info"</span>, <span class="string">"google 1"</span>);</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"img"</span>, R.drawable.i1);</div><div class="line">        list.<span class="built_in">add</span>(<span class="built_in">map</span>);</div><div class="line"> </div><div class="line">        <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt;();</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"title"</span>, <span class="string">"G2"</span>);</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"info"</span>, <span class="string">"google 2"</span>);</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"img"</span>, R.drawable.i2);</div><div class="line">        list.<span class="built_in">add</span>(<span class="built_in">map</span>);</div><div class="line"> </div><div class="line">        <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt;();</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"title"</span>, <span class="string">"G3"</span>);</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"info"</span>, <span class="string">"google 3"</span>);</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"img"</span>, R.drawable.i3);</div><div class="line">        list.<span class="built_in">add</span>(<span class="built_in">map</span>);</div><div class="line">         </div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="comment">// ListView 中某项被选中后的逻辑</span></div><div class="line">    @Override</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onListItemClick(ListView l, View v, <span class="built_in">int</span> position, <span class="keyword">long</span> id) &#123;</div><div class="line">        Log.v(<span class="string">"MyListView4-click"</span>, (<span class="keyword">String</span>)mData.<span class="built_in">get</span>(position).<span class="built_in">get</span>(<span class="string">"title"</span>));</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * listview中点击按键弹出对话框</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> showInfo()&#123;</div><div class="line">        <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>)</div><div class="line">        .setTitle(<span class="string">"我的listview"</span>)</div><div class="line">        .setMessage(<span class="string">"介绍..."</span>)</div><div class="line">        .setPositiveButton(<span class="string">"确定"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> <span class="keyword">void</span> onClick(DialogInterface dialog, <span class="built_in">int</span> which) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .show();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> class ViewHolder&#123;</div><div class="line">        <span class="keyword">public</span> ImageView img;</div><div class="line">        <span class="keyword">public</span> TextView title;</div><div class="line">        <span class="keyword">public</span> TextView info;</div><div class="line">        <span class="keyword">public</span> Button viewBtn;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> class MyAdapter extends BaseAdapter&#123;</div><div class="line">        <span class="keyword">private</span> LayoutInflater mInflater;</div><div class="line">        <span class="keyword">public</span> MyAdapter(Context context)&#123;</div><div class="line">            <span class="keyword">this</span>.mInflater = LayoutInflater.from(context);</div><div class="line">        &#125;</div><div class="line">        @Override</div><div class="line">        <span class="keyword">public</span> <span class="built_in">int</span> getCount() &#123;</div><div class="line">            <span class="keyword">return</span> mData.<span class="built_in">size</span>();</div><div class="line">        &#125;</div><div class="line">        @Override</div><div class="line">        <span class="keyword">public</span> <span class="keyword">Object</span> getItem(<span class="built_in">int</span> arg0) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        @Override</div><div class="line">        <span class="keyword">public</span> <span class="keyword">long</span> getItemId(<span class="built_in">int</span> arg0) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">         @Override</div><div class="line">        <span class="keyword">public</span> View getView(<span class="built_in">int</span> position, View convertView, ViewGroup parent) &#123;</div><div class="line">            ViewHolder holder = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</div><div class="line">                holder=<span class="keyword">new</span> ViewHolder();  </div><div class="line">                convertView = mInflater.inflate(R.layout.vlist2, <span class="keyword">null</span>);</div><div class="line">                holder.img = (ImageView)convertView.findViewById(R.id.img);</div><div class="line">                holder.title = (TextView)convertView.findViewById(R.id.title);</div><div class="line">                holder.info = (TextView)convertView.findViewById(R.id.info);</div><div class="line">                holder.viewBtn = (Button)convertView.findViewById(R.id.view_btn);</div><div class="line">                convertView.setTag(holder);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                holder = (ViewHolder)convertView.getTag();</div><div class="line">            &#125;</div><div class="line">            holder.img.setBackgroundResource((Integer)mData.<span class="built_in">get</span>(position).<span class="built_in">get</span>(<span class="string">"img"</span>));</div><div class="line">            holder.title.setText((<span class="keyword">String</span>)mData.<span class="built_in">get</span>(position).<span class="built_in">get</span>(<span class="string">"title"</span>));</div><div class="line">            holder.info.setText((<span class="keyword">String</span>)mData.<span class="built_in">get</span>(position).<span class="built_in">get</span>(<span class="string">"info"</span>));</div><div class="line">             </div><div class="line">            holder.viewBtn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">                @Override</div><div class="line">                <span class="keyword">public</span> <span class="keyword">void</span> onClick(View v) &#123;</div><div class="line">                    showInfo();                 </div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">return</span> convertView;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面将对上述代码，做详细的解释，listView在开始绘制的时候，系统首先调用getCount（）函数，根据他的返回值得到listView的长度（这也是为什么在开始的第一张图特别的标出列表长度），然后根据这个长度，调用getView（）逐一绘制每一行。如果你的getCount（）返回值是0的话，列表将不显示同样return 1，就只显示一行。</p>
<p>系统显示列表时，首先实例化一个适配器（这里将实例化自定义的适配器）。当手动完成适配时，必须手动映射数据，这需要重写getView（）方法。系统在绘制列表的每一行的时候将调用此方法。getView()有三个参数，position表示将显示的是第几行，covertView是从布局文件中inflate来的布局。我们用LayoutInflater的方法将定义好的vlist2.xml文件提取成View实例用来显示。然后将xml文件中的各个组件实例化（简单的findViewById()方法）。这样便可以将数据对应到各个组件上了。但是按钮为了响应点击事件，需要为它添加点击监听器，这样就能捕获点击事件。至此一个自定义的listView就完成了，现在让我们回过头从新审视这个过程。系统要绘制ListView了，他首先获得要绘制的这个列表的长度，然后开始绘制第一行，怎么绘制呢？调用getView()函数。在这个函数里面首先获得一个View（实际上是一个ViewGroup），然后再实例并设置各个组件，显示之。好了，绘制完这一行了。那 再绘制下一行，直到绘完为止。在实际的运行过程中会发现listView的每一行没有焦点了，这是因为Button抢夺了listView的焦点，只要布局文件中将Button设置为没有焦点就OK了。</p>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/blog/2011/08/Android基础-2011-08-10-android-basic-12.html">http://www.sguotao.com/blog/2011/08/Android基础-2011-08-10-android-basic-12.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-拖动条-SeekBar&quot;&gt;&lt;a href=&quot;#1-拖动条-SeekBar&quot; class=&quot;headerlink&quot; title=&quot;1. 拖动条(SeekBar)&quot;&gt;&lt;/a&gt;1. 拖动条(SeekBar)&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://obovy
    
    </summary>
    
      <category term="Android基础" scheme="http://www.sguotao.com/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://www.sguotao.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android基础11 常用UI（上）</title>
    <link href="http://www.sguotao.com//blog/2011/07/Android%E5%9F%BA%E7%A1%80-2011-07-21-android-basic-11.html"/>
    <id>http://www.sguotao.com//blog/2011/07/Android基础-2011-07-21-android-basic-11.html</id>
    <published>2011-07-21T02:27:04.000Z</published>
    <updated>2017-04-27T02:42:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-单选框-RadioButton"><a href="#1-单选框-RadioButton" class="headerlink" title="1. 单选框(RadioButton)"></a>1. 单选框(RadioButton)</h2><p><img src="http://obovytgzz.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-08-11%20%E4%B8%8A%E5%8D%8810.40.44.png" alt="图片1"><br>要完成单选框显示，需要使用到RadioGroup和RadioButton(单选框)。</p>
<ol>
<li>RadioGroup用于对单选框进行分组，相同组内的单选框只有一个单选框能被选中。</li>
<li>RadioGroup.check(R.id.dotNet);将id名为dotNet的单选框设置成选中状态。</li>
<li>(RadioButton) findViewById(radioGroup.getCheckedRadioButtonId());//获取被选中的单选框。</li>
<li>RadioButton.getText();//获取单选框的值</li>
<li>调用setOnCheckedChangeListener()方法，处理单选框被选择事件，把RadioGroup.OnCheckedChangeListener实例作为参数传入<br>界面设计代码：</li>
</ol>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;RadioGroup android:<span class="built_in">id</span>=<span class="string">"@+id/radioGroup"</span></div><div class="line">  xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">  android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">  android:layout_height=<span class="string">"wrap_content"</span>&gt;</div><div class="line">&lt;RadioButton android:<span class="built_in">id</span>=<span class="string">"@+id/java"</span></div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:<span class="built_in">text</span>=<span class="string">"java"</span> /&gt;</div><div class="line">    &lt;RadioButton android:<span class="built_in">id</span>=<span class="string">"@+id/dotNet"</span></div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:<span class="built_in">text</span>=<span class="string">"dotNet"</span> /&gt;</div><div class="line">    &lt;RadioButton android:<span class="built_in">id</span>=<span class="string">"@+id/php"</span></div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:<span class="built_in">text</span>=<span class="string">"PHP"</span> /&gt;</div><div class="line">&lt;/RadioGroup&gt;</div></pre></td></tr></table></figure>
<p>处理程序：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="literal">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">       <span class="params">...</span><span class="params">...</span></div><div class="line">        RadioGroup radioGroup = (RadioGroup) findViewById(R.id.radioGroup); </div><div class="line">        radioGroup.setOnCheckedChangeListener(<span class="literal">new</span> RadioGroup.OnCheckedChangeListener() &#123;</div><div class="line">            <span class="keyword">public</span> <span class="literal">void</span> onCheckedChanged(RadioGroup <span class="keyword">group</span>, int checkedId) &#123;</div><div class="line">                RadioButton radioButton = (RadioButton) findViewById(checkedId);</div><div class="line">                <span class="keyword">Log</span>.i(<span class="built_in">TAG</span>, <span class="built_in">String</span>.valueOf(radioButton.getText()));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-多选框-CheckBox"><a href="#2-多选框-CheckBox" class="headerlink" title="2. 多选框(CheckBox)"></a>2. 多选框(CheckBox)</h2><p><img src="http://obovytgzz.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-08-11%20%E4%B8%8A%E5%8D%8810.40.54.png" alt="图片2"></p>
<ol>
<li>每个多选框都是独立的，可以通过迭代所有多选框，然后根据其状态是否被选中再获取其值。</li>
<li>CheckBox.setChecked(true);//设置成选中状态。</li>
<li>CheckBox.getText();//获取多选框的值</li>
<li>调用setOnCheckedChangeListener()方法，处理多选框被选择事件，把CompoundButton.OnCheckedChangeListener实例作为参数传入。</li>
</ol>
<p>代码处理:</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class CheckBoxActivity extends Activity &#123;</div><div class="line"><span class="keyword">private</span> List&lt;CheckBox&gt; checkboxs = <span class="keyword">new</span> ArrayList&lt;CheckBox&gt;();</div><div class="line">    @Override</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">……</div><div class="line">        checkboxs.<span class="built_in">add</span>((CheckBox) findViewById(R.id.checkboxdotNet)); </div><div class="line">        checkboxs.<span class="built_in">add</span>((CheckBox) findViewById(R.id.checkboxjava)); </div><div class="line">        checkboxs.<span class="built_in">add</span>((CheckBox) findViewById(R.id.checkboxphp)); </div><div class="line">        checkboxs.<span class="built_in">get</span>(<span class="number">1</span>).setChecked(<span class="keyword">true</span>);<span class="comment">//设置成选中状态</span></div><div class="line">        <span class="keyword">for</span>(CheckBox <span class="built_in">box</span> : checkboxs)&#123;</div><div class="line">        	<span class="built_in">box</span>.setOnCheckedChangeListener(listener);</div><div class="line">        &#125;</div><div class="line">        Button button = (Button)findViewById(R.id.checkboxButton);</div><div class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;			</div><div class="line">	@Override</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> onClick(View v) &#123;</div><div class="line">		 List&lt;<span class="keyword">String</span>&gt; values = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">String</span>&gt;();</div><div class="line">		 <span class="keyword">for</span>(CheckBox <span class="built_in">box</span> : checkboxs)&#123;</div><div class="line">			<span class="keyword">if</span>(<span class="built_in">box</span>.isChecked())&#123;</div><div class="line">			    values.<span class="built_in">add</span>(<span class="built_in">box</span>.getText().toString());</div><div class="line">			&#125;</div><div class="line">		 &#125;</div><div class="line">		 Toast.makeText(CheckBoxActivity.<span class="keyword">this</span>, values.toString(), <span class="number">1</span>).show();</div><div class="line">	&#125;&#125;);</div><div class="line">   &#125;</div><div class="line">  CompoundButton.OnCheckedChangeListener listener = <span class="keyword">new</span> CompoundButton.OnCheckedChangeListener() &#123;	@Override</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> onCheckedChanged(CompoundButton buttonView, <span class="built_in">boolean</span> isChecked) &#123;</div><div class="line">	CheckBox checkBox = (CheckBox) buttonView;</div><div class="line">	Log.i(TAG, <span class="string">"isChecked="</span>+ isChecked +<span class="string">",value="</span>+ checkBox.getText());<span class="comment">//输出单选框的值</span></div><div class="line">	&#125; &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-下拉列表框-Spinner"><a href="#3-下拉列表框-Spinner" class="headerlink" title="3. 下拉列表框(Spinner)"></a>3. 下拉列表框(Spinner)</h2><p><img src="http://obovytgzz.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-08-11%20%E4%B8%8A%E5%8D%8810.41.04.png" alt="图片3"></p>
<ol>
<li>Spinner.getItemAtPosition(Spinner.getSelectedItemPosition());获取下拉列表框的值</li>
<li>调用setOnItemSelectedListener()方法，处理下拉列表框被选择事件，把AdapterView.OnItemSelectedListener实例作为参数传入。</li>
</ol>
<p>代码处理:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpinnerActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		……</div><div class="line">      <span class="comment">//第二个参数为下拉列表框每一项的界面样式，该界面样式由Android系统提供，当然您也可以自定义</span></div><div class="line">        ArrayAdapter&lt;String&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>, android.R.layout.simple_spinner_item);</div><div class="line">        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);</div><div class="line">        adapter.add(<span class="string">"java"</span>);</div><div class="line">        adapter.add(<span class="string">"dotNet"</span>);</div><div class="line">        adapter.add(<span class="string">"php"</span>);</div><div class="line">        Spinner spinner = (Spinner) findViewById(R.id.spinner);</div><div class="line">        spinner.setAdapter(adapter);</div><div class="line">        spinner.setOnItemSelectedListener(<span class="keyword">new</span> AdapterView.OnItemSelectedListener() &#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemSelected</span><span class="params">(AdapterView&lt;?&gt; adapterView, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">		Spinner spinner = (Spinner)adapterView;</div><div class="line">		String itemContent = (String)adapterView.getItemAtPosition(position);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNothingSelected</span><span class="params">(AdapterView&lt;?&gt; view)</span> </span>&#123;</div><div class="line">		Log.i(TAG,  view.getClass().getName());</div><div class="line">	&#125;  &#125;);   &#125;&#125;</div></pre></td></tr></table></figure>
<h3 id="3-1-下拉列表框—采用javabean作为Adapter元素"><a href="#3-1-下拉列表框—采用javabean作为Adapter元素" class="headerlink" title="3.1 下拉列表框—采用javabean作为Adapter元素"></a>3.1 下拉列表框—采用javabean作为Adapter元素</h3><p>很多时候显示在下拉列表框的值并不是希望得到的值，如果要做一个联系人下拉列表框，列表框列出的是联系人的姓名，因为姓名有可能相同，所以我们希望得到的值应该为该联系人的id，要实现这种需求我们需要自定义Adapter，当然自定义Adapter需要我们编写一小段代码，如果我们不想编写Adapter，又能实现我们的需求，那是最好不过的了。通过观察ArrayAdapter中getView(int position, View convertView, ViewGroup parent)的内部代码发现，如果为ArrayAdapter指定的实际泛型参数类型没有实现CharSequence（字符串）接口，将会调用该类型对象的toString()向下拉列表框输出显示值。利用这个特点我们可以重写javaBean的toString()向下拉列表框提供显示值。</p>
<p><img src="http://obovytgzz.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-08-11%20%E4%B8%8A%E5%8D%8810.41.14.png" alt="图片4"><br>代码处理:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpinnerActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"SpinnerActivity"</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.spinner); </div><div class="line">        ArrayAdapter&lt;Person&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;Person&gt;(<span class="keyword">this</span>, android.R.layout.simple_spinner_item);</div><div class="line">        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);</div><div class="line">        adapter.add(<span class="keyword">new</span> Person(<span class="number">12</span>, <span class="string">"李明"</span>));</div><div class="line">        adapter.add(<span class="keyword">new</span> Person(<span class="number">100</span>, <span class="string">"李明"</span>));</div><div class="line">        adapter.add(<span class="keyword">new</span> Person(<span class="number">62</span>, <span class="string">"张天"</span>));</div><div class="line">        Spinner spinner = (Spinner) findViewById(R.id.spinner);</div><div class="line">        spinner.setAdapter(adapter);</div><div class="line">        spinner.setOnItemSelectedListener(<span class="keyword">new</span> AdapterView.OnItemSelectedListener() &#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemSelected</span><span class="params">(AdapterView&lt;?&gt; adapterView, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">		Spinner spinner = (Spinner)adapterView;</div><div class="line">		Person person = (Person)adapterView.getItemAtPosition(position);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNothingSelected</span><span class="params">(AdapterView&lt;?&gt; view)</span> </span>&#123;</div><div class="line">		Log.i(TAG,  view.getClass().getName());</div><div class="line">	&#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Person.java:</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Integer id;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Integer id, String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	……</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-2-下拉列表框–自定义选项界面样式"><a href="#3-2-下拉列表框–自定义选项界面样式" class="headerlink" title="3.2 下拉列表框–自定义选项界面样式"></a>3.2 下拉列表框–自定义选项界面样式</h3><p><img src="http://obovytgzz.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-08-11%20%E4%B8%8A%E5%8D%8810.41.27.png" alt="图片5"></p>
<ol>
<li>Spinner.getItemAtPosition(Spinner.getSelectedItemPosition());获取下拉列表框的值</li>
<li>调用setOnItemSelectedListener()方法，处理下拉列表框被选择事件，把AdapterView.OnItemSelectedListener实例作为参数传入。</li>
</ol>
<p>下拉列表框每一项的界面样式:stylespinner.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">TextView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">   <span class="attr">android:id</span>=<span class="string">"@+id/contentTextView"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span> </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> </div><div class="line">    <span class="attr">android:background</span>=<span class="string">"#F4FDFF"</span> /&gt;</div></pre></td></tr></table></figure>
<p>代码处理:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpinnerActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"SpinnerActivity"</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.spinner); </div><div class="line">         <span class="comment">//第二个参数为layout文件在R文件的id,第三个参数为TextView在layout文件的id</span></div><div class="line">    ArrayAdapter&lt;String&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>, R.layout.stylespinner,R.id.contentTextView);</div><div class="line">        adapter.add(<span class="string">"java"</span>);</div><div class="line">        adapter.add(<span class="string">"dotNet"</span>);</div><div class="line">        adapter.add(<span class="string">"php"</span>);</div><div class="line">        Spinner spinner = (Spinner) findViewById(R.id.spinner);</div><div class="line">        spinner.setAdapter(adapter);</div><div class="line">        spinner.setOnItemSelectedListener(<span class="keyword">new</span> AdapterView.OnItemSelectedListener() &#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemSelected</span><span class="params">(AdapterView&lt;?&gt; adapterView, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">		Spinner spinner = (Spinner)adapterView;</div><div class="line">		String itemContent = (String)adapterView.getItemAtPosition(position);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNothingSelected</span><span class="params">(AdapterView&lt;?&gt; view)</span> </span>&#123;</div><div class="line">		Log.i(TAG,  view.getClass().getName());</div><div class="line">	&#125; &#125;);</div><div class="line">    &#125;&#125;</div></pre></td></tr></table></figure>
<h3 id="3-3-总结"><a href="#3-3-总结" class="headerlink" title="3.3 总结"></a>3.3 总结</h3><p>实现spinner的步骤：</p>
<ol>
<li>定义<spinner>标签</spinner></li>
<li>创建一个适配器</li>
<li>获取Spinner标签，调用setAdapter(SpinnerAdapter adapter)方法设置一个适配器</li>
<li>调用setOnItemSelectedListener(OnItemSelectedListener listener)方法设置监听器监听选中事件</li>
<li>Spinner适配器的数据来源：</li>
</ol>
<p>1)    使用字符串构建适配器</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ArrayAdapter&lt;<span class="keyword">String</span>&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;<span class="keyword">String</span>&gt;(<span class="keyword">this</span>, android.R.layout.simple_spinner_item);</div><div class="line">adapter.<span class="built_in">add</span>(<span class="string">"Java"</span>);</div><div class="line">adapter.<span class="built_in">add</span>(<span class="string">".NET"</span>);</div><div class="line">adapter.<span class="built_in">add</span>(<span class="string">"PHP"</span>);</div></pre></td></tr></table></figure>
<p>2)    使用JavaBean构建适配器</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ArrayAdapter&lt;User&gt; adapter = <span class="keyword">new</span> <span class="type">ArrayAdapter</span>&lt;User&gt;(<span class="built_in">this</span>, android.R.layout.simple_spinner_item);</div><div class="line">adapter.add(<span class="keyword">new</span> <span class="type">User</span>(<span class="number">1</span>, <span class="string">"lhm"</span>, <span class="string">"lhm@ncist.cn"</span>));</div><div class="line">adapter.add(<span class="keyword">new</span> <span class="type">User</span>(<span class="number">2</span>, <span class="string">"yzk"</span>, <span class="string">"yzk@ncist.cn"</span>));</div><div class="line">adapter.add(<span class="keyword">new</span> <span class="type">User</span>(<span class="number">3</span>, <span class="string">"hsp"</span>, <span class="string">"hsp@ncist.cn"</span>));</div></pre></td></tr></table></figure>
<p>3)    使用资源文件构建适配器</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ArrayAdapter&lt;CharSequence&gt; adapter = ArrayAdapter.createFromResource(<span class="keyword">this</span>, R.<span class="built_in">array</span>.names, android.R.layout.simple_spinner_item);</div></pre></td></tr></table></figure>
<p>4)    自定义适配器样式</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ArrayAdapter&lt;<span class="keyword">String</span>&gt; adapter = <span class="keyword">new</span> <span class="type">ArrayAdapter</span>&lt;<span class="keyword">String</span>&gt;(<span class="built_in">this</span>, R.layout.custom, R.id.content);</div><div class="line"><span class="comment">//R.layout.custom 布局文件ID ，R.id.content 哪一个组件用来显示文本</span></div></pre></td></tr></table></figure>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/blog/2011/07/Android基础-2011-07-21-android-basic-11.html">http://www.sguotao.com/blog/2011/07/Android基础-2011-07-21-android-basic-11.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-单选框-RadioButton&quot;&gt;&lt;a href=&quot;#1-单选框-RadioButton&quot; class=&quot;headerlink&quot; title=&quot;1. 单选框(RadioButton)&quot;&gt;&lt;/a&gt;1. 单选框(RadioButton)&lt;/h2&gt;&lt;p&gt;&lt;img s
    
    </summary>
    
      <category term="Android基础" scheme="http://www.sguotao.com/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://www.sguotao.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android基础10 通知</title>
    <link href="http://www.sguotao.com//blog/2011/07/Android%E5%9F%BA%E7%A1%80-2011-07-15-android-basic-10.html"/>
    <id>http://www.sguotao.com//blog/2011/07/Android基础-2011-07-15-android-basic-10.html</id>
    <published>2011-07-15T02:27:04.000Z</published>
    <updated>2017-04-27T02:41:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于通知的文档位置：android-sdk-windows/docs/guide/topics/ui/notifiers/index.html</p>
<h2 id="1-土司通知"><a href="#1-土司通知" class="headerlink" title="1. 土司通知"></a>1. 土司通知</h2><p>a)    创建通知</p>
<figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Toast.makeText(Context context, CharSequence <span class="built_in">text</span>, <span class="built_in">int</span> <span class="built_in">duration</span>)</div><div class="line">Toast.makeText(Context context, <span class="built_in">int</span> resId, <span class="built_in">int</span> <span class="built_in">duration</span>)</div></pre></td></tr></table></figure>
<p>b)    发送通知  show()</p>
<h2 id="2-状态栏通知"><a href="#2-状态栏通知" class="headerlink" title="2. 状态栏通知"></a>2. 状态栏通知</h2><p><img src="http://obovytgzz.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-08-10%20%E4%B8%8B%E5%8D%886.38.30.png" alt="图片1"></p>
<p>通知用于在状态栏显示消息，消息到来时以图标方式表示，如果需要查看消息，可以拖动状态栏到屏幕下方即可查看消息。发送消息的代码如下：</p>
<figure class="highlight d"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取通知管理器</span></div><div class="line">NotificationManager mNotificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</div><div class="line"><span class="keyword">int</span> icon = android.R.drawable.stat_notify_chat;</div><div class="line"><span class="built_in">long</span> when = System.currentTimeMillis();</div><div class="line"><span class="comment">//新建一个通知，指定其图标和标题</span></div><div class="line"><span class="comment">//第一个参数为图标,第二个参数为短暂提示标题,第三个为通知时间</span></div><div class="line">Notification notification = <span class="keyword">new</span> Notification(icon, <span class="literal">null</span>, when); </div><div class="line">notification.defaults = Notification.DEFAULT_SOUND;<span class="comment">//发出默认声音</span></div><div class="line">Intent openintent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, OtherActivity.<span class="keyword">class</span>);</div><div class="line"><span class="comment">//当点击消息时就会向系统发送openintent意图，点击时发送</span></div><div class="line">PendingIntent contentIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span>, openintent, <span class="number">0</span>);</div><div class="line"><span class="comment">//设置通知点击事件</span></div><div class="line">notification.setLatestEventInfo(<span class="keyword">this</span>, “标题”, “我是内容<span class="string">", contentIntent);</span></div><div class="line">//发送消息，第一个参数为自定义的通知唯一标识</div><div class="line">mNotificationManager.notify(0, notification); </div><div class="line">注意：设置通知点击后清除，设置Notification 对象属性 </div><div class="line">n.flags = Notification.FLAG_AUTO_CANCEL;</div></pre></td></tr></table></figure>
<h2 id="3-对话框通知"><a href="#3-对话框通知" class="headerlink" title="3. 对话框通知"></a>3. 对话框通知</h2><h3 id="3-1-普通对话框"><a href="#3-1-普通对话框" class="headerlink" title="3.1 普通对话框"></a>3.1 普通对话框</h3><p>当应用需要显示一个进度条或需要用户对信息进行确认时，可以使用对话框来完成。下面代码将打开一个如图所示的对话框：代码采用的是一个链式调用，像setTitle()、setMessage()这些方法，他们的返回值都是当前对话框对象。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> AlertDialog.Builder(context)</div><div class="line">	.setTitle(<span class="string">"java培训"</span>)</div><div class="line">	.setCancelable(<span class="keyword">false</span>) <span class="comment">//设置不能通过“后退”按钮关闭对话框</span></div><div class="line">	.setMessage(<span class="string">"浏览华北科技网站?"</span>)</div><div class="line">	.setPositiveButton(<span class="string">"确认"</span>,</div><div class="line">		<span class="keyword">new</span> DialogInterface.OnClickListener()&#123;</div><div class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialoginterface, <span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">	    	    Uri uri = Uri.parse(<span class="string">"http://www.ncist.cn/"</span>);<span class="comment">//打开链接</span></div><div class="line">	    	    Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, uri);</div><div class="line">	    	    startActivity(intent);</div><div class="line">	    	&#125;</div><div class="line">	&#125;)</div><div class="line">	.setNegativeButton(<span class="string">"取消"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">        	  	 <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">               			 dialog.cancel();</div><div class="line">        	 	  &#125;</div><div class="line">    	&#125;)</div><div class="line">   	 .show();<span class="comment">//显示对话框</span></div></pre></td></tr></table></figure>
<h3 id="3-2-选项列表的对话框"><a href="#3-2-选项列表的对话框" class="headerlink" title="3.2 选项列表的对话框"></a>3.2 选项列表的对话框</h3><p><img src="http://obovytgzz.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-08-10%20%E4%B8%8B%E5%8D%886.38.50.png" alt="图片3"><br>下面代码将打开一个如图所示的选项列表对话框：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> String[] items = &#123;<span class="string">"java"</span>, <span class="string">".net"</span>, <span class="string">"php"</span>&#125;;</div><div class="line"><span class="keyword">new</span> AlertDialog.Builder(SenderNotificationActivity.<span class="keyword">this</span>).setTitle(<span class="string">"选择语言"</span>)</div><div class="line">	.setItems(items, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">	    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> item)</span> </span>&#123;</div><div class="line">	            Toast.makeText(getApplicationContext(), items[item], </div><div class="line">		Toast.LENGTH_SHORT).show();</div><div class="line">	    &#125;</div><div class="line">	&#125;).show();<span class="comment">//显示对话框</span></div></pre></td></tr></table></figure>
<h3 id="3-3-带单选框列表对话框"><a href="#3-3-带单选框列表对话框" class="headerlink" title="3.3 带单选框列表对话框"></a>3.3 带单选框列表对话框</h3><p><img src="http://obovytgzz.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-08-10%20%E4%B8%8B%E5%8D%886.38.57.png" alt="图片4"><br>下面代码将打开一个如图所示的带单选框的列表对话框：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> String[] items = &#123;<span class="string">"java"</span>, <span class="string">".net"</span>, <span class="string">"php"</span>&#125;;</div><div class="line"><span class="comment">//setSingleChoiceItems()的第二个参数是设置默认选项，选项索引从0开始，-1代表不选择任何选项。</span></div><div class="line"><span class="keyword">new</span> AlertDialog.Builder(SenderNotificationActivity.<span class="keyword">this</span>).setTitle(<span class="string">"选择语言"</span>)</div><div class="line">.setSingleChoiceItems(items, <span class="number">1</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">	 <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> item)</span> </span>&#123;</div><div class="line">	        Toast.makeText(getApplicationContext(), items[item], </div><div class="line">		Toast.LENGTH_SHORT).show();</div><div class="line">	        dialog.cancel();</div><div class="line">	  &#125;</div><div class="line">&#125;).show();<span class="comment">//显示对话框</span></div></pre></td></tr></table></figure>
<h3 id="3-4-带多选项列表的对话框"><a href="#3-4-带多选项列表的对话框" class="headerlink" title="3.4 带多选项列表的对话框"></a>3.4 带多选项列表的对话框</h3><p><img src="http://obovytgzz.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-08-10%20%E4%B8%8B%E5%8D%886.39.05.png" alt="图片6"><br>下面代码将打开一个如图所示的多选项列表对话框：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> String[] items = &#123;<span class="string">"java"</span>, <span class="string">".net"</span>, <span class="string">"php"</span>&#125;;</div><div class="line"><span class="keyword">new</span> AlertDialog.Builder(SenderNotificationActivity.<span class="keyword">this</span>).setCancelable(<span class="keyword">false</span>)</div><div class="line">.setTitle(<span class="string">"选择语言"</span>)</div><div class="line">.setMultiChoiceItems(items, <span class="keyword">new</span> <span class="keyword">boolean</span>[]&#123;<span class="keyword">false</span>,<span class="keyword">true</span>,<span class="keyword">false</span>&#125;, <span class="keyword">new</span> DialogInterface.OnMultiChoiceClickListener() &#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which, <span class="keyword">boolean</span> isChecked)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(isChecked)&#123;</div><div class="line">		Toast.makeText(getApplicationContext(), items[which], </div><div class="line">			Toast.LENGTH_SHORT).show();</div><div class="line">		&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">.setPositiveButton(<span class="string">"确认"</span>,<span class="keyword">new</span> DialogInterface.OnClickListener()&#123;</div><div class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialoginterface, <span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">		dialoginterface.dismiss();</div><div class="line">	 &#125;</div><div class="line">&#125;)</div><div class="line">.show();<span class="comment">//显示对话框</span></div></pre></td></tr></table></figure>
<h3 id="3-5-进度对话框"><a href="#3-5-进度对话框" class="headerlink" title="3.5 进度对话框"></a>3.5 进度对话框</h3><p><img src="http://obovytgzz.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-08-10%20%E4%B8%8B%E5%8D%886.39.16.png" alt="图片7"><br>调用setProgressStyle()方法设置进度对话框风格。有两种风格：<br>     ProgressDialog.STYLE_SPINNER 旋体进度条风格 (为默认风格)<br>     ProgressDialog.STYLE_HORIZONTAL 横向进度条风格</p>
<p>下面代码将打开一个如图所示的一个进度对话框：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProgressDialogActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> ProgressDialog progressDialog;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.menu); </div><div class="line">        <span class="comment">//开始一条专门处理耗时工作的线程</span></div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">	        <span class="meta">@Override</span></div><div class="line">	        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">	       <span class="keyword">try</span> &#123;</div><div class="line">			Thread.sleep(<span class="number">5</span>*<span class="number">1000</span>);<span class="comment">//假设这项工作需要5秒才能完成</span></div><div class="line">			progressDialog.dismiss();<span class="comment">//关闭进程对话框</span></div><div class="line">			<span class="comment">//runOnUiThread(finishDialog);//要求运行在UI线程</span></div><div class="line">		   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;&#125;</div><div class="line">	        &#125;</div><div class="line">        &#125;).start();        </div><div class="line">       progressDialog = ProgressDialog.show(ProgressDialogActivity.<span class="keyword">this</span>, <span class="string">"请稍等"</span>, <span class="string">"数据正在加载中..."</span>, <span class="keyword">true</span>);</div><div class="line">   &#125;	</div><div class="line">   <span class="keyword">private</span> Runnable finishDialog = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;           </div><div class="line">        	progressDialog.dismiss();</div><div class="line">        &#125;</div><div class="line">   &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>横向进度条风格的对话框</p>
<p><img src="http://obovytgzz.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-08-10%20%E4%B8%8B%E5%8D%886.39.26.png" alt="图片8"></p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ProgressDialog <span class="built_in">dialog</span> = new ProgressDialog(this);</div><div class="line"><span class="built_in">dialog</span>.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);	<span class="comment">// 设置进度条样式</span></div><div class="line"><span class="built_in">dialog</span>.setTitle(<span class="string">"下载中"</span>);</div><div class="line"><span class="built_in">dialog</span>.setMessage(<span class="string">"请稍候..."</span>);</div><div class="line"><span class="built_in">dialog</span>.setCancelable(<span class="literal">false</span>);</div><div class="line"><span class="built_in">dialog</span>.setMax(<span class="number">100</span>);</div><div class="line"><span class="built_in">dialog</span>.show();</div><div class="line"><span class="built_in">dialog</span>.setProgress(<span class="number">10</span>);		<span class="comment">// 设置进度</span></div><div class="line"><span class="built_in">dialog</span>.dismiss();		<span class="comment">// 对话框结束</span></div></pre></td></tr></table></figure>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/blog/2011/07/Android基础-2011-07-15-android-basic-10.html">http://www.sguotao.com/blog/2011/07/Android基础-2011-07-15-android-basic-10.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于通知的文档位置：android-sdk-windows/docs/guide/topics/ui/notifiers/index.html&lt;/p&gt;
&lt;h2 id=&quot;1-土司通知&quot;&gt;&lt;a href=&quot;#1-土司通知&quot; class=&quot;headerlink&quot; title=&quot;1
    
    </summary>
    
      <category term="Android基础" scheme="http://www.sguotao.com/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://www.sguotao.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android基础9 多媒体</title>
    <link href="http://www.sguotao.com//blog/2011/07/Android%E5%9F%BA%E7%A1%80-2011-07-09-android-basic-9.html"/>
    <id>http://www.sguotao.com//blog/2011/07/Android基础-2011-07-09-android-basic-9.html</id>
    <published>2011-07-09T02:27:04.000Z</published>
    <updated>2017-04-27T02:41:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-录音机"><a href="#1-录音机" class="headerlink" title="1.  录音机"></a>1.  录音机</h2><p>使用手机进行现场录音，实现步骤如下：<br>a)    在功能清单文件AndroidManifest.xml中添加音频刻录权限：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.RECORD_AUDIO"</span>/&gt;</div></pre></td></tr></table></figure>
<p>b)    编写音频刻录代码:</p>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="type">MediaRecorder</span> recorder = <span class="function"><span class="keyword">new</span> <span class="title">MediaRecorder</span>();</span></div><div class="line"> <span class="title">recorder</span>.<span class="title">setAudioSource</span>(<span class="type">MediaRecorder</span>.<span class="type">AudioSource</span>.<span class="type">MIC</span>);<span class="comment">//从麦克风采集声音</span></div><div class="line"> <span class="title">recorder</span>.<span class="title">setOutputFormat</span>(<span class="type">MediaRecorder</span>.<span class="type">OutputFormat</span>.<span class="type">THREE_GPP</span>);<span class="comment">//内容输出格式</span></div><div class="line"> <span class="title">recorder</span>.<span class="title">setAudioEncoder</span>(<span class="type">MediaRecorder</span>.<span class="type">AudioEncoder</span>.<span class="type">AMR_NB</span>);<span class="comment">//音频编码方式</span></div><div class="line"> <span class="title">recorder</span>.<span class="title">setOutputFile</span>("/mnt/sdcard/ncist.amr");</div><div class="line"> <span class="title">recorder</span>.<span class="title">prepare</span>();<span class="comment">//预期准备</span></div><div class="line"> <span class="title">recorder</span>.<span class="title">start</span>();   <span class="comment">//开始刻录</span></div><div class="line"> ...</div><div class="line"> <span class="title">recorder</span>.<span class="title">stop</span>();<span class="comment">//停止刻录</span></div><div class="line"> <span class="title">recorder</span>.<span class="title">reset</span>();   <span class="comment">//重设</span></div><div class="line"> <span class="title">recorder</span>.<span class="title">release</span>(); <span class="comment">//刻录完成一定要释放资源</span></div></pre></td></tr></table></figure>
<h2 id="2-音频播放器"><a href="#2-音频播放器" class="headerlink" title="2. 音频播放器"></a>2. 音频播放器</h2><p><img src="http://7u2np3.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-08-10%20%E4%B8%8B%E5%8D%886.18.40.png" alt="图片1"></p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">MediaPlayer mediaPlayer = <span class="keyword">new</span> MediaPlayer();</div><div class="line"><span class="built_in">if</span> (mediaPlayer.isPlaying()) &#123;</div><div class="line">   mediaPlayer.reset();<span class="comment">//重置为初始状态</span></div><div class="line">&#125;</div><div class="line">mediaPlayer.setDataSource(<span class="string">"/mnt/sdcard/god.mp3"</span>);</div><div class="line">mediaPlayer.<span class="built_in">prepare</span>();				</div><div class="line">mediaPlayer.start();<span class="comment">//开始或恢复播放</span></div><div class="line">mediaPlayer.pause();<span class="comment">//暂停播放</span></div><div class="line">mediaPlayer.start();<span class="comment">//恢复播放</span></div><div class="line">mediaPlayer.<span class="built_in">stop</span>();<span class="comment">//停止播放</span></div><div class="line">mediaPlayer.<span class="built_in">release</span>();<span class="comment">//释放资源</span></div><div class="line">mediaPlayer.setOnCompletionListener(<span class="keyword">new</span> MediaPlayer.OnCompletionListener() &#123;<span class="comment">//播出完毕事件</span></div><div class="line">       @Override </div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> onCompletion(MediaPlayer arg0) &#123;</div><div class="line">	    mediaPlayer.<span class="built_in">release</span>();</div><div class="line">        &#125;</div><div class="line">&#125;);</div><div class="line">mediaPlayer.setOnErrorListener(<span class="keyword">new</span> MediaPlayer.OnErrorListener() &#123;<span class="comment">// 错误处理事件</span></div><div class="line">         @Override </div><div class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> onError(MediaPlayer player, <span class="keyword">int</span> arg1, <span class="keyword">int</span> arg2) &#123;</div><div class="line">		mediaPlayer.<span class="built_in">release</span>();</div><div class="line">		<span class="built_in">return</span> false;</div><div class="line">         &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="3-使用soundpool播放音效"><a href="#3-使用soundpool播放音效" class="headerlink" title="3. 使用soundpool播放音效"></a>3. 使用soundpool播放音效</h2><p>在Android开发中我们经常使用MediaPlayer来播放音频文件，但是MediaPlayer存在一些不足，例如：资源占用量较高、延迟时间较长、不支持多个音频同时播放等。这些缺点决定了MediaPlayer在某些场合的使用情况不会很理想，例如在对时间精准度要求相对较高的游戏开发中。在游戏开发中我们经常需要播放一些游戏音效（比如：子弹爆炸，物体撞击等），这些音效的共同特点是短促、密集、延迟程度小。在这样的场景下，我们可以使用SoundPool代替MediaPlayer来播放这些音效。 </p>
<p>SoundPool（android.media.SoundPool），顾名思义是声音池的意思，主要用于播放一些较短的声音片段，支持从程序的资源或文件系统加载。与MediaPlayer相比，SoundPool的优势在于CPU资源占用量低和反应延迟小。另外，SoundPool还支持自行设置声音的品质、音量、播放比率等参数，支持通过ID对多个音频流进行管理。就现在已知的资料来说，SoundPool有一些设计上的BUG，从固件版本1.0开始有些还没有修复，我们在使用中应该小心再小心。相信将来Google会修复这些问题，但我们最好还是列出来：</p>
<ol>
<li>SoundPool最大只能申请1M的内存空间，这就意味着我们只能用一些很短的声音片段，而不是用它来播放歌曲或者做游戏背景音乐。</li>
<li>SoundPool提供了pause和stop方法，但这些方法建议最好不要轻易使用，因为有些时候它们可能会使你的程序莫名其妙的终止.建议使用这两个方法的时候尽可能多做测试工作，还有些朋友反映它们不会立即中止播放声音,而是把缓冲区里的数据播放完才会停下来,也许会多播放一秒钟。</li>
<li>SoundPool的效率问题。其实SoundPool的效率在这些播放类中算是很好的了，但是有的朋友在G1中测试它还是有100ms左右的延迟，这可能会影响用户体验。也许这不能管SoundPool本身，因为到了性能比较好的Droid中这个延迟就可以让人接受了。</li>
</ol>
<p>在现阶段SoundPool有这些缺陷，但也有着它不可替代的优点，基于这些建议大家<br><strong>在如下情况中多使用SoundPool</strong><br>a)    应用程序中的声效(按键提示音，消息等)<br>b)    游戏中密集而短暂的声音(如多个飞船同时爆炸)</p>
<p><strong>开发步骤</strong><br>a)    往项目的res/raw目录中放入音效文件。<br>b)    新建SoundPool对象，然后调用SoundPool.load()加载音效，调用SoundPool.play()播放指定音效文件。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">AudioActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="type">SoundPool</span> pool;</div><div class="line"><span class="meta">@Override</span></div><div class="line">public void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">	<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">	setContentView(<span class="type">R</span>.layout.main);</div><div class="line">	<span class="comment">//指定声音池的最大音频流数目为10，声音品质为5</span></div><div class="line">	pool = <span class="keyword">new</span> <span class="type">SoundPool</span>(<span class="number">10</span>, <span class="type">AudioManager</span>.<span class="type">STREAM_SYSTEM</span>, <span class="number">5</span>);</div><div class="line">	<span class="keyword">final</span> int sourceid = pool.load(<span class="keyword">this</span>, <span class="type">R</span>.raw.pj, <span class="number">0</span>);<span class="comment">//载入音频流，返回在池中的id</span></div><div class="line">	<span class="type">Button</span> button = (<span class="type">Button</span>)<span class="keyword">this</span>.findViewById(<span class="type">R</span>.id.button);</div><div class="line">	button.setOnClickListener(<span class="keyword">new</span> <span class="type">View</span>.<span class="type">OnClickListener</span>() &#123;</div><div class="line">		public void onClick(<span class="type">View</span> v) &#123;</div><div class="line">		<span class="comment">//播放音频，第二个参数为左声道音量;</span></div><div class="line">				第三个参数为右声道音量;</div><div class="line">				第四个参数为优先级；</div><div class="line">第五个参数为循环次数，<span class="number">0</span>不循环，<span class="number">-1</span>循环;第六个参数为速率，速率最低<span class="number">0.5</span>最高为<span class="number">2</span>，<span class="number">1</span>代表正常速度</div><div class="line">			pool.play(sourceid, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-视频播放器"><a href="#4-视频播放器" class="headerlink" title="4. 视频播放器"></a>4. 视频播放器</h2><p><img src="http://7u2np3.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-08-10%20%E4%B8%8B%E5%8D%886.18.54.png" alt="图片2"></p>
<p>a)    在main.xml布局文件添加用于视频画面绘制的SurfaceView 控件</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;SurfaceView <span class="string">android:</span>layout_width=<span class="string">"fill_parent"</span> <span class="string">android:</span>layout_height=<span class="string">"240dip"</span> <span class="string">android:</span>id=<span class="string">"@+id/surfaceView"</span> /&gt;</div></pre></td></tr></table></figure>
<p>b)    在Activity中</p>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="type">SurfaceView</span> surfaceView = (<span class="type">SurfaceView</span>)<span class="literal">this</span>.findViewById(<span class="type">R</span>.id.surfaceView);</div><div class="line">surfaceView.getHolder().setFixedSize(<span class="number">176</span>, <span class="number">144</span>);	<span class="comment">//设置分辨率</span></div><div class="line"><span class="comment">/*下面设置Surface不维护自己的缓冲区，而是等待屏幕的渲染引擎将内容推送到用户面前*/</span></div><div class="line">surfaceView.getHolder().setType(<span class="type">SurfaceHolder</span>.<span class="type">SURFACE_TYPE_PUSH_BUFFERS</span>);</div><div class="line"><span class="type">MediaPlayer</span> mediaPlayer = <span class="function"><span class="keyword">new</span> <span class="title">MediaPlayer</span>();</span></div><div class="line"><span class="title">mediaPlayer</span>.<span class="title">reset</span>();<span class="comment">//重置为初始状态</span></div><div class="line"><span class="title">mediaPlayer</span>.<span class="title">setAudioStreamType</span>(<span class="type">AudioManager</span>.<span class="type">STREAM_MUSIC</span>);</div><div class="line">/* 设置<span class="title">Video</span>影片以<span class="title">SurfaceHolder</span>播放 */</div><div class="line"><span class="title">mediaPlayer</span>.<span class="title">setDisplay</span>(surfaceView.getHolder());</div><div class="line"><span class="title">mediaPlayer</span>.<span class="title">setDataSource</span>("/mnt/sdcard/oppo.mp4");</div><div class="line"><span class="title">mediaPlayer</span>.<span class="title">prepare</span>();				</div><div class="line"><span class="title">mediaPlayer</span>.<span class="title">start</span>();<span class="comment">//播放</span></div><div class="line"><span class="title">mediaPlayer</span>.<span class="title">pause</span>();<span class="comment">//暂停播放</span></div><div class="line"><span class="title">mediaPlayer</span>.<span class="title">start</span>();<span class="comment">//恢复播放</span></div><div class="line"><span class="title">mediaPlayer</span>.<span class="title">stop</span>();<span class="comment">//停止播放</span></div><div class="line"><span class="title">mediaPlayer</span>.<span class="title">release</span>();<span class="comment">//释放资源</span></div></pre></td></tr></table></figure>
<h2 id="5-拍照"><a href="#5-拍照" class="headerlink" title="5. 拍照"></a>5. 拍照</h2><p>a)    在main.xml布局文件添加用于显示取景画面的SurfaceView 控件：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;SurfaceView <span class="string">android:</span>layout_width=<span class="string">"fill_parent"</span> <span class="string">android:</span>layout_height=<span class="string">"240dip"</span> <span class="string">android:</span>id=<span class="string">"@+id/surfaceView"</span> /&gt;</div></pre></td></tr></table></figure>
<p>b)    在Activity中</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">SurfaceView surfaceView = (SurfaceView)this.findViewById(R.id.surfaceView);</div><div class="line">surfaceView.getHolder().setFixedSize(<span class="number">176</span>, <span class="number">144</span>);	<span class="comment">//设置分辨率</span></div><div class="line"><span class="comment">/*下面设置Surface不维护自己的缓冲区，而是等待屏幕的渲染引擎将内容推送到用户面前*/</span></div><div class="line">surfaceView.getHolder().setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);</div><div class="line"><span class="comment">//打开摄像头SDK2.3之后支持前置摄像头，open方法可以接收一个int参数，用来指定哪个摄像头</span></div><div class="line">Camera camera = Camera.open();</div><div class="line">WindowManager wm = (WindowManager) getSystemService(Context.WINDOW_SERVICE);</div><div class="line"><span class="keyword">Display</span> <span class="keyword">display</span> = wm.getDefaultDisplay();</div><div class="line">Camera.Parameters <span class="keyword">parameters</span> = camera.getParameters();</div><div class="line"><span class="keyword">parameters</span>.setPreviewSize(display.getWidth(), display.getHeight());<span class="comment">//设置预览照片的大小</span></div><div class="line"><span class="keyword">parameters</span>.setPreviewFrameRate(3);<span class="comment">//每秒3帧</span></div><div class="line"><span class="keyword">parameters</span>.setPictureFormat(PixelFormat.JPEG);<span class="comment">//设置照片的输出格式</span></div><div class="line"><span class="keyword">parameters</span>.<span class="keyword">set</span>(<span class="string">"jpeg-quality"</span>, 85);<span class="comment">//照片质量</span></div><div class="line"><span class="keyword">parameters</span>.setPictureSize(display.getWidth(), display.getHeight());<span class="comment">//设置照片的大小</span></div><div class="line">camera.setParameters(<span class="keyword">parameters</span>);</div><div class="line">camera.setPreviewDisplay(surfaceView.getHolder());<span class="comment">//通过SurfaceView显示取景画面</span></div><div class="line">camera.startPreview();<span class="comment">//开始预览</span></div><div class="line">camera.autoFocus(null);<span class="comment">//自动对焦</span></div><div class="line">camera.takePicture(null, null, null, jpegCallback);<span class="comment">//拍照片</span></div><div class="line">camera.stopPreview();<span class="comment">//停止预览</span></div><div class="line">camera.release();<span class="comment">//释放摄像头</span></div></pre></td></tr></table></figure>
<p>c)    需要权限</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.CAMERA"</span> /&gt;</div></pre></td></tr></table></figure>
<p><strong>小结</strong><br>a)    设置预览显示位置</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">setPreviewDisplay</span><span class="params">(SurfaceHolder holder)</span></span></div></pre></td></tr></table></figure>
<p><strong>注意：SurfaceView不在前端显示的时候会被销毁，恢复之后会重绘</strong><br>b)    将摄像头拍摄画面显示在SurfaceView中，在此之前可对摄像头进行参数配置，getParameters() 方法可以获取摄像头的相关参数Parameters，调用其内部方法即可进行配置</p>
<p>c)    自动对焦</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">autoFocus</span><span class="params">(AutoFocusCallback cb)</span></span></div></pre></td></tr></table></figure>
<p>自动对焦是一个异步操作，如果我们向等待自动对焦结束之后才开始拍照，需要传入一个回调对象，在其回调函数中调用拍照方法</p>
<p>d)    拍照 </p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">takePicture</span><span class="params">(ShutterCallback shutter, PictureCallback raw, PictureCallback jpeg)</span></span></div></pre></td></tr></table></figure>
<p>拍照也是异步操作，需要通过回调函数来得到拍照之后的数据，注意拍照之后摄像头不回自动回到预览状态，需要重写调用startPreview()方法</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.CAMERA"</span>/&gt;</div></pre></td></tr></table></figure>
<h2 id="6-录像"><a href="#6-录像" class="headerlink" title="6. 录像"></a>6. 录像</h2><p>a)    在功能清单文件AndroidManifest.xml中添加音频刻录和照相机权限：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.RECORD_AUDIO"</span>/&gt;</div><div class="line"> &lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.CAMERA"</span>/&gt;</div><div class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.MOUNT_UNMOUNT_FILESYSTEMS"</span>/&gt;</div><div class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</div></pre></td></tr></table></figure>
<p>b)    编写音频刻录代码:</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">recorder</span><span class="selector-class">.reset</span>();</div><div class="line"><span class="selector-tag">recorder</span><span class="selector-class">.setVideoSource</span>(MediaRecorder.VideoSource.CAMERA); <span class="comment">//设置视频输入源，从照相机采集视频</span></div><div class="line"><span class="selector-tag">recorder</span><span class="selector-class">.setAudioSource</span>(MediaRecorder.AudioSource.MIC); <span class="comment">//设置音频输入源</span></div><div class="line"><span class="selector-tag">recorder</span><span class="selector-class">.setOutputFormat</span>(MediaRecorder.OutputFormat.THREE_GPP);<span class="comment">//设置输出格式</span></div><div class="line"><span class="selector-tag">recorder</span><span class="selector-class">.setVideoSize</span>(<span class="number">320</span>, <span class="number">240</span>);</div><div class="line"><span class="selector-tag">recorder</span><span class="selector-class">.setVideoFrameRate</span>(<span class="number">3</span>); <span class="comment">//每秒3帧</span></div><div class="line"><span class="selector-tag">recorder</span><span class="selector-class">.setVideoEncoder</span>(MediaRecorder.VideoEncoder.H263); <span class="comment">//设置视频编码方式</span></div><div class="line"><span class="selector-tag">recorder</span><span class="selector-class">.setAudioEncoder</span>(MediaRecorder.AudioEncoder.AMR_NB);<span class="comment">//设置音频编码器</span></div><div class="line"><span class="selector-tag">recorder</span><span class="selector-class">.setOutputFile</span>(<span class="string">"/mnt/sdcard/ncist.3gp"</span>);<span class="comment">//设置输出文件</span></div><div class="line"><span class="selector-tag">recorder</span><span class="selector-class">.setPreviewDisplay</span>(surfaceView.getHolder().getSurface());<span class="comment">//设置预览显示位置</span></div><div class="line"><span class="selector-tag">recorder</span><span class="selector-class">.prepare</span>();<span class="comment">//预期准备</span></div><div class="line"><span class="selector-tag">recorder</span><span class="selector-class">.start</span>();<span class="comment">//开始刻录</span></div><div class="line">...</div><div class="line"><span class="selector-tag">recorder</span><span class="selector-class">.stop</span>();<span class="comment">//停止刻录</span></div><div class="line"><span class="selector-tag">recorder</span><span class="selector-class">.release</span>(); <span class="comment">//刻录完成一定要释放资源</span></div></pre></td></tr></table></figure>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/blog/2011/07/Android基础-2011-07-09-android-basic-9.html">http://www.sguotao.com/blog/2011/07/Android基础-2011-07-09-android-basic-9.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-录音机&quot;&gt;&lt;a href=&quot;#1-录音机&quot; class=&quot;headerlink&quot; title=&quot;1.  录音机&quot;&gt;&lt;/a&gt;1.  录音机&lt;/h2&gt;&lt;p&gt;使用手机进行现场录音，实现步骤如下：&lt;br&gt;a)    在功能清单文件AndroidManifest.xml
    
    </summary>
    
      <category term="Android基础" scheme="http://www.sguotao.com/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://www.sguotao.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android基础8 服务(Service)</title>
    <link href="http://www.sguotao.com//blog/2011/07/Android%E5%9F%BA%E7%A1%80-2011-07-03-android-basic-8.html"/>
    <id>http://www.sguotao.com//blog/2011/07/Android基础-2011-07-03-android-basic-8.html</id>
    <published>2011-07-03T02:27:04.000Z</published>
    <updated>2017-04-27T02:40:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-服务-Service"><a href="#1-服务-Service" class="headerlink" title="1. 服务(Service)"></a>1. 服务(Service)</h2><p>Android中的服务和windows中的服务是类似的东西，服务一般没有用户操作界面，它运行于系统中不容易被用户发觉，可以使用它开发如监控之类的程序。服务的开发比较简单，如下：<br>第一步：继承Service类</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">SMSService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>
<p>第二步：在AndroidManifest.xml文件中的<application>节点里对服务进行配置:</application></p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;service android:<span class="built_in">name</span>=<span class="string">".SMSService"</span> /&gt;</div></pre></td></tr></table></figure>
<p>服务不能自己运行，需要通过调用Context.startService()或Context.bindService()方法启动服务。这两个方法都可以启动Service，但是它们的使用场合有所不同。</p>
<ol>
<li>使用startService()方法启用服务,访问者与服务之间没有关连，即使访问者退出了，服务仍然运行。</li>
<li>使用bindService()方法启用服务，访问者与服务绑定在了一起，访问者一旦退出，服务也就终止，大有“不求同时生，必须同时死”的特点。</li>
</ol>
<p>采用Context.startService()方法启动服务，只能调用Context.stopService()方法结束服务，服务结束时会调用onDestroy()方法。</p>
<h2 id="2-服务的生命周期"><a href="#2-服务的生命周期" class="headerlink" title="2. 服务的生命周期"></a>2. 服务的生命周期</h2><p>服务的生命周期跟启动服务的方法有关：</p>
<ol>
<li>当采用Context.startService()方法启动服务，与之有关的生命周期方法<br><strong>onCreate() –&gt;onStart() –&gt; onDestroy()</strong></li>
</ol>
<ul>
<li>onCreate()该方法在服务被创建时调用，该方法只会被调用一次，无论调用多少次startService()或bindService()方法，服务也只被创建一次。</li>
<li>onStart() 只有采用Context.startService()方法启动服务时才会回调该方法。该方法在服务开始运行时被调用。多次调用startService()方法尽管不会多次创建服务，但onStart() 方法会被多次调用。</li>
<li>onDestroy()该方法在服务被终止时调用。</li>
</ul>
<ol>
<li>当采用Context.bindService()方法启动服务，与之有关的生命周期方法<br><strong>onCreate() –&gt;onBind() –&gt;onUnbind() –&gt;onDestroy()</strong></li>
</ol>
<ul>
<li>onBind()只有采用Context.bindService()方法启动服务时才会回调该方法。该方法在调用者与服务绑定时被调用，当调用者与服务已经绑定，多次调用Context.bindService()方法并不会导致该方法被多次调用。</li>
<li>onUnbind()只有采用Context.bindService()方法启动服务时才会回调该方法。该方法在调用者与服务解除绑定时被调用。</li>
<li>如果先采用startService()启动服务,然后调用bindService()方法绑定到服务，再调用unbindService()解除绑定，最后调用bindService()再次绑定到服务。触发的生命周期方法如下：<br><strong>onCreate() –&gt; onStart() –&gt; onBind() –&gt; onUnbind()</strong>[重载后的方法需返回true] <strong>–&gt; onRebind()</strong></li>
</ul>
<h2 id="3-建立能与访问者进行通讯的本地服务"><a href="#3-建立能与访问者进行通讯的本地服务" class="headerlink" title="3. 建立能与访问者进行通讯的本地服务"></a>3. 建立能与访问者进行通讯的本地服务</h2><p>通过startService()和stopService()启动关闭服务。适用于服务和访问者之间没有交互的情况。如果服务和访问者之间需要方法调用或传递参数,则需要使用bindService()和unbindService()启动关闭服务。</p>
<p>采用Context.bindService()方法启动服务，在服务未被创建时，系统会先调用服务的onCreate()，接着调用onBind()，这个时候访问者和服务绑定在一起。 如果访问者要与服务进行通信，那么，onBind()必须返回Ibinder对象。如果访问者退出了，系统就会先调用服务的onUnbind()，接着调用onDestroy()。如果调用bindService()方法前服务已经被绑定，多次调用bindService()并不会导致多次创建服务及绑定(也就是说onCreate()和onBind()方法并不会被多次调用)。如果访问者希望与正在绑定的服务解除绑定，可以调用unbindService()，调用该方法也会导致系统调用服务的<strong>onUnbind()–&gt;onDestroy()</strong></p>
<p>Activity与服务进行通信，开发人员通常把通信方法定义在接口里，然后让Ibinder对象实现该接口，而Activity通过该接口引用服务onBind()返回的Ibinder对象，然后调用Ibinder对象里自定义的通信方法。本例是一个本地服务，即服务与Activity在同一个应用内部。<br>接口：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span>  <span class="keyword">interface</span>  <span class="title">ICountService</span> &#123;</div><div class="line">	<span class="function"><span class="keyword">public</span>  <span class="keyword">int</span> <span class="title">getCount</span>(<span class="params"></span>)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>服务类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> quit;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</div><div class="line"><span class="keyword">private</span> ServiceBinder serviceBinder = <span class="keyword">new</span> ServiceBinder();</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> <span class="keyword">implements</span> <span class="title">ICountService</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> count;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> serviceBinder;</div><div class="line">&#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">super</span>.onCreate();</div><div class="line">	<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">while</span> (!quit) &#123;</div><div class="line">			    <span class="keyword">try</span> &#123;	Thread.sleep(<span class="number">1000</span>);</div><div class="line">			    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;&#125;</div><div class="line">			    count++;</div><div class="line">			&#125;&#125;</div><div class="line">	&#125;).start();</div><div class="line">&#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">super</span>.onDestroy();</div><div class="line">	<span class="keyword">this</span>.quit = <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>客户端Activity：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> ICountService countService;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.main);</div><div class="line">		<span class="keyword">this</span>.bindService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, CountService.class), <span class="keyword">this</span>.serviceConnection, BIND_AUTO_CREATE);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onDestroy();</div><div class="line">		<span class="keyword">this</span>.unbindService(serviceConnection);</div><div class="line">	&#125;	</div><div class="line">	<span class="keyword">private</span> ServiceConnection serviceConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">		<span class="comment">//对于本地服务，获取的实例和服务onBind()返回的实例是同一个</span></div><div class="line">			countService = (ICountService) service;</div><div class="line">			<span class="keyword">int</span> i = countService.getCount();			</div><div class="line">			Log.v(<span class="string">"CountService"</span>, <span class="string">"Count is "</span> + i);</div><div class="line">		&#125;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">			countService = <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-使用AIDL和远程服务实现进程通信"><a href="#4-使用AIDL和远程服务实现进程通信" class="headerlink" title="4. 使用AIDL和远程服务实现进程通信"></a>4. 使用AIDL和远程服务实现进程通信</h2><p>在Android中, 每个应用程序都有自己的进程，当需要在不同的进程之间传递对象时，该如何实现呢? 显然, Java中是不支持跨进程内存共享的。因此要传递对象, 需要把对象解析成操作系统能够理解的数据格式, 以达到跨界对象访问的目的。在JavaEE中，采用RMI通过序列化传递对象。在Android中, 则采用AIDL(Android Interface Definition Language：接口定义语言)方式实现。</p>
<p>AIDL是一种接口定义语言，用于约束两个进程间的通讯规则，供编译器生成代码，实现Android设备上的两个进程间通信(IPC)。AIDL的IPC机制和EJB所采用的CORBA很类似，进程之间的通信信息，首先会被转换成AIDL协议消息，然后发送给对方，对方收到AIDL协议消息后再转换成相应的对象。由于进程之间的通信信息需要双向转换，所以android采用代理类在背后实现了信息的双向转换，代理类由android编译器生成，对开发人员来说是透明的。实现进程通信，一般需要下面步骤：</p>
<p>假设A应用需要与B应用进行通信，调用B应用中的download(String path)方法，B应用以Service方式向A应用提供服务。需要下面步骤: </p>
<p>在B应用中创建*.aidl文件，aidl文件的定义和接口的定义很相类，如：在cn.ncist.aidl包下创建IDownloadService.aidl文件，内容如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.ncist.aidl;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IDownloadService</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">download</span><span class="params">(String path)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当完成aidl文件创建后，eclipse会自动在项目的gen目录中同步生成IDownloadService.java接口文件。</p>
<p>接口文件中生成一个Stub的抽象类，里面包括aidl定义的方法，还包括一些其它辅助方法。值得关注的是asInterface(IBinder iBinder),它返回接口类型的实例，对于远程服务调用，远程服务返回给客户端的对象为代理对象，客户端在onServiceConnected(ComponentName name, IBinder service)引用该对象时不能直接强转成接口类型的实例，而应该使用asInterface(IBinder iBinder)进行类型转换。</p>
<p><strong>编写aidl文件时，需要注意下面几点</strong></p>
<ol>
<li>接口名和aidl文件名相同</li>
<li>接口和方法前不用加访问权限修饰符public,private,protected等,也不能用final,static</li>
<li>aidl默认支持的类型包话java基本类型（int,long,boolean等）和（String,List,Map,CharSequence），使用这些类型时不需要import声明。对于List和Map中的元素类型必须是aidl支持的类型。如果使用自定义类型作为参数或返回值，自定义类型必须实现Parcelable接口。</li>
<li>自定义类型和AIDL生成的其它接口类型在aidl描述文件中，应该显式import，即便在该类和定义的包在同一个包中。</li>
<li>在aidl文件中所有非Java基本类型参数必须加上in、out、inout标记，以指明参数是输入参数、输出参数还是输入输出参数。Java原始类型默认的标记为in,不能为其它标记。</li>
</ol>
<p>在B应用中实现aidl文件生成的接口（本例是IDownloadService），但并非直接实现接口，而是通过继承接口的Stub来实现（Stub抽象类内部实现了aidl接口），并且实现接口方法的代码。<br>内容如下：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ServiceBinder</span> <span class="keyword">extends</span> <span class="title">IDownloadService</span>.<span class="title">Stub</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	public void download(<span class="type">String</span> path) <span class="keyword">throws</span> <span class="type">RemoteException</span> &#123;</div><div class="line">		<span class="type">Log</span>.i(<span class="string">"DownloadService"</span>, path);</div><div class="line">	&#125;		</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在B应用中创建一个Service（服务），在服务的onBind(Intent intent)方法中返回实现了aidl接口的对象（本例是ServiceBinder）。内容如下：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">DownloadService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="type">ServiceBinder</span> serviceBinder = <span class="keyword">new</span> <span class="type">ServiceBinder</span>();</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	public <span class="type">IBinder</span> onBind(<span class="type">Intent</span> intent) &#123;</div><div class="line">		<span class="keyword">return</span> serviceBinder;</div><div class="line">	&#125;</div><div class="line">	public <span class="class"><span class="keyword">class</span> <span class="title">ServiceBinder</span> <span class="keyword">extends</span> <span class="title">IDownloadService</span>.<span class="title">Stub</span> </span>&#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		public void download(<span class="type">String</span> path) <span class="keyword">throws</span> <span class="type">RemoteException</span> &#123;</div><div class="line">			<span class="type">Log</span>.i(<span class="string">"DownloadService"</span>, path);</div><div class="line">		&#125;		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其他应用可以通过隐式意图访问服务,意图的动作可以自定义，AndroidManifest.xml配置代码如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">".DownloadService"</span> &gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"cn.ncist.process.aidl.DownloadService"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></div></pre></td></tr></table></figure>
<p>把B应用中aidl文件所在package连同aidl文件一起拷贝到客户端A应用，eclipse会自动在A应用的gen目录中为aidl文件同步生成IDownloadService.java接口文件,接下来就可以在A应用中实现与B应用通信，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> IDownloadService downloadService;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.main);</div><div class="line">		<span class="keyword">this</span>.bindService(<span class="keyword">new</span> Intent(<span class="string">"cn.ncist.process.aidl.DownloadService"</span>), 				                    <span class="keyword">this</span>.serviceConnection, BIND_AUTO_CREATE);<span class="comment">//绑定到服务</span></div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onDestroy();</div><div class="line">		<span class="keyword">this</span>.unbindService(serviceConnection);<span class="comment">//解除服务</span></div><div class="line">	&#125;	</div><div class="line">	<span class="keyword">private</span> ServiceConnection serviceConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">			downloadService = IDownloadService.Stub.asInterface(service);</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				downloadService.download(<span class="string">"http://www.ncist.cn"</span>);</div><div class="line">			&#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">				Log.e(<span class="string">"ClientActivity"</span>, e.toString());</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">			downloadService = <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-进程间传递自定义类型参数"><a href="#5-进程间传递自定义类型参数" class="headerlink" title="5. 进程间传递自定义类型参数"></a>5. 进程间传递自定义类型参数</h2><p>Aidl默认支持的类型包话java基本类型（int、long、boolean等）和（String、List、Map、CharSequence），如果要传递自定义的类型该如何实现呢？要传递自定义类型，首先要让自定义类型支持parcelable协议，实现步骤如下：</p>
<ol>
<li>自定义类型必须实现Parcelable接口，并且实现Parcelable接口的<br>public void writeToParcel(Parcel dest, int flags)方法 。</li>
<li>自定义类型中必须含有一个名称为CREATOR的静态成员，该成员对象要求实现Parcelable.Creator接口及其方法。</li>
<li>创建一个aidl文件声明你的自定义类型。</li>
</ol>
<p><strong>Parcelable接口的作用</strong><br>实现了Parcelable接口的实例可以将自身的状态信息（状态信息通常指的是各成员变量的值）写入Parcel，也可以从Parcel中恢复其状态。 Parcel用来完成数据的序列化传递。</p>
<p>进程间传递自定义类型的实现过程如下：<br>a)    创建自定义类型，并实现Parcelable接口,使其支持parcelable协议。如：在cn.ncist.domain包下创建Person.java:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.ncist.domain;</div><div class="line"><span class="keyword">import</span> android.os.Parcel;</div><div class="line"><span class="keyword">import</span> android.os.Parcelable;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Parcelable</span></span></div><div class="line">	<span class="title">private</span> <span class="title">Integer</span> <span class="title">id</span>;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Integer id, String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">		<span class="comment">//把javanbean中的数据写到Parcel</span></div><div class="line">		dest.writeInt(<span class="keyword">this</span>.id);</div><div class="line">		dest.writeString(<span class="keyword">this</span>.name);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//添加一个静态成员,名为CREATOR,该对象实现了Parcelable.Creator接口</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;Person&gt; CREATOR = <span class="keyword">new</span> 	Parcelable.Creator&lt;Person&gt;()&#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> Person <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</div><div class="line">		<span class="comment">//从Parcel中读取数据，返回person对象</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Person(source.readInt(), source.readString());</div><div class="line">		&#125;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="keyword">public</span> Person[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Person[size];</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>b)    在自定义类型所在包下创建一个aidl文件对自定义类型进行声明，文件的名称与自定义类型同名。</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">package cn.ncist.domain<span class="comment">;</span></div><div class="line">parcelable Person<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>c)    在接口aidl文件中使用自定义类型,需要使用import显式导入，本例在cn.ncist.aidl包下创建IPersonService.aidl文件，内容如下：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.ncist.aidl;</div><div class="line"><span class="keyword">import</span> cn.ncist.domain.Person;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IPersonService</span> &#123;</span></div><div class="line">      <span class="keyword">void</span> save(<span class="keyword">in</span> Person person);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>d)    在实现aidl文件生成的接口（本例是IPersonService），但并非直接实现接口，而是通过继承接口的Stub来实现（Stub抽象类内部实现了aidl接口），并且实现接口方法的代码。内容如下：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ServiceBinder</span> <span class="keyword">extends</span> <span class="title">IPersonService</span>.<span class="title">Stub</span> </span>&#123;</div><div class="line">       <span class="meta">@Override</span></div><div class="line">       public void save(<span class="type">Person</span> person) <span class="keyword">throws</span> <span class="type">RemoteException</span> &#123;</div><div class="line">		<span class="type">Log</span>.i(<span class="string">"PersonService"</span>, person.getId()+<span class="string">"="</span>+ person.getName());</div><div class="line">       &#125;		</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>e)    创建一个Service（服务），在服务的onBind(Intent intent)方法中返回实现了aidl接口的对象（本例是ServiceBinder）。内容如下：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">PersonService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="type">ServiceBinder</span> serviceBinder = <span class="keyword">new</span> <span class="type">ServiceBinder</span>();</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	public <span class="type">IBinder</span> onBind(<span class="type">Intent</span> intent) &#123;</div><div class="line">		<span class="keyword">return</span> serviceBinder;</div><div class="line">	&#125;</div><div class="line">	public <span class="class"><span class="keyword">class</span> <span class="title">ServiceBinder</span> <span class="keyword">extends</span> <span class="title">IPersonService</span>.<span class="title">Stub</span> </span>&#123;</div><div class="line">       <span class="meta">@Override</span></div><div class="line">       public void save(<span class="type">Person</span> person) <span class="keyword">throws</span> <span class="type">RemoteException</span> &#123;</div><div class="line">		<span class="type">Log</span>.i(<span class="string">"PersonService"</span>, person.getId()+<span class="string">"="</span>+ person.getName());</div><div class="line">       &#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其他应用可以通过隐式意图访问服务,意图的动作可以自定义，AndroidManifest.xml配置代码如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">".PersonService"</span> &gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"cn.ncist.process.aidl.PersonService "</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></div></pre></td></tr></table></figure>
<p>f)    把应用中的aidl文件和所在package一起拷贝到客户端应用的src目录下，eclipse会自动在客户端应用的gen目录中为aidl文件同步生成IPersonService.java接口文件,接下来再把自定义类型文件和类型声明aidl文件及所在package一起拷贝到客户端应用的src目录下。最后就可以在客户端应用中实现与远程服务的通信，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> IPersonService personService;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.main);</div><div class="line">		<span class="keyword">this</span>.bindService(<span class="keyword">new</span> Intent(<span class="string">"cn.ncist.process.aidl.PersonService"</span>), 					 				<span class="keyword">this</span>.serviceConnection, BIND_AUTO_CREATE);<span class="comment">//绑定到服务</span></div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onDestroy();</div><div class="line">		<span class="keyword">this</span>.unbindService(serviceConnection);<span class="comment">//解除服务</span></div><div class="line">	&#125;	</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> ServiceConnection serviceConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">			personService = IPersonService.Stub.asInterface(service);</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				personService.save(<span class="keyword">new</span> Person(<span class="number">56</span>,<span class="string">"liming"</span>));</div><div class="line">			&#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">				Log.e(<span class="string">"ClientActivity"</span>, e.toString());</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">			personService = <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6-监听电话呼叫状态"><a href="#6-监听电话呼叫状态" class="headerlink" title="6. 监听电话呼叫状态"></a>6. 监听电话呼叫状态</h2><p>要实现电话窃听，需要监听电话的状态，方法如下：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 取得电话服务 */</span></div><div class="line">	TelephonyManager telManager = (TelephonyManager) 				 		  		                getSystemService(Context.TELEPHONY_SERVICE);</div><div class="line">	PhoneStateListener listener = <span class="keyword">new</span> PhoneStateListener()&#123;	</div><div class="line">	<span class="meta">@Override</span>  </div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> onCallStateChanged(<span class="keyword">int</span> state, String incomingNumber) &#123;</div><div class="line">	      <span class="keyword">switch</span> (state)&#123;</div><div class="line">	        <span class="keyword">case</span> TelephonyManager.<span class="string">CALL_STATE_IDLE:</span> <span class="comment">/* 无任何状态时 */</span></div><div class="line">	        	<span class="keyword">break</span>;</div><div class="line">	        <span class="keyword">case</span> TelephonyManager.<span class="string">CALL_STATE_OFFHOOK:</span> <span class="comment">/* 接起电话时 */</span></div><div class="line">	        	<span class="keyword">break</span>;	</div><div class="line">	        <span class="keyword">case</span> TelephonyManager.<span class="string">CALL_STATE_RINGING:</span> <span class="comment">/* 电话进来时 */</span></div><div class="line">	        	<span class="keyword">break</span>;</div><div class="line">	      &#125;</div><div class="line">	<span class="keyword">super</span>.onCallStateChanged(state, incomingNumber);</div><div class="line">	&#125;        	</div><div class="line">&#125;;</div><div class="line"><span class="comment">//监听电话的状态</span></div><div class="line">telManager.listen(listener, PhoneStateListener.LISTEN_CALL_STATE);</div></pre></td></tr></table></figure>
<p>在清单文件AndroidManifest.xml中添加权限：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.READ_PHONE_STATE"</span>/&gt;</div></pre></td></tr></table></figure>
<h2 id="7-结束通话实现黑名单拦截"><a href="#7-结束通话实现黑名单拦截" class="headerlink" title="7. 结束通话实现黑名单拦截"></a>7. 结束通话实现黑名单拦截</h2><p>Android没有对外公开结束通话的API，如果需要结束通话，必须使用AIDL与电话管理服务进行通信，并调用服务中的API实现结束通话，方法如下：</p>
<p>a)    从Android的源代码中拷贝以下文件到项目中，开发工具会在gen目录下自动生成ITelephony.java<br>com.android.internal.telephony包下的ITelephony.aidl<br>android.telephony包下的NeighboringCellInfo.aidl<br><strong>注意：需要在项目中建立对应的包名存放上述两个aidl文件</strong></p>
<p>b)    调用ITelephony.endCall()结束通话：</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">Method</span> <span class="title">method</span> = <span class="title">Class</span>.<span class="title">forName</span><span class="params">("android.os.ServiceManager")</span>.<span class="title">getMethod</span><span class="params">("getService", String.<span class="keyword">class</span>)</span>;</span></div><div class="line">IBinder binder = (IBinder)<span class="function"><span class="keyword">method</span>.<span class="title">invoke</span><span class="params">(null, <span class="keyword">new</span> Object[]&#123;TELEPHONY_SERVICE&#125;)</span>;</span></div><div class="line">ITelephony telephony = ITelephony.Stub.asInterface(binder);</div><div class="line">telephony.endCall();</div></pre></td></tr></table></figure>
<p>在清单文件AndroidManifest.xml中添加权限：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.CALL_PHONE"</span> /&gt;</div></pre></td></tr></table></figure>
<h2 id="8-电话录音"><a href="#8-电话录音" class="headerlink" title="8. 电话录音"></a>8. 电话录音</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="type">TelephonyManager</span> manager = (<span class="type">TelephonyManager</span>) getSystemService(<span class="type">TELEPHONY_SERVICE</span>);</div><div class="line">manager.listen(<span class="keyword">new</span> <span class="type">MyListener</span>(), <span class="type">PhoneStateListener</span>.<span class="type">LISTEN_CALL_STATE</span>);</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">extends</span> <span class="title">PhoneStateListener</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="type">String</span> num;</div><div class="line">	<span class="keyword">private</span> <span class="type">MediaRecorder</span> recorder;</div><div class="line">	public void onCallStateChanged(int state, <span class="type">String</span> incomingNumber) &#123;</div><div class="line">		switch (state) &#123;</div><div class="line">			<span class="keyword">case</span> <span class="type">TelephonyManager</span>.<span class="type">CALL_STATE_RINGING</span>:</div><div class="line">				num = incomingNumber;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="type">TelephonyManager</span>.<span class="type">CALL_STATE_OFFHOOK</span>:</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">				<span class="type">File</span> file = <span class="keyword">new</span> <span class="type">File</span>(<span class="type">Environment</span>.getExternalStorageDirectory(), num + <span class="string">"_"</span> + 									<span class="type">System</span>.currentTimeMillis() + <span class="string">".3gp"</span>);</div><div class="line">					recorder = <span class="keyword">new</span> <span class="type">MediaRecorder</span>();</div><div class="line">					recorder.setAudioSource(<span class="type">AudioSource</span>.<span class="type">MIC</span>);</div><div class="line">					recorder.setOutputFormat(<span class="type">OutputFormat</span>.<span class="type">THREE_GPP</span>);</div><div class="line">					recorder.setAudioEncoder(<span class="type">AudioEncoder</span>.<span class="type">AMR_NB</span>);</div><div class="line">					recorder.setOutputFile(file.getAbsolutePath());</div><div class="line">					recorder.prepare();</div><div class="line">					recorder.start();</div><div class="line">				&#125; <span class="keyword">catch</span> (<span class="type">Exception</span> e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="type">TelephonyManager</span>.<span class="type">CALL_STATE_IDLE</span>:</div><div class="line">				<span class="keyword">if</span> (recorder != <span class="literal">null</span>) &#123;</div><div class="line">					recorder.stop();</div><div class="line">					recorder.release();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/blog/2011/07/Android基础-2011-07-03-android-basic-8.html">http://www.sguotao.com/blog/2011/07/Android基础-2011-07-03-android-basic-8.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-服务-Service&quot;&gt;&lt;a href=&quot;#1-服务-Service&quot; class=&quot;headerlink&quot; title=&quot;1. 服务(Service)&quot;&gt;&lt;/a&gt;1. 服务(Service)&lt;/h2&gt;&lt;p&gt;Android中的服务和windows中的服务是类似
    
    </summary>
    
      <category term="Android基础" scheme="http://www.sguotao.com/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://www.sguotao.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android基础7 广播接收者(BroadcastReceiver)</title>
    <link href="http://www.sguotao.com//blog/2011/06/Android%E5%9F%BA%E7%A1%80-2011-06-28-android-basic-7.html"/>
    <id>http://www.sguotao.com//blog/2011/06/Android基础-2011-06-28-android-basic-7.html</id>
    <published>2011-06-28T02:27:04.000Z</published>
    <updated>2017-04-27T02:39:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-广播的类型"><a href="#1-广播的类型" class="headerlink" title="1. 广播的类型"></a>1. 广播的类型</h2><p>广播被分为两种不同的类型：普通广播（Normal broadcasts）和“有序广播（Ordered broadcasts）。普通广播是完全异步的，可以在同一时刻（逻辑上）被所有接收者接收到，消息传递的效率比较高，但缺点是：接收者不能将处理结果传递给下一个接收者，并且无法终止广播Intent的传播；</p>
<p>有序广播是按照接收者声明的优先级别，被接收者依次接收广播。如A的级别高于B,B的级别高于C,那么，广播先传给A，再传给B，最后传给C 。优先级别声明在intent-filter元素的android:priority属性中，数越大优先级别越高,取值范围:-1000到1000，优先级别也可以调用IntentFilter对象的setPriority()进行设置 。有序广播的接收者可以终止广播Intent的传播，广播Intent的传播一旦终止，后面的接收者就无法接收到广播。另外，有序广播的接收者可以将数据传递给下一个接收者，如A得到广播后，可以往它的结果对象中存入数据，当广播传给B时,B可以从A的结果对象中得到A存入的数据。<br>&lt;?prettify?&gt;</p>
<pre class="prettyprint">
//发送的是普通广播，所有订阅者都有机会获得并进行处理。
Context.sendBroadcast()
//发送有序广播
Context.sendOrderedBroadcast()
</pre>

<p>发送的是有序广播，系统会根据接收者声明的优先级别按顺序逐个执行接收者，前面的接收者有权终止广播(BroadcastReceiver.abortBroadcast())，如果广播被前面的接收者终止，后面的接收者就再也无法获取到广播。对于有序广播，前面的接收者可以将数据通过setResultExtras(Bundle)方法存放进结果对象，然后传给下一个接收者，下一个接收者通过代码：Bundle bundle = getResultExtras(true))可以获取上一个接收者存入在结果对象中的数据。</p>
<p>系统收到短信，发出的广播属于有序广播。如果想阻止用户收到短信，可以通过设置优先级，让你们自定义的接收者先获取到广播，然后终止广播，这样用户就接收不到短信了。</p>
<h2 id="2-定义广播接收者"><a href="#2-定义广播接收者" class="headerlink" title="2. 定义广播接收者"></a>2. 定义广播接收者</h2><p>广播接收者（BroadcastReceiver）用于接收广播Intent，广播Intent的发送是通过调用Context.sendBroadcast()、Context.sendOrderedBroadcast()来实现的。通常一个广播Intent可以被订阅了此Intent的多个广播接收者所接收，这个特性跟JMS中的Topic消息接收者类似。要实现一个广播接收者方法如下：<br>第一步：继承BroadcastReceiver，并重写onReceive()方法。<br>&lt;?prettify?&gt;</p>
<pre class="prettyprint">
public class IncomingSMSReceiver extends BroadcastReceiver {
    @Override public void onReceive(Context context, Intent intent) {
    }
}
</pre>

<p>第二步：订阅感兴趣的广播Intent，订阅方法有两种：<br>&lt;?prettify?&gt;</p>
<pre class="prettyprint">
//1.使用代码进行订阅
IntentFilter filter = new IntentFilter("android.provider.Telephony.SMS_RECEIVED");
IncomingSMSReceiver receiver = new IncomingSMSReceiver();
registerReceiver(receiver, filter);
//2.在AndroidManifest.xml文件中的&lt;application&gt;节点里进行订阅:
&lt;receiver android:name=".IncomingSMSReceiver"&gt;
    &lt;intent-filter&gt;
         &lt;action android:name="android.provider.Telephony.SMS_RECEIVED"/&gt;
    &lt;/intent-filter&gt;
&lt;/receiver&gt;
</pre>

<h2 id="3-发送广播（无序广播和有序广播的比较）"><a href="#3-发送广播（无序广播和有序广播的比较）" class="headerlink" title="3. 发送广播（无序广播和有序广播的比较）"></a>3. 发送广播（无序广播和有序广播的比较）</h2><h3 id="3-1-无序广播"><a href="#3-1-无序广播" class="headerlink" title="3.1 无序广播"></a>3.1 无序广播</h3><ol>
<li>使用sendBroadcast方法发送</li>
<li>被所有广播接收者接收，无序，不可中断</li>
<li>广播时可设置接收者权限，仅当接收者含有权限才能接收</li>
<li>接收者的<receiver>也可设置发送方权限，只接收含有权限应用的广播</receiver></li>
</ol>
<h3 id="3-2-有序广播"><a href="#3-2-有序广播" class="headerlink" title="3.2 有序广播"></a>3.2 有序广播</h3><ol>
<li>使用sendOrderedBroadcast方法发送</li>
<li>接收者可以在<intent-filter>中定义android:priority定义优先级，数字越大优先级越高</intent-filter></li>
<li>被各个广播接收者逐个接收，中途可以中断或者添加数据</li>
</ol>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">abortBroadcast</span>()  </div><div class="line"><span class="selector-tag">getResultExtras</span>(true)<span class="selector-class">.putString</span>(<span class="string">"data"</span>, <span class="string">"新增数据"</span>);</div></pre></td></tr></table></figure>
<h2 id="4-监听短信接收"><a href="#4-监听短信接收" class="headerlink" title="4. 监听短信接收"></a>4. 监听短信接收</h2><p>当系统收到短信时，会发出一个广播Intent，Intent的action名称为android.provider.Telephony.SMS_RECEIVED，该Intent存放了系统接收到的短信内容，我们使用名称“pdus”即可从Intent中获取到短信内容。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">IncomingSMSReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> static <span class="keyword">final</span> <span class="type">String</span> <span class="type">SMS_RECEIVED</span> = <span class="string">"android.provider.Telephony.SMS_RECEIVED"</span>;</div><div class="line"><span class="meta">@Override</span> </div><div class="line">public void onReceive(<span class="type">Context</span> context, <span class="type">Intent</span> intent) &#123;</div><div class="line"><span class="keyword">if</span> (intent.getAction().equals(<span class="type">SMS_RECEIVED</span>)) &#123;</div><div class="line">	<span class="type">SmsManager</span> sms = <span class="type">SmsManager</span>.getDefault();</div><div class="line">	<span class="type">Bundle</span> bundle = intent.getExtras();</div><div class="line">	<span class="keyword">if</span> (bundle != <span class="literal">null</span>) &#123;</div><div class="line">	<span class="type">Object</span>[] pdus = (<span class="type">Object</span>[]) bundle.get(<span class="string">"pdus"</span>);</div><div class="line">	<span class="type">SmsMessage</span>[] messages = <span class="keyword">new</span> <span class="type">SmsMessage</span>[pdus.length];</div><div class="line">	<span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; pdus.length; i++) </div><div class="line">	messages[i] = <span class="type">SmsMessage</span>.createFromPdu((byte[]) pdus[i]);</div><div class="line">		<span class="keyword">for</span> (<span class="type">SmsMessage</span> message : messages)&#123;</div><div class="line">			<span class="type">String</span> msg = message.getMessageBody();</div><div class="line">			<span class="type">String</span> to = message.getOriginatingAddress();</div><div class="line">			sms.sendTextMessage(to, <span class="literal">null</span>, msg, <span class="literal">null</span>, <span class="literal">null</span>);</div><div class="line">&#125;&#125;&#125;&#125;&#125;</div></pre></td></tr></table></figure>
<p>在AndroidManifest.xml文件中的<application>节点里对接收到短信的广播Intent进行订阅。</application></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".IncomingSMSReceiver"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">actionandroid:name="android.provider.Telephony.SMS_RECEIVED"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在AndroidManifest.xml文件中添加以下权限：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.RECEIVE_SMS"</span>/&gt;</span><span class="comment">&lt;!-- 接收短信权限 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.SEND_SMS"</span>/&gt;</span><span class="comment">&lt;!-- 发送短信权限 --&gt;</span></div></pre></td></tr></table></figure>
<p>Android系统在收到短信的时候会发送一条有序广播，我们如果定义一个接收者接收这个广播，就可以得到短信内容，也可以拦截短信。</p>
<ol>
<li>定义广播接收者接收广播</li>
<li>在onReceive方法内部调用Intent的getExtras()获取其中pdus字段，得到一个Object[]，其中每    一个    元素都是一个byte[]。</li>
<li>通过SmsMessage类的createFromPdu方法创建SmsMessage对象</li>
<li>从SmsMessage对象中即可获取发送者号码、短信内容、发送时间等信息</li>
<li>需要接收短信权限：</li>
</ol>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.RECEIVE_SMS"</span>/&gt;</div></pre></td></tr></table></figure>
<p>Android系统中收到短信的通知是一个有序通知，我们如需拦截垃圾短信，可以配置较高的priority，收到信息进行判断是否abortBroadcast()。除了短信到来广播Intent，Android还有很多广播Intent，如：开机启动、电池电量变化、时间已经改变等广播Intent。接收电池电量变化广播Intent ，在AndroidManifest.xml文件中的<application>节点里订阅此Intent</application></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".IncomingSMSReceiver"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.BATTERY_CHANGED"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure>
<p>接收开机启动广播Intent，在AndroidManifest.xml文件中的<application>节点里订阅此Intent:</application></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".IncomingSMSReceiver"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.BOOT_COMPLETED"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure>
<p>并且要进行权限声明：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.RECEIVE_BOOT_COMPLETED"</span>/&gt;</div></pre></td></tr></table></figure>
<h2 id="5-监听呼出电话"><a href="#5-监听呼出电话" class="headerlink" title="5. 监听呼出电话"></a>5. 监听呼出电话</h2><p>向外拨打电话时系统会发出一个有序广播，虽然该广播最终会被拔号器里的广播接收者所接收并实现电话拔打，但我们可以在广播传递给拔号广播接收者之前先得到该广播，然后清除传递给拔号广播接收者的电话号码，在拔号广播接收者接收到该广播时，由于电话号码为null，因此取消电话拔打。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">OutgoingCallReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">     public void onReceive(<span class="type">Context</span> context, <span class="type">Intent</span> intent) &#123;</div><div class="line">		<span class="comment">//清除电话，广播被传给系统的接收者后，因为电话为null，取消电话拔打</span></div><div class="line">           setResultData(<span class="literal">null</span>);      </div><div class="line">          <span class="comment">// 同样如果你想修改外拔的电话号码，可以这样做</span></div><div class="line">          <span class="comment">// String phone = getResultData();//得到外拔电话</span></div><div class="line">          <span class="comment">// setResultData(“12593”+ phone);//在电话前面加上12593</span></div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>a)    接收外拔电话广播Intent，在AndroidManifest.xml文件中的<application>节点里订阅此Intent。</application></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".OutgoingCallReceiver"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.NEW_OUTGOING_CALL"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure>
<p>b)    并且要进行权限声明：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.PROCESS_OUTGOING_CALLS"</span>/&gt;</div></pre></td></tr></table></figure>
<p>在onReceive方法中使用getResultData() 和 setResultData() 方法获取和设置电话号码</p>
<h2 id="6-生命周期"><a href="#6-生命周期" class="headerlink" title="6. 生命周期"></a>6. 生命周期</h2><ol>
<li>广播接收者的生命周期是非常短暂的，在接收到广播的时候创建，onReceive()方法结束之后销毁</li>
<li>广播接收者中不要做一些耗时的工作，耗时的较长的工作最好放在服务中完成，否则会弹出Application No Response错误对话框</li>
<li>最好也不要在广播接收者中创建子线程做耗时的工作，因为广播接收者被销毁后进程就成为了空进程，很容易被系统杀掉。</li>
</ol>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/blog/2011/06/Android基础-2011-06-28-android-basic-7.html">http://www.sguotao.com/blog/2011/06/Android基础-2011-06-28-android-basic-7.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-广播的类型&quot;&gt;&lt;a href=&quot;#1-广播的类型&quot; class=&quot;headerlink&quot; title=&quot;1. 广播的类型&quot;&gt;&lt;/a&gt;1. 广播的类型&lt;/h2&gt;&lt;p&gt;广播被分为两种不同的类型：普通广播（Normal broadcasts）和“有序广播（Order
    
    </summary>
    
      <category term="Android基础" scheme="http://www.sguotao.com/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://www.sguotao.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android基础6 活动(Activity)</title>
    <link href="http://www.sguotao.com//blog/2011/06/Android%E5%9F%BA%E7%A1%80-2011-06-27-android-basic-6.html"/>
    <id>http://www.sguotao.com//blog/2011/06/Android基础-2011-06-27-android-basic-6.html</id>
    <published>2011-06-27T02:27:04.000Z</published>
    <updated>2017-04-27T02:37:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-创建Activity"><a href="#1-创建Activity" class="headerlink" title="1. 创建Activity"></a>1. 创建Activity</h2><h2 id="1-1-定义Activity"><a href="#1-1-定义Activity" class="headerlink" title="1.1 定义Activity"></a>1.1 定义Activity</h2><p><strong>定义类继承Activity</strong><br>&lt;?prettify?&gt;</p>
<pre class="prettyprint">
public class NewActivity extends Activity {
    @Override protected void onCreate(Bundle savedInstanceState) {
                   super.onCreate(savedInstanceState);
      //这里可以使用setContentView(R.layout.xxx)显示某个视图....
     }
}
</pre>

<p><strong>在AndroidManifest.xml的&lt;application&gt;节点中声明&lt;activity&gt;</strong></p>
<p>&lt;?prettify?&gt;</p>
<pre class="prettyprint">
&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
      package="cn.ncist.action"     android:versionCode="1"  android:versionName="1.0"&gt;
    &lt;application android:icon="@drawable/icon" android:label="@string/app_name"&gt;
        .....
    &lt;activity android:name=".NewActivity" android:label="新activity的页面标题"/&gt;
    &lt;/application&gt;
    ...
&lt;/manifest&gt;
</pre>

<p>android:name属性值的前面加了一个点表示NewActivity是当前包cn.ncist.action下的类，如果类在应用的当前包下，可以省略点符号，如果类在应用的子包下必须加点，如：NewActivity类在cn.ncist.action.user包下可以这样写：<activity android:name="“.user.NewActivity“"></activity></p>
<h3 id="1-2-显式意图创建方式"><a href="#1-2-显式意图创建方式" class="headerlink" title="1.2 显式意图创建方式"></a>1.2 显式意图创建方式</h3><ol>
<li>构造函数，代码少<br>new Intent(this, NewActivity.class);</li>
<li>类名形式，灵活，可扩展性强<br>intent.setClassName(this, “cn.ncist.activity.NewActivity”);</li>
<li>包名类名形式，可启动其他程序中的Activity<br>intent.setClassName(“cn.ncist.downloader”, “cn.ncist.downloader.MainActivity”);</li>
</ol>
<h3 id="1-3-创建Activity并传递数据"><a href="#1-3-创建Activity并传递数据" class="headerlink" title="1.3 创建Activity并传递数据"></a>1.3 创建Activity并传递数据</h3><ol>
<li>在意图对象中封装了一个Bundle对象，可以用来携带数据</li>
<li>在新Activity中可以获得意图对象以获取其中Bundle保存的数据<br>&lt;?prettify?&gt;<br><pre class="prettyprint"><br>public class MainActivity extends Activity {<br>@Override protected void onCreate(Bundle savedInstanceState) {<br> …….<br>  button.setOnClickListener(new View.OnClickListener(){//点击该按钮会打开一个新的Activity<pre><code>public void onClick(View v) {
 Intent intent = new Intent(MainActivity.this, NewActivity.class)
</code></pre>Bundle bundle = new Bundle();//该类用作携带数据<br>bundle.putString(“name”, “华北科技”);<br>bundle.putInt(“age”, 4);<br>intent.putExtras(bundle);//附带上额外的数据<br>startActivity(intent);<br> }}); }<br>}</pre></li>
</ol>
<p>public class NewActivity extends Activity {<br>            @Override protected void onCreate(Bundle savedInstanceState) {<br>         ……..<br>         Bundle bundle = this.getIntent().getExtras();<br>         String name = bundle.getString(“name”);<br>                        int age = bundle.getInt(“age”);<br>            }<br>}<br></p>
<h3 id="1-4-创建Activity获取返回数据"><a href="#1-4-创建Activity获取返回数据" class="headerlink" title="1.4 创建Activity获取返回数据"></a>1.4 创建Activity获取返回数据</h3><ol>
<li>使用startActivityForResult(Intent intent, int requestCode) 方法打开Activity</li>
<li>重写onActivityResult(int requestCode, int resultCode, Intent data) 方法</li>
<li>新Activity中调用setResult(int resultCode, Intent data) 设置返回数据之后，关闭Activity就会调用onActivityResult方法</li>
</ol>
<h3 id="1-5-隐式意图创建Activity"><a href="#1-5-隐式意图创建Activity" class="headerlink" title="1.5 隐式意图创建Activity"></a>1.5 隐式意图创建Activity</h3><ol>
<li>显式意图是指在创建意图时指定了组件，而隐式意图则不指定组件，通过动作、类型、数据匹配对应的组件</li>
<li>在清单文件中定义&lt;activity&gt;时需要定义&lt;intent-filter&gt;才能被隐式意图启动</li>
<li>&lt;intent-filter&gt;中至少配置一个&lt;action&gt;和一个&lt;category&gt;，否则无法被启动</li>
<li>Intent对象中设置的action、category、data在&lt;intent-filter&gt;必须全部包含才能启动</li>
<li>&lt;intent-filter&gt;中的&lt;action&gt;、&lt;category&gt;、&lt;data&gt;都可以配置多个，Intent对象中不用全部匹配，每样匹配一个即可启动<br>如果一个意图可以匹配多个Activity，Android系统会提示选择</li>
</ol>
<h2 id="2-Bundle类的作用"><a href="#2-Bundle类的作用" class="headerlink" title="2. Bundle类的作用"></a>2. Bundle类的作用</h2><p>Bundle类用作携带数据，它类似于Map，用于存放key-value名值对形式的值。相对于Map，它提供了各种常用类型的putXxx()/getXxx()方法，如:putString()/getString()和putInt()/getInt()，putXxx()用于往Bundle对象放入数据，getXxx()方法用于从Bundle对象里获取数据。Bundle的内部实际上是使用了HashMap&lt;String, Object&gt;类型的变量来存放putXxx()方法放入的值：<br>&lt;?prettify?&gt;</p>
<pre class="prettyprint">
public final class Bundle implements Parcelable, Cloneable {
            ......
 Map&lt;String, Object&gt; mMap;
 public Bundle() {
       mMap = new HashMap<string, object="">();
        ......
 }
 public void putString(String key, String value) {
      mMap.put(key, value);
 }
public String getString(String key) {
       Object o = mMap.get(key);
        return (String) o;
        ........//类型转换失败后会返回null，这里省略了类型转换失败后的处理代码
}
}
</string,></pre>

<p>在调用Bundle对象的getXxx()方法时，方法内部会从该变量中获取数据，然后对数据进行类型转换，转换成什么类型由方法的Xxx决定，getXxx()方法会把转换后的值返回。</p>
<h2 id="3-Intent意图"><a href="#3-Intent意图" class="headerlink" title="3. Intent意图"></a>3. Intent意图</h2><p>Android基本的设计理念是鼓励减少组件间的耦合，因此Android提供了Intent (意图) ，Intent提供了一种通用的消息系统，它允许在你的应用程序与其它的应用程序间传递Intent来执行动作和产生事件。使用Intent可以激活Android应用的三个核心组件：活动、服务和广播接收器。</p>
<p><strong>Intent可以划分成显式意图和隐式意图</strong><br>显式意图：调用Intent.setComponent()或Intent.setClass()方法明确指定了组件名的Intent为显式意图，显式意图明确指定了Intent应该传递给哪个组件。<br>隐式意图:没有明确指定组件名的Intent为隐式意图。 Android系统会根据隐式意图中设置的动作(action)、类别(category)、数据（URI和数据类型）找到最合适的组件来处理这个意图。<br>&lt;?prettify?&gt;</p>
<pre class="prettyprint">
&lt;intent-filter&gt; 
&lt;action android:name="android.intent.action.CALL" /&gt; 
&lt;category android:name="android.intent.category.DEFAULT" /&gt; 
&lt;data android:scheme="tel" /&gt; 
&lt;/intent-filter&gt; 
&lt;intent-filter&gt; 
&lt;action android:name="android.intent.action.CALL" /&gt; 
&lt;category android:name="android.intent.category.DEFAULT" /&gt; 
&lt;data android:mimeType="vnd.android.cursor.item/phone" /&gt; 
&lt;/intent-filter&gt;
</pre>

<p>对于隐式意图，Android是怎样寻找到这个最合适的组件呢？记的前面我们在定义活动时，指定了一个intent-filter，Intent Filter（意图过滤器）其实就是用来匹配隐式Intent的，当一个意图对象被一个意图过滤器进行匹配测试时，只有三个方面会被参考到：动作、数据（URI以及数据类型）和类别。</p>
<p><strong>动作测试（Action test）</strong><br>一个意图对象只能指定一个动作名称，而一个过滤器可能列举多个动作名称。如果意图对象或过滤器没有指定任何动作，结果将如下：</p>
<ol>
<li>如果过滤器没有指定任何动作，那么将阻塞所有的意图，因此所有的意图都会测试失败。没有意图能够通过这个过滤器。 </li>
<li>另一方面，只要过滤器包含至少一个动作，一个没有指定动作的意图对象自动通过这个测试</li>
</ol>
<p><strong>类别测试（Category test）</strong><br>对于一个能够通过类别匹配测试的意图，意图对象中的类别必须匹配过滤器中的类别。这个过滤器可以列举另外的类别，但它不能遗漏在这个意图中的任何类别。原则上一个没有类别的意图对象应该总能够通过匹配测试，而不管过滤器里有什么。大部分情况下这个是对的。但有一个例外，Android把所有传给startActivity()的隐式意图当作他们包含至少一个类别：”android.intent.category.DEFAULT” （CATEGORY_DEFAULT常量）。 因此，想要接收隐式意图的活动必须在它们的意图过滤器中包含”android.intent.category.DEFAULT”。（带”android.intent.action.MAIN”和”android.intent.category.LAUNCHER”设置的过滤器是例外）</p>
<p><strong>数据测试（Data test）</strong><br>当一个意图对象中的URI被用来和一个过滤器中的URI比较时，比较的是URI的各个组成部分。例如，如果过滤器仅指定了一个scheme，所有该scheme的URIs都能够和这个过滤器相匹配；如果过滤器指定了一个scheme、主机名但没有路经部分，所有具有相同scheme和主机名的URIs都可以和这个过滤器相匹配，而不管它们的路经；如果过滤器指定了一个scheme、主机名和路经，只有具有相同scheme、主机名和路经的URIs才可以和这个过滤器相匹配。当然，一个过滤器中的路径规格可以包含通配符，这样只需要部分匹配即可。</p>
<p>数据测试同时比较意图对象和过滤器中指定的URI和数据类型。规则如下：</p>
<ol>
<li>一个既不包含URI也不包含数据类型的意图对象仅在过滤器也同样没有指定任何URIs和数据类型的情况下才能通过测试。</li>
<li>一个包含URI但没有数据类型的意图对象仅在它的URI和一个同样没有指定数据类型的过滤器里的URI匹配时才能通过测试。这通常发生在类似于mailto:和tel：这样的URIs上：它们并不引用实际数据。</li>
<li>一个包含数据类型但不包含URI的意图对象仅在这个过滤器列举了同样的数据类型而且也没有指定一个URI的情况下才能通过测试。</li>
<li>一个同时包含URI和数据类型（或者可从URI推断出数据类型）的意图对象可以通过测试，如果它的类型和过滤器中列举的类型相匹配的话。如果它的URI和这个过滤器中的一个URI相匹配或者它有一个内容content:或者文件file: URI而且这个过滤器没有指定一个URI，那么它也能通过测试。换句话说，一个组件被假定为支持content:和file: 数据如果它的过滤器仅列举了一个数据类型。</li>
</ol>
<p><strong>为Intent附加数据的两种形式</strong>：<br>第一种写法，用于批量添加数据到Intent：<br>&lt;?prettify?&gt;</p>
<pre class="prettyprint">
Intent intent = new Intent();
Bundle bundle = new Bundle();//该类用作携带数据
bundle.putString("name", "华北科技");
intent.putExtras(bundle);//为意图追加额外的数据，意图原来已经具有的数据不会丢失，但key同名的数据会被替换
</pre>

<p>第二种写法：这种写法的作用等价于上面的写法，只不过这种写法是把数据一个个地添加进Intent，这种写法使用起来比较方便，而且只需要编写少量的代码。<br>&lt;?prettify?&gt;</p>
<pre class="prettyprint">
Intent intent = new Intent();
intent.putExtra("name", "华北科技");
</pre>

<p>Intent提供了各种常用类型重载后的putExtra()方法，如： putExtra(String name, String value)、 putExtra(String name, long value)，在putExtra()方法内部会判断当前Intent对象内部是否已经存在一个Bundle对象，如果不存在就会新建Bundle对象，以后调用putExtra()方法传入的值都会存放于该Bundle对象，下面是Intent的putExtra(String name, String value)方法代码片断：<br>&lt;?prettify?&gt;</p>
<pre class="prettyprint">
public class Intent implements Parcelable {
private Bundle mExtras;
public Intent putExtra(String name, String value) {
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putString(name, value);
        return this;
 }
</pre>

<h2 id="4-生命周期"><a href="#4-生命周期" class="headerlink" title="4. 生命周期"></a>4. 生命周期</h2><p><strong>Acitivity三种状态</strong></p>
<ol>
<li>运行：activity在屏幕最前端运行（位于当前任务栈的顶部）</li>
<li>暂停：当它上面有另外一个Activity，使它失去了焦点但任然对用户可见时，它处于暂停状态，在它之上的Activity没有完全覆盖屏幕或者是透明的，被暂停的Activity仍然对用户可见，并且是存活状态（它保留着所有的状态和成员信息并保持和窗口管理器的连接）。如果系统处于内存不足时，会杀死这个Activity。</li>
<li>停止：activity不可见，完全被覆盖，它仍然保留着所有的状态和成员信息，然而对用户是不可见的，所以它的窗口被隐藏，如果其它地方需要内存，则系统经常会杀死这个Activity。</li>
</ol>
<p><strong>生命周期相关方法</strong><br>当Activity从一种状态转变到另外一种状态时，会调用以下保护方法来通知这种变化。</p>
<ol>
<li>onCreate：创建时调用，或者程序在暂停、停止状态下被杀死之后重新打开时也会调用</li>
<li>onStart：onCreate之后或者从停止状态恢复时调用</li>
<li>onResume：onStart之后或者从暂停状态恢复时调用，从停止状态恢复时由于调用onStart，也会调用onResume</li>
<li>onPause：进入暂停、停止状态，或者销毁时会调用</li>
<li>onStop：进入停止状态，或者销毁时会调用</li>
<li>onDestroy：销毁时调用</li>
<li>onRestart：从停止状态恢复时调用<br>这七个方法定义了Activity的完整的声明周期。<br><img src="http://7u2np3.com1.z0.glb.clouddn.com/blog%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-06-14%20%E4%B8%8B%E5%8D%884.46.59.png" alt=""></li>
</ol>
<p><strong>Activity的完整声明周期</strong><br>自第一次调用onCreate()开始，直至调用onDestroy()为止。Activity在onCreate()中设置所有“全局”状态以完成初始化，而在onDestroy()中释放所有系统资源。</p>
<p><strong>Activity的可视声明周期</strong><br>自onStart()调用开始直到相应的onStop()调用结束，在此期间，用户可以在屏幕上看到Activity，尽管它也许并不是位于前台或者也不予用户进行交互，在这两个方法之间，可以保留用来向用户显示这个Activity所需的资源。</p>
<p><strong>Activity的前台声明周期</strong><br>自onResume()调用起，至相应的onPause()调用为止，在此期间，Activity位于前台最上面并于用户进行交互。Activity会经常在暂停和恢复之间进行状态转换。</p>
<p>Activity的前台生命周期循环例子:</p>
<ol>
<li>创建一个Activity，添加七个生命周期方法，方法内输出各个方法名称。再添加一个按钮用于打开下面新添加的Activity。<br> startActivity(new Intent(LifeActivity.this, CustomDialogActivity.class));</li>
<li>添加一个新Activity，代码如下：<br>&lt;?prettify?&gt;<pre class="prettyprint">
public class CustomDialogActivity extends Activity {
 @Override protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     //必须在调用setContentView()之前调用requestWindowFeature()
     requestWindowFeature(Window.FEATURE_LEFT_ICON);//要标题栏显示图标
     setContentView(R.layout.dialog_activity);       
     getWindow().setFeatureDrawableResource(Window.FEATURE_LEFT_ICON, android.R.drawable.ic_dialog_alert);//设置图标
 }
}
</pre>

</li>
</ol>
<p>在AndroidManifest.xml文件配置Activity，并且通过主题指定该Activity以对话框样式显示。<br>&lt;?prettify?&gt;</p>
<pre class="prettyprint">
&lt;application android:icon="@drawable/icon" android:label="@string/app_name"&gt;
        .....
       &lt;activity android:name=".CustomDialogActivity" android:label="对话框activity" 
    android:theme="@android:style/Theme.Dialog"/&gt;
 &lt;/application&gt;
</pre>

<h2 id="5-保存信息相关方法"><a href="#5-保存信息相关方法" class="headerlink" title="5. 保存信息相关方法"></a>5. 保存信息相关方法</h2><p>Activity的 onSaveInstanceState() 和 onRestoreInstanceState()并不是生命周期方法，它们不同于 onCreate()、onPause()等生命周期方法，它们并不一定会被触发。当应用遇到意外情况（如：内存不足、用户直接按Home键）由系统销毁一个Activity时，onSaveInstanceState() 会被调用。但是当用户主动去销毁一个Activity时，例如在应用中按返回键，onSaveInstanceState()就不会被调用。因为在这种情况下，用户的行为决定了不需要保存Activity的状态。通常onSaveInstanceState()只适合用于保存一些临时性的状态，而onPause()适合用于数据的持久化保存。</p>
<p>另外，当屏幕的方向发生了改变， Activity会被摧毁并且被重新创建，如果你想在Activity被摧毁前缓存一些数据，并且在Activity被重新创建后恢复缓存的数据。可以重写Activity的 onSaveInstanceState() 和 onRestoreInstanceState()方法，如下：<br>&lt;?prettify?&gt;</p>
<pre class="prettyprint">
public class PreferencesActivity extends Activity {
    private String name;
    protected void onRestoreInstanceState(Bundle savedInstanceState) {
    name = savedInstanceState.getString("name"); //被重新创建后恢复缓存的数据
    super.onRestoreInstanceState(savedInstanceState);
    }
    protected void onSaveInstanceState(Bundle outState) {
    outState.putString("name", "liming");//被摧毁前缓存一些数据
    super.onSaveInstanceState(outState);
    }
}
</pre>

<p>onSaveInstanceState()：在Activity被动的摧毁或停止的时候调用，用于保存运行数据，可以将数据存在在Bundle中。</p>
<p>onRestoreInstanceState()：该方法在Activity被重新绘制的时候调用，例如改变屏幕方向，savedInstanceState为onSaveInstanceState保存的数据。</p>
<p><strong>横竖屏幕的切换</strong><br>默认情况下，当“屏幕方向”或“键盘显示隐藏” 变化时都会销毁当前Activity，创建新的Activity。如果不希望重新创建Activity实例，可以按如下配置Activity：<br>&lt;?prettify?&gt;</p>
<pre class="prettyprint">
&lt;activity android:name=".MainActivity" android:configChanges="keyboardHidden|orientation"&gt;
</pre>

<p>上面的android:configChanges属性指定了要捕获“屏幕方向”和“键盘显示隐藏”变化，当捕获到这些变化后会调用Activity的onConfigurationChanged()方法。默认情况下(没有配置android:configChanges属性)：</p>
<ol>
<li>竖屏切横屏，销毁当前Activity之后，创建一个新Activity实例。</li>
<li>横屏切竖屏，销毁当前Activity之后，创建一个新Activity实例，新的Activity实例很快就被销毁，接着又会创建一个新Activity实例。如果只希望创建一个实例，可以配置<br>android:configChanges=”orientation”</li>
</ol>
<h2 id="6-得到新打开的Activity关闭后返回的数据"><a href="#6-得到新打开的Activity关闭后返回的数据" class="headerlink" title="6. 得到新打开的Activity关闭后返回的数据"></a>6. 得到新打开的Activity关闭后返回的数据</h2><p>如果你想在Activity中得到新打开Activity 关闭后返回的数据，你需要使用系统提供的startActivityForResult(Intent intent, int requestCode)方法打开新的Activity，新的Activity 关闭后会向前面的Activity 传回数据，为了得到传回的数据，你必须在前面的Activity中重写onActivityResult(int requestCode, int resultCode, Intent data)方法：<br>&lt;?prettify?&gt;</p>
<pre class="prettyprint">
public class MainActivity extends Activity {
      @Override 
    protected void onCreate(Bundle savedInstanceState) {
    .......
    Button button =(Button) this.findViewById(R.id.button);
    button.setOnClickListener(new View.OnClickListener(){//点击该按钮会打开一个新的Activity
        public void onClick(View v) {
        //第二个参数为请求码，可以根据业务需求自己编号
        startActivityForResult (new Intent(MainActivity.this, NewActivity.class),  1);
    }});
         }
    //第一个参数为请求码，即调用startActivityForResult()传递过去的值
    //第二个参数为结果码，结果码用于标识返回数据来自哪个新Activity
   @Override 
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    String result = data.getExtras().getString(“result”));//得到新Activity 关闭后返回的数据
    }
}    
</pre>

<p>当新Activity关闭后，新Activity返回的数据通过Intent进行传递，android平台会调用前面Activity 的onActivityResult()方法，把存放了返回数据的Intent作为第三个输入参数传入，在onActivityResult()方法中使用第三个输入参数可以取出新Activity返回的数据。</p>
<p>使用startActivityForResult(Intent intent, int requestCode)方法打开新的Activity，新Activity关闭前需要向前面的Activity返回数据需要使用系统提供的setResult(int resultCode, Intent data)方法实现：<br>&lt;?prettify?&gt;</p>
<pre class="prettyprint">
public class NewActivity extends Activity {
    @Override 
protected void onCreate(Bundle savedInstanceState) {
        ......
      button.setOnClickListener(new View.OnClickListener(){
        public void onClick(View v) {
            Intent intent = new Intent();//数据是使用Intent返回
            intent.putExtra(“result”, “华北科技的学生很可爱”);//把返回数据存入Intent
             NewActivity.this.setResult(RESULT_OK, intent);//设置返回数据
             NewActivity.this.finish();//关闭Activity
        }});
    }
}
</pre>

<p>setResult()方法的第一个参数值可以根据业务需要自己定义，上面代码中使用到的RESULT_OK是系统Activity类定义的一个常量，值为-1，代码片断如下：<br>&lt;?prettify?&gt;</p>
<pre class="prettyprint">
public class android.app.Activity extends ......{
  public static final int RESULT_CANCELED = 0;
  public static final int RESULT_OK = -1;
  public static final int RESULT_FIRST_USER = 1;
}
</pre>

<p><strong>请求码的作用</strong><br>使用startActivityForResult(Intent intent, int requestCode)方法打开新的Activity，我们需要为startActivityForResult()方法传入一个请求码(第二个参数)。请求码的值是根据业务需要由自已设定，用于标识请求来源。</p>
<p>例如：一个Activity有两个按钮，点击这两个按钮都会打开同一个Activity，不管是那个按钮打开新Activity，当这个新Activity关闭后，系统都会调用前面Activity的onActivityResult(int requestCode, int resultCode, Intent data)方法。在onActivityResult()方法如果需要知道新Activity是由那个按钮打开的，并且要做出相应的业务处理，这时可以这样做：<br>&lt;?prettify?&gt;</p>
<pre class="prettyprint">
 @Override  
public void onCreate(Bundle savedInstanceState) {
        ....
        button1.setOnClickListener(new View.OnClickListener(){
      public void onClick(View v) {
           startActivityForResult (new Intent(MainActivity.this, NewActivity.class), 1);
       }});
        button2.setOnClickListener(new View.OnClickListener(){
      public void onClick(View v) {
           startActivityForResult (new Intent(MainActivity.this, NewActivity.class), 2);
       }}); 
       @Override 
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
               switch(requestCode){
                   case 1:
                       //来自按钮1的请求，作相应业务处理
                   case 2:
                    //来自按钮2的请求，作相应业务处理
                }
          }
}
</pre>

<p><strong>结果码的作用</strong><br>在一个Activity中，可能会使用startActivityForResult()方法打开多个不同的Activity处理不同的业务，当这些新Activity关闭后，系统都会调用前面Activity的onActivityResult(int requestCode, int resultCode, Intent data)方法。为了知道返回的数据来自于哪个新Activity，在onActivityResult()方法中可以这样做(ResultActivity和NewActivity为要打开的新Activity)：<br>&lt;?prettify?&gt;</p>
<pre class="prettyprint">
public class ResultActivity extends Activity {
       .....
       ResultActivity.this.setResult(1, intent);
       ResultActivity.this.finish();
}
public class NewActivity extends Activity {
       ......
        NewActivity.this.setResult(2, intent);
        NewActivity.this.finish();
}
public class MainActivity extends Activity { // 在该Activity会打开ResultActivity和NewActivity
       @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) {
               switch(resultCode){
                   case 1:
                       // ResultActivity的返回数据
                   case 2:
                   // NewActivity的返回数据
                }
          }
}
</pre>

<h2 id="7-内存管理"><a href="#7-内存管理" class="headerlink" title="7. 内存管理"></a>7. 内存管理</h2><p>Android系统在运行多个进程时，如果系统资源不足，会强制结束一些进程。优先选择哪个进程来结束是有优先级的。以下顺序靠上的优先结束</p>
<ol>
<li>空：进程中所有Activity都已销毁</li>
<li>后台：进程中有一个停止状态的Activity</li>
<li>服务：进程中一个运行中的Service</li>
<li>可见：进程中有一个暂停状态的Activity</li>
<li>前台：进程中正在运行一个Activity</li>
</ol>
<h2 id="8-应用的响应性ANR"><a href="#8-应用的响应性ANR" class="headerlink" title="8. 应用的响应性ANR"></a>8. 应用的响应性ANR</h2><p><img src="http://7u2np3.com1.z0.glb.clouddn.com/blog%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-06-14%20%E4%B8%8B%E5%8D%884.53.41.png" alt=""><br>在Android中，应用的响应性被活动管理器（Activity Manager）和窗口管理器（Window Manager）这两个系统服务所监视。当用户触发了输入事件（如键盘输入，点击按钮等），如果应用5秒内没有响应用户的输入事件，那么，Android会认为该应用无响应，便弹出ANR（Application No Response）对话框。</p>
<p>在正常情况下，Android程序会在一条单线程里运行。如果Activity要处理一件比较耗时的工作，应该交给子线程完成，否侧会因为主线程被阻塞，后面的用户输入事件因没能在5秒内响应，导致应用出现ANR对话框。</p>
<h2 id="9-姻缘属性affinities"><a href="#9-姻缘属性affinities" class="headerlink" title="9. 姻缘属性affinities"></a>9. 姻缘属性affinities</h2><p>应用场景：有两个android应用程序：旅游应用.apk，天气查询.apk，在Activity中配置<br>  android:allowTaskReparenting=”true”<br>   android:taskAffinity=”tianqi”<br>会将两个Activity放在同一个task任务栈，可以减少上下文切换到开销，节省资源。</p>
<h2 id="10-启动模式"><a href="#10-启动模式" class="headerlink" title="10.启动模式"></a>10.启动模式</h2><p>在AndroidManifest.xml中的<activity>标签中可以配置android:launchMode属性，用来控制Actvity的启动模式<br>在Android系统中我们创建的Acitivity是以栈的形式呈现的(task 任务栈) 一个应用程序可能包涵多个activity ,这些activity都是被放置在任务栈中的。可以把一个应用程序理解成一组任务的集合,即用户看到的界面(activity) 是被放置在任务栈当中的。</activity></p>
<ol>
<li>standard：默认的启动模式，每次调用startActivity()启动时都会创建一个新的Activity放在栈顶</li>
<li>singleTop：如果启动的Activity时，指定Activity不在栈顶就创建，如在栈顶，则不再创建，去调用onNewIntent()的方法。应用场景如浏览器的书签 ( bookmark ) 采用了该启动模式，不让用    户多次退出同一书签，增强用户的操作体验,  </li>
<li>singleTask：如果启动的Activity不存在就创建，如果存在直接跳转到指定的Activity所在位置，保证了当前的task栈中只有一个任务的实例</li>
<li>singleInstance：如果启动的Activity不存在就创建，如果存在就将指定的Activity移动到栈顶，开启一个新的task任务栈，用来维护新打开的Activity，原来的Activity中维护对其引用；</li>
</ol>
<p><strong>task任务栈，应用程序和进程之间关系</strong></p>
<ol>
<li>task任务栈：用来维护一组Activity的集合，通过设置task,可以更加合理的管理Activity;</li>
<li>应用程序：应用程序可以分为可见和不可见两种，可见的应用程序可以理解成一组任务的集合（Activity），不可见部分包括其它三大组件；</li>
<li>进程：操作系统的概念，开启的应用程序都会开启一个进程</li>
</ol>
<hr>
<p>本文链接：<a href="http://www.sguotao.com/blog/2011/06/Android基础-2011-06-27-android-basic-6.html">http://www.sguotao.com/blog/2011/06/Android基础-2011-06-27-android-basic-6.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-创建Activity&quot;&gt;&lt;a href=&quot;#1-创建Activity&quot; class=&quot;headerlink&quot; title=&quot;1. 创建Activity&quot;&gt;&lt;/a&gt;1. 创建Activity&lt;/h2&gt;&lt;h2 id=&quot;1-1-定义Activity&quot;&gt;&lt;a href
    
    </summary>
    
      <category term="Android基础" scheme="http://www.sguotao.com/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://www.sguotao.com/tags/Android/"/>
    
  </entry>
  
</feed>
